#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * –ó–∞–ø—É—Å–∫: node create-test-data.js
 */

const API_BASE = 'http://localhost:3000';

async function createTestData() {
  console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n');

  const testUsers = [
    {
      id: 1001,
      name: 'Frontend Developer',
      profession: 'frontend',
      language: 'en',
      tools: ['react', 'typescript', 'vue'],
      role: 'interviewer',
    },
    {
      id: 1002,
      name: 'Backend Developer',
      profession: 'backend',
      language: 'en',
      tools: ['nodejs', 'python', 'postgresql'],
      role: 'candidate',
    },
    {
      id: 1003,
      name: 'Full Stack Developer',
      profession: 'fullstack',
      language: 'en',
      tools: ['react', 'nodejs', 'typescript'],
      role: 'interviewer',
    },
  ];

  for (const user of testUsers) {
    try {
      console.log(`üìù –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è: ${user.name}`);

      // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
      const toolsResponse = await fetch(`${API_BASE}/api/user-tools`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: user.id,
          profession: user.profession,
          tools: user.tools,
        }),
      });

      if (toolsResponse.ok) {
        console.log(`  ‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${user.tools.join(', ')}`);
      } else {
        console.log(
          `  ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${toolsResponse.status}`
        );
      }

      // 2. –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏ (14:00)
      const slotTime = new Date();
      slotTime.setHours(14, 0, 0, 0);

      const preferencesResponse = await fetch(`${API_BASE}/api/preferences`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: user.id,
          role: user.role,
          profession: user.profession,
          language: user.language,
          slotsUtc: [slotTime.toISOString()],
        }),
      });

      if (preferencesResponse.ok) {
        console.log(`  ‚úÖ –°–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω: 14:00`);
      } else {
        console.log(
          `  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–∞: ${preferencesResponse.status}`
        );
      }
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${user.name}: ${error.message}`);
    }

    console.log('');
  }

  console.log('üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!');
  console.log('\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É:');
  console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
  console.log('2. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã');
  console.log('3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏');
  console.log('4. –î–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è —Å–ª–æ—Ç—ã —Å —É—á–µ—Ç–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤');
}

// –ó–∞–ø—É—Å–∫
if (import.meta.url === `file://${process.argv[1]}`) {
  createTestData();
}
