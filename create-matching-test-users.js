#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç—á–∏–Ω–≥–∞
 * –ó–∞–ø—É—Å–∫: node create-matching-test-users.js
 */

import { DateTime } from 'luxon';

const API_BASE = 'http://localhost:3000';

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç—á–∏–Ω–≥–∞
const matchingTestUsers = [
  // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ú–æ—Å–∫–≤–∞ - Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ 10:00
  {
    id: 3001,
    name: '–ê–ª–µ–∫—Å–µ–π (–ú–æ—Å–∫–≤–∞)',
    profession: 'frontend',
    language: 'ru',
    tools: ['react', 'typescript', 'css'],
    role: 'candidate',
    timezone: 'Europe/Moscow',
    timezoneOffset: 'UTC+3',
    preferredTime: '10:00',
  },
  {
    id: 3002,
    name: '–ú–∞—Ä–∏—è (–ú–æ—Å–∫–≤–∞)',
    profession: 'frontend',
    language: 'ru',
    tools: ['react', 'javascript', 'vue'],
    role: 'interviewer',
    timezone: 'Europe/Moscow',
    timezoneOffset: 'UTC+3',
    preferredTime: '10:00',
  },
  
  // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ - Backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ 17:00
  {
    id: 3003,
    name: '–°–µ—Ä–≥–µ–π (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)',
    profession: 'backend',
    language: 'ru',
    tools: ['nodejs', 'python', 'mongodb'],
    role: 'candidate',
    timezone: 'Asia/Vladivostok',
    timezoneOffset: 'UTC+10',
    preferredTime: '17:00',
  },
  {
    id: 3004,
    name: '–û–ª—å–≥–∞ (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)',
    profession: 'backend',
    language: 'ru',
    tools: ['nodejs', 'typescript', 'postgresql'],
    role: 'interviewer',
    timezone: 'Asia/Vladivostok',
    timezoneOffset: 'UTC+10',
    preferredTime: '17:00',
  },
  
  // –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ù—å—é-–ô–æ—Ä–∫ - Full Stack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ 15:00
  {
    id: 3005,
    name: 'Mike (New York)',
    profession: 'fullstack',
    language: 'en',
    tools: ['react', 'nodejs', 'typescript'],
    role: 'candidate',
    timezone: 'America/New_York',
    timezoneOffset: 'UTC-5',
    preferredTime: '15:00',
  },
  {
    id: 3006,
    name: 'Lisa (New York)',
    profession: 'fullstack',
    language: 'en',
    tools: ['vue', 'python', 'mongodb'],
    role: 'interviewer',
    timezone: 'America/New_York',
    timezoneOffset: 'UTC-5',
    preferredTime: '15:00',
  },
  
  // –°—Ü–µ–Ω–∞—Ä–∏–π 4: –õ–æ–Ω–¥–æ–Ω - DevOps —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ 13:00
  {
    id: 3007,
    name: 'David (London)',
    profession: 'devops',
    language: 'en',
    tools: ['docker', 'kubernetes', 'aws'],
    role: 'candidate',
    timezone: 'Europe/London',
    timezoneOffset: 'UTC+0',
    preferredTime: '13:00',
  },
  {
    id: 3008,
    name: 'Helen (London)',
    profession: 'devops',
    language: 'en',
    tools: ['jenkins', 'terraform', 'gcp'],
    role: 'interviewer',
    timezone: 'Europe/London',
    timezoneOffset: 'UTC+0',
    preferredTime: '13:00',
  },
  
  // –°—Ü–µ–Ω–∞—Ä–∏–π 5: –¢–æ–∫–∏–æ - Mobile —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ 20:00
  {
    id: 3009,
    name: 'Kenji (Tokyo)',
    profession: 'mobile',
    language: 'en',
    tools: ['react-native', 'swift', 'firebase'],
    role: 'candidate',
    timezone: 'Asia/Tokyo',
    timezoneOffset: 'UTC+9',
    preferredTime: '20:00',
  },
  {
    id: 3010,
    name: 'Aiko (Tokyo)',
    profession: 'mobile',
    language: 'en',
    tools: ['flutter', 'dart', 'kotlin'],
    role: 'interviewer',
    timezone: 'Asia/Tokyo',
    timezoneOffset: 'UTC+9',
    preferredTime: '20:00',
  },
];

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ UTC
function convertLocalToUTC(localTime, timezone) {
  const [hours, minutes] = localTime.split(':').map(Number);
  const localDate = DateTime.now().setZone(timezone);
  const slotDate = localDate.set({ hour: hours, minute: minutes, second: 0, millisecond: 0 });
  const utcDate = slotDate.toUTC();
  return utcDate.toISO();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏
async function createUserWithPreferences(user) {
  try {
    console.log(`\nüë§ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.name} (${user.timezoneOffset})`);
    console.log(`   –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${user.profession}, –†–æ–ª—å: ${user.role}, –Ø–∑—ã–∫: ${user.language}`);
    console.log(`   –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${user.tools.join(', ')}`);
    console.log(`   –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${user.preferredTime} (${user.timezone})`);

    // 1. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ UTC
    const utcSlot = convertLocalToUTC(user.preferredTime, user.timezone);
    const utcTime = DateTime.fromISO(utcSlot).toFormat('HH:mm');
    
    console.log(`   UTC –≤—Ä–µ–º—è: ${utcTime} (${utcSlot})`);

    // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å UTC —Å–ª–æ—Ç–æ–º
    const preferencesResponse = await fetch(`${API_BASE}/api/preferences`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userId: user.id,
        role: user.role,
        profession: user.profession,
        language: user.language,
        slotsUtc: [utcSlot],
      }),
    });

    if (preferencesResponse.ok) {
      console.log(`   ‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`);
    } else {
      const error = await preferencesResponse.text();
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: ${preferencesResponse.status} - ${error}`);
    }

    // 3. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —Å–ª–æ—Ç—É
    const joinResponse = await fetch(`${API_BASE}/api/slots/join`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userId: user.id,
        role: user.role,
        profession: user.profession,
        language: user.language,
        slotUtc: utcSlot,
        tools: user.tools,
      }),
    });

    if (joinResponse.ok) {
      const joinResult = await joinResponse.json();
      console.log(`   ‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–ª–æ—Ç—É (–ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: ${joinResult.position || 'N/A'})`);
    } else {
      const error = await joinResponse.text();
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${joinResponse.status} - ${error}`);
    }

    return {
      ...user,
      utcSlot,
      utcTime,
      success: true,
    };

  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${user.name}: ${error.message}`);
    return {
      ...user,
      success: false,
      error: error.message,
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π
function analyzeMatchingScenarios(users) {
  console.log('\nüîç –ê–Ω–∞–ª–∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –º–∞—Ç—á–∏–Ω–≥–∞:\n');

  const successfulUsers = users.filter(u => u.success);
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ UTC –≤—Ä–µ–º–µ–Ω–∏
  const timeGroups = {};
  successfulUsers.forEach(user => {
    if (!timeGroups[user.utcTime]) {
      timeGroups[user.utcTime] = [];
    }
    timeGroups[user.utcTime].push(user);
  });

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –≤—Ä–µ–º–µ–Ω–∏
  Object.entries(timeGroups).forEach(([utcTime, groupUsers]) => {
    console.log(`‚è∞ UTC ${utcTime}:`);
    
    const candidates = groupUsers.filter(u => u.role === 'candidate');
    const interviewers = groupUsers.filter(u => u.role === 'interviewer');
    
    console.log(`   –ö–∞–Ω–¥–∏–¥–∞—Ç—ã (${candidates.length}):`);
    candidates.forEach(c => {
      console.log(`     ‚Ä¢ ${c.name} (${c.timezoneOffset}) - ${c.profession} [${c.tools.join(', ')}]`);
    });
    
    console.log(`   –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—ã (${interviewers.length}):`);
    interviewers.forEach(i => {
      console.log(`     ‚Ä¢ ${i.name} (${i.timezoneOffset}) - ${i.profession} [${i.tools.join(', ')}]`);
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
    if (candidates.length > 0 && interviewers.length > 0) {
      console.log(`   üéØ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏:`);
      candidates.forEach(candidate => {
        interviewers.forEach(interviewer => {
          const commonTools = candidate.tools.filter(t => interviewer.tools.includes(t));
          const matchScore = commonTools.length;
          
          console.log(`     ‚Ä¢ ${candidate.name} ‚Üî ${interviewer.name}`);
          console.log(`       –û–±—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${commonTools.length > 0 ? commonTools.join(', ') : '–Ω–µ—Ç'}`);
          console.log(`       –û—Ü–µ–Ω–∫–∞ –º–∞—Ç—á–∞: ${matchScore}/3`);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö
          const candidateLocalTime = DateTime.fromISO(candidate.utcSlot).setZone(candidate.timezone).toFormat('HH:mm');
          const interviewerLocalTime = DateTime.fromISO(interviewer.utcSlot).setZone(interviewer.timezone).toFormat('HH:mm');
          
          console.log(`       –í—Ä–µ–º—è: ${candidate.name} ${candidateLocalTime} ‚Üî ${interviewer.name} ${interviewerLocalTime}`);
          
          if (matchScore > 0) {
            console.log(`       ‚úÖ –•–æ—Ä–æ—à–∏–π –º–∞—Ç—á!`);
          } else {
            console.log(`       ‚ö†Ô∏è  –ù–µ—Ç –æ–±—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);
          }
          console.log('');
        });
      });
    } else {
      console.log(`   ‚ö†Ô∏è  –ù–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π (—Ç–æ–ª—å–∫–æ ${candidates.length} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ ${interviewers.length} –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–æ–≤)`);
    }
    
    console.log('');
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function createMatchingTestUsers() {
  console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç—á–∏–Ω–≥–∞\n');
  console.log('üìã –ü–ª–∞–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log('‚Ä¢ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –≤ 5 —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö');
  console.log('‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –º–∞—Ç—á–∏–Ω–≥–∞');
  console.log('‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤');
  console.log('‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π\n');

  const results = [];

  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  for (const user of matchingTestUsers) {
    const result = await createUserWithPreferences(user);
    results.push(result);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 500));
  }

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const successfulUsers = results.filter(r => r.success);
  const failedUsers = results.filter(r => !r.success);

  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è:');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: ${successfulUsers.length}/${matchingTestUsers.length}`);
  console.log(`‚ùå –û—à–∏–±–∫–∏: ${failedUsers.length}/${matchingTestUsers.length}`);

  if (failedUsers.length > 0) {
    console.log('\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ—à–∏–±–∫–∞–º–∏:');
    failedUsers.forEach(user => {
      console.log(`   ‚Ä¢ ${user.name}: ${user.error}`);
    });
  }

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
  analyzeMatchingScenarios(results);

  console.log('\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç –º–∞—Ç—á–∏–Ω–≥–∞: node test-timezone-matching.js');
  console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
  console.log('3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∞—Ç—á–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  console.log('4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π');
}

// –ó–∞–ø—É—Å–∫
createMatchingTestUsers().catch(console.error);
