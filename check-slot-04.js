import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkSlot04() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ—Ç–∞ 04:00 UTC...\n');

    const entries = await prisma.userQueue.findMany({
      where: { slotUtc: '2025-08-22T04:00:00.000Z' },
      include: { user: true }
    });

    console.log(`üìä –ó–∞–ø–∏—Å–∏ –≤ —Å–ª–æ—Ç–µ 04:00 UTC (${entries.length}):`);
    entries.forEach(entry => {
      console.log(`   - ${entry.user.firstName || 'Unknown'} (ID: ${entry.userId})`);
      console.log(`     –†–æ–ª—å: ${entry.role}`);
      console.log(`     –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${entry.profession}`);
      console.log(`     –Ø–∑—ã–∫: ${entry.language}`);
      console.log('');
    });

    const interviewers = entries.filter(e => e.role === 'interviewer');
    const candidates = entries.filter(e => e.role === 'candidate');

    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—ã: ${interviewers.length}`);
    console.log(`   –ö–∞–Ω–¥–∏–¥–∞—Ç—ã: ${candidates.length}`);

    if (interviewers.length > 0) {
      console.log('\n‚úÖ –ï—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—ã –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ!');
      interviewers.forEach(entry => {
        console.log(`   - ${entry.user.firstName || 'Unknown'} (${entry.profession}, ${entry.language})`);
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkSlot04();
