#!/bin/bash

# –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–µ–ø–ª–æ—é
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DEPLOY_DIR="$SCRIPT_DIR/scripts/deploy"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_color() {
    local color=$1
    local text=$2
    echo -e "${color}${text}${NC}"
}

show_menu() {
    clear
    print_color $BLUE "üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–µ–ø–ª–æ–π Super Mock"
    echo ""
    print_color $YELLOW "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    echo ""
    echo "1) üé® –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ (—Å –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏)"
    echo "2) üîß –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –±—ç–∫–µ–Ω–¥ (—Å –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏)"
    echo "3) üåê –û–±–Ω–æ–≤–∏—Ç—å –≤—Å—ë (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ + –±—ç–∫–µ–Ω–¥)"
    echo "4) üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"
    echo "5) üõ†Ô∏è  –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
    echo "6) üìä –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "7) üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "8) üßπ –û—á–∏—Å—Ç–∏—Ç—å Docker (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)"
    echo "9) üìã –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
    echo "0) ‚ùå –í—ã—Ö–æ–¥"
    echo ""
}

check_server_status() {
    print_color $BLUE "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞..."
    
    if ! ssh dokploy-server "echo '–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω'" > /dev/null 2>&1; then
        print_color $RED "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
    
    ssh dokploy-server << 'EOF'
    echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    
    echo ""
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    if curl -f -s https://supermock.ru > /dev/null 2>&1; then
        echo "‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ HTTPS"
    elif curl -f -s http://supermock.ru > /dev/null 2>&1; then
        echo "‚ö†Ô∏è  –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ HTTP"
    else
        echo "‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–µ–Ω–¥–∞
    if curl -f -s https://api.supermock.ru/api/health > /dev/null 2>&1; then
        echo "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ HTTPS"
    elif curl -f -s http://api.supermock.ru/api/health > /dev/null 2>&1; then
        echo "‚ö†Ô∏è  API –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ HTTP"
    else
        echo "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Traefik
    if docker ps | grep -q "traefik"; then
        echo "‚úÖ Traefik –∑–∞–ø—É—â–µ–Ω"
    else
        echo "‚ùå Traefik –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if docker ps | grep -q "supermock-postgres"; then
        echo "‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω"
    else
        echo "‚ùå PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    if docker ps | grep -q "supermock-redis"; then
        echo "‚úÖ Redis –∑–∞–ø—É—â–µ–Ω"
    else
        echo "‚ùå Redis –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
EOF
}

fix_server_issues() {
    print_color $BLUE "üõ†Ô∏è  –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
    
    ssh dokploy-server << 'EOF'
    echo "üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π..."
    
    cd /opt/mockmate
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    if grep -q "postgres_secondary" .env; then
        sed -i 's/DATABASE_URL_SECONDARY=.*/DATABASE_URL_SECONDARY=postgresql:\/\/supermock:krishna1284@postgres:5432\/supermock/' .env
        echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Traefik
    echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ Traefik..."
    if docker logs traefik --tail=20 2>/dev/null | grep -q "traefik-traefik"; then
        echo "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å Traefik, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º..."
        if [ -f "/opt/mockmate/traefik/docker-compose.yml" ]; then
            sed -i 's/traefik.enable=true/traefik.enable=false/' /opt/mockmate/traefik/docker-compose.yml
            cd /opt/mockmate/traefik && docker-compose down && docker-compose up -d
            cd /opt/mockmate
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    if ! docker ps | grep -q "supermock-postgres"; then
        echo "‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º..."
        docker-compose -f docker-compose.prod.yml up -d postgres
        sleep 30
    fi
    
    if ! docker ps | grep -q "supermock-redis"; then
        echo "‚ö†Ô∏è  Redis –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º..."
        docker-compose -f docker-compose.prod.yml up -d redis
        sleep 10
    fi
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    echo "üîß –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π..."
    if [ -f "docker-compose-simple.yml" ]; then
        docker-compose -f docker-compose-simple.yml up -d
        echo "‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"
    else
        echo "‚ùå –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
    
    echo "üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"
EOF
}

show_logs() {
    print_color $BLUE "üìä –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏..."
    
    echo "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    echo "1) –§—Ä–æ–Ω—Ç–µ–Ω–¥"
    echo "2) –ë—ç–∫–µ–Ω–¥"
    echo "3) Traefik"
    echo "4) PostgreSQL"
    echo "5) Redis"
    echo "6) –í—Å–µ –ª–æ–≥–∏"
    
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ (1-6): " log_choice
    
    case $log_choice in
        1)
            ssh dokploy-server "docker logs supermock-frontend --tail=50"
            ;;
        2)
            ssh dokploy-server "docker logs supermock-backend --tail=50"
            ;;
        3)
            ssh dokploy-server "docker logs traefik --tail=50"
            ;;
        4)
            ssh dokploy-server "docker logs supermock-postgres --tail=50"
            ;;
        5)
            ssh dokploy-server "docker logs supermock-redis --tail=50"
            ;;
        6)
            ssh dokploy-server "docker logs supermock-frontend --tail=20 && echo '---' && docker logs supermock-backend --tail=20 && echo '---' && docker logs traefik --tail=20"
            ;;
        *)
            echo "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            ;;
    esac
}

restart_services() {
    print_color $BLUE "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    ssh dokploy-server << 'EOF'
    cd /opt/mockmate
    
    echo "‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose -f docker-compose.prod.yml down 2>/dev/null || true
    docker-compose -f docker-compose-simple.yml down 2>/dev/null || true
    
    echo "‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π..."
    if [ -f "docker-compose-simple.yml" ]; then
        docker-compose -f docker-compose-simple.yml up -d
        echo "‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
    else
        echo "‚ùå –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
EOF
}

clean_docker() {
    print_color $RED "üßπ –û—á–∏—Å—Ç–∫–∞ Docker (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)..."
    
    echo "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –æ–±—Ä–∞–∑—ã –∏ —Å–µ—Ç–∏."
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " confirm
    
    if [[ $confirm =~ ^[Yy]$ ]]; then
        ssh dokploy-server << 'EOF'
        echo "üßπ –û—á–∏—Å—Ç–∫–∞ Docker..."
        docker system prune -f
        docker volume prune -f
        docker network prune -f
        echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
EOF
    else
        echo "–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
    fi
}

show_config() {
    print_color $BLUE "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
    
    ssh dokploy-server << 'EOF'
    echo "üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞:"
    echo ""
    echo "üìç –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"
    echo "üìÅ –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
    ls -la *.yml *.env 2>/dev/null || echo "–§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    echo ""
    echo "üåê –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:"
    ip addr show | grep -E "inet.*eth0|inet.*ens"
    
    echo ""
    echo "üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:"
    df -h /
    
    echo ""
    echo "üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:"
    free -h
EOF
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
cd "$DEPLOY_DIR"

case "$1" in
    "menu"|"")
        while true; do
            show_menu
            read -p "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (0-9): " choice
            
            case $choice in
                1)
                    print_color $GREEN "üé® –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
                    ./deploy-frontend-improved.sh
                    ;;
                2)
                    print_color $GREEN "üîß –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—ç–∫–µ–Ω–¥–∞..."
                    ./deploy-backend-improved.sh
                    ;;
                3)
                    print_color $GREEN "üåê –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."
                    ./deploy-frontend-improved.sh
                    echo ""
                    ./deploy-backend-improved.sh
                    ;;
                4)
                    check_server_status
                    ;;
                5)
                    fix_server_issues
                    ;;
                6)
                    show_logs
                    ;;
                7)
                    restart_services
                    ;;
                8)
                    clean_docker
                    ;;
                9)
                    show_config
                    ;;
                0)
                    print_color $GREEN "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
                    exit 0
                    ;;
                *)
                    print_color $RED "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
                    ;;
            esac
            
            echo ""
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
        done
        ;;
    "frontend")
        print_color $GREEN "üé® –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
        ./deploy-frontend-improved.sh
        ;;
    "backend")
        print_color $GREEN "üîß –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—ç–∫–µ–Ω–¥–∞..."
        ./deploy-backend-improved.sh
        ;;
    "all")
        print_color $GREEN "üåê –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."
        ./deploy-frontend-improved.sh
        echo ""
        ./deploy-backend-improved.sh
        ;;
    "status")
        check_server_status
        ;;
    "fix")
        fix_server_issues
        ;;
    "logs")
        show_logs
        ;;
    "restart")
        restart_services
        ;;
    "clean")
        clean_docker
        ;;
    "config")
        show_config
        ;;
    *)
        print_color $RED "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $1"
        echo ""
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [frontend|backend|all|menu|status|fix|logs|restart|clean|config]"
        echo ""
        echo "–û–ø—Ü–∏–∏:"
        echo "  frontend  - –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥"
        echo "  backend   - –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –±—ç–∫–µ–Ω–¥"
        echo "  all       - –û–±–Ω–æ–≤–∏—Ç—å –≤—Å—ë"
        echo "  menu      - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"
        echo "  status    - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"
        echo "  fix       - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
        echo "  logs      - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
        echo "  restart   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
        echo "  clean     - –û—á–∏—Å—Ç–∏—Ç—å Docker"
        echo "  config    - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        exit 1
        ;;
esac
