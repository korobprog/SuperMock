#!/usr/bin/env bash

# üöÄ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è SuperMock
# –ê–≤—Ç–æ—Ä: SuperMock Team
# –í–µ—Ä—Å–∏—è: 1.0

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BLUE}‚ïë                    üöÄ SuperMock Deployer                    ‚ïë${NC}"
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo
}

print_step() {
    echo -e "${CYAN}üìã $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${PURPLE}‚ÑπÔ∏è  $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
check_server_connection() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É..."
    if ! ssh dokploy-server "echo '–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω'" > /dev/null 2>&1; then
        print_error "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ."
        exit 1
    fi
    print_success "–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
check_required_files() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    
    REQUIRED_FILES=(
        "docker-compose.prod.yml"
        "frontend/Dockerfile"
        "backend/Dockerfile"
        ".env"
    )
    
    for file in "${REQUIRED_FILES[@]}"; do
        if [ ! -f "$file" ]; then
            print_error "–ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: $file"
            exit 1
        fi
    done
    
    print_success "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã"
}

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞
show_menu() {
    echo
    echo -e "${YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:${NC}"
    echo -e "${CYAN}1)${NC} üöÄ –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π (Frontend + Backend)"
    echo -e "${CYAN}2)${NC} üé® –î–µ–ø–ª–æ–π —Ç–æ–ª—å–∫–æ Frontend"
    echo -e "${CYAN}3)${NC} ‚öôÔ∏è  –î–µ–ø–ª–æ–π —Ç–æ–ª—å–∫–æ Backend"
    echo -e "${CYAN}4)${NC} üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo -e "${CYAN}5)${NC} üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo -e "${CYAN}6)${NC} üìù –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo -e "${CYAN}7)${NC} üßπ –û—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞"
    echo -e "${CYAN}8)${NC} üö™ –í—ã—Ö–æ–¥"
    echo
}

# –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π
full_deploy() {
    print_header
    print_step "–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π SuperMock..."
    
    check_server_connection
    check_required_files
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
    tar -czf supermock-deploy.tar.gz \
        --exclude='node_modules' \
        --exclude='.git' \
        --exclude='dist' \
        --exclude='*.log' \
        --exclude='.env.local' \
        .
    
    print_success "–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: supermock-deploy.tar.gz"
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    print_step "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
    scp supermock-deploy.tar.gz dokploy-server:/opt/mockmate/
    scp docker-compose.prod.yml dokploy-server:/opt/mockmate/
    scp .env dokploy-server:/opt/mockmate/
    
    print_success "–§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä"
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–ª–æ—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    print_step "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–ª–æ—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
    ssh dokploy-server << 'EOF'
        cd /opt/mockmate
        
        echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤..."
        rm -rf frontend backend
        
        echo "üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞..."
        tar -xzf supermock-deploy.tar.gz
        rm supermock-deploy.tar.gz
        
        echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
        docker compose -f docker-compose.prod.yml down
        
        echo "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
        docker rmi supermock-frontend supermock-backend 2>/dev/null || true
        
        echo "üî® –°–±–æ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
        docker compose -f docker-compose.prod.yml build
        
        echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker compose -f docker-compose.prod.yml up -d
        
        echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞..."
        sleep 15
        
        echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞..."
        if docker ps | grep -q supermock-frontend && docker ps | grep -q supermock-backend; then
            echo "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
        else
            echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"
            docker compose -f docker-compose.prod.yml logs --tail 20
            exit 1
        fi
EOF
    
    # –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
    rm -f supermock-deploy.tar.gz
    
    print_success "–ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!"
}

# –î–µ–ø–ª–æ–π —Ç–æ–ª—å–∫–æ Frontend
deploy_frontend() {
    print_header
    print_step "–î–µ–ø–ª–æ–π —Ç–æ–ª—å–∫–æ Frontend..."
    
    check_server_connection
    check_required_files
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
    tar -czf frontend-deploy.tar.gz \
        --exclude='node_modules' \
        --exclude='.git' \
        --exclude='dist' \
        frontend/
    
    print_success "–ê—Ä—Ö–∏–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω"
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    print_step "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
    scp frontend-deploy.tar.gz dokploy-server:/opt/mockmate/
    scp docker-compose.prod.yml dokploy-server:/opt/mockmate/
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–ª–æ—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    ssh dokploy-server << 'EOF'
        cd /opt/mockmate
        
        echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
        rm -rf frontend
        
        echo "üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
        tar -xzf frontend-deploy.tar.gz
        rm frontend-deploy.tar.gz
        
        echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
        docker compose -f docker-compose.prod.yml stop frontend
        
        echo "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –æ–±—Ä–∞–∑–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
        docker rmi supermock-frontend 2>/dev/null || true
        
        echo "üî® –°–±–æ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
        docker compose -f docker-compose.prod.yml build frontend
        
        echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
        docker compose -f docker-compose.prod.yml up -d frontend
        
        echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞..."
        sleep 10
        
        if docker ps | grep -q supermock-frontend; then
            echo "‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
        else
            echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"
            exit 1
        fi
EOF
    
    rm -f frontend-deploy.tar.gz
    print_success "–î–µ–ø–ª–æ–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!"
}

# –î–µ–ø–ª–æ–π —Ç–æ–ª—å–∫–æ Backend
deploy_backend() {
    print_header
    print_step "–î–µ–ø–ª–æ–π —Ç–æ–ª—å–∫–æ Backend..."
    
    check_server_connection
    check_required_files
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –±—ç–∫–µ–Ω–¥–∞
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –±—ç–∫–µ–Ω–¥–∞..."
    tar -czf backend-deploy.tar.gz \
        --exclude='node_modules' \
        --exclude='.git' \
        backend/
    
    print_success "–ê—Ä—Ö–∏–≤ –±—ç–∫–µ–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω"
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    print_step "–ó–∞–≥—Ä—É–∑–∫–∞ –±—ç–∫–µ–Ω–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
    scp backend-deploy.tar.gz dokploy-server:/opt/mockmate/
    scp docker-compose.prod.yml dokploy-server:/opt/mockmate/
    scp .env dokploy-server:/opt/mockmate/
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–ª–æ—è –±—ç–∫–µ–Ω–¥–∞
    ssh dokploy-server << 'EOF'
        cd /opt/mockmate
        
        echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –±—ç–∫–µ–Ω–¥–∞..."
        rm -rf backend
        
        echo "üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –±—ç–∫–µ–Ω–¥–∞..."
        tar -xzf backend-deploy.tar.gz
        rm backend-deploy.tar.gz
        
        echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—ç–∫–µ–Ω–¥–∞..."
        docker compose -f docker-compose.prod.yml stop backend
        
        echo "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –æ–±—Ä–∞–∑–∞ –±—ç–∫–µ–Ω–¥–∞..."
        docker rmi supermock-backend 2>/dev/null || true
        
        echo "üî® –°–±–æ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ –±—ç–∫–µ–Ω–¥–∞..."
        docker compose -f docker-compose.prod.yml build backend
        
        echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞..."
        docker compose -f docker-compose.prod.yml up -d backend
        
        echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞..."
        sleep 15
        
        if docker ps | grep -q supermock-backend; then
            echo "‚úÖ –ë—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
        else
            echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—ç–∫–µ–Ω–¥–∞"
            exit 1
        fi
EOF
    
    rm -f backend-deploy.tar.gz
    print_success "–î–µ–ø–ª–æ–π –±—ç–∫–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!"
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
restart_services() {
    print_header
    print_step "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    check_server_connection
    
    ssh dokploy-server << 'EOF'
        cd /opt/mockmate
        
        echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker compose -f docker-compose.prod.yml restart
        
        echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞..."
        sleep 10
        
        echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞..."
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
EOF
    
    print_success "–°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã!"
}

# –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
show_status() {
    print_header
    print_step "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
    
    check_server_connection
    
    ssh dokploy-server << 'EOF'
        echo "üê≥ –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        
        echo
        echo "üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
        docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"
        
        echo
        echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:"
        echo "Frontend (HTTP):"
        curl -s -o /dev/null -w "Status: %{http_code}, Time: %{time_total}s\n" http://localhost:80 || echo "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        echo "Backend API:"
        curl -s -o /dev/null -w "Status: %{http_code}, Time: %{time_total}s\n" http://localhost:3000/api/health || echo "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        echo "TURN Server:"
        ss -tuln | grep -E '3478|5349' | head -3 || echo "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
EOF
}

# –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
show_logs() {
    print_header
    print_step "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    check_server_connection
    
    echo -e "${YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤:${NC}"
    echo "1) Frontend"
    echo "2) Backend"
    echo "3) Database"
    echo "4) Traefik"
    echo "5) TURN Server"
    echo "6) –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "7) –ù–∞–∑–∞–¥"
    
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-7): " log_choice
    
    case $log_choice in
        1)
            ssh dokploy-server "docker logs supermock-frontend --tail 50"
            ;;
        2)
            ssh dokploy-server "docker logs supermock-backend --tail 50"
            ;;
        3)
            ssh dokploy-server "docker logs supermock-postgres --tail 30"
            ;;
        4)
            ssh dokploy-server "docker logs traefik --tail 30"
            ;;
        5)
            ssh dokploy-server "docker logs supermock-turn --tail 50"
            ;;
        6)
            ssh dokploy-server "docker compose -f /opt/mockmate/docker-compose.prod.yml logs --tail 30"
            ;;
        7)
            return
            ;;
        *)
            print_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            return
            ;;
    esac
}

# –û—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞
clean_and_rebuild() {
    print_header
    print_step "–û—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞..."
    
    check_server_connection
    
    echo -e "${YELLOW}‚ö†Ô∏è  –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏ —É–¥–∞–ª–∏—Ç –≤—Å–µ –æ–±—Ä–∞–∑—ã!${NC}"
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " confirm
    
    if [[ $confirm != [yY] ]]; then
        print_info "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
        return
    fi
    
    ssh dokploy-server << 'EOF'
        cd /opt/mockmate
        
        echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker compose -f docker-compose.prod.yml down
        
        echo "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤..."
        docker rmi supermock-frontend supermock-backend 2>/dev/null || true
        
        echo "üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤..."
        docker system prune -f
        
        echo "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤..."
        docker compose -f docker-compose.prod.yml build --no-cache
        
        echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker compose -f docker-compose.prod.yml up -d
        
        echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞..."
        sleep 20
        
        echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞..."
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
EOF
    
    print_success "–û—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu() {
    while true; do
        show_menu
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-8): " choice
        
        case $choice in
            1)
                full_deploy
                ;;
            2)
                deploy_frontend
                ;;
            3)
                deploy_backend
                ;;
            4)
                restart_services
                ;;
            5)
                show_status
                ;;
            6)
                show_logs
                ;;
            7)
                clean_and_rebuild
                ;;
            8)
                print_info "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã"
                exit 0
                ;;
            *)
                print_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                ;;
        esac
        
        echo
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
    done
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main() {
    print_header
    print_info "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–ø–ª–æ–π–µ—Ä SuperMock!"
    print_info "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
    echo
    
    main_menu
}

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
