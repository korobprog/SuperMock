#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 * –ó–∞–ø—É—Å–∫: node create-timezone-test-users.js
 */

import { DateTime } from 'luxon';

const API_BASE = 'http://localhost:3000';

// –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
const testUsers = [
  // –ú–æ—Å–∫–≤–∞ (UTC+3) - Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏
  {
    id: 2001,
    name: '–ê–Ω–Ω–∞ (–ú–æ—Å–∫–≤–∞)',
    profession: 'frontend',
    language: 'ru',
    tools: ['react', 'typescript', 'vue'],
    role: 'interviewer',
    timezone: 'Europe/Moscow',
    timezoneOffset: 'UTC+3',
    preferredTime: '10:00', // –£—Ç—Ä–µ–Ω–Ω–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ
  },
  {
    id: 2002,
    name: '–ú–∏—Ö–∞–∏–ª (–ú–æ—Å–∫–≤–∞)',
    profession: 'frontend',
    language: 'ru',
    tools: ['react', 'javascript', 'css'],
    role: 'candidate',
    timezone: 'Europe/Moscow',
    timezoneOffset: 'UTC+3',
    preferredTime: '14:00', // –î–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ
  },
  
  // –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ (UTC+10) - Backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏
  {
    id: 2003,
    name: '–ï–ª–µ–Ω–∞ (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)',
    profession: 'backend',
    language: 'ru',
    tools: ['nodejs', 'python', 'postgresql'],
    role: 'interviewer',
    timezone: 'Asia/Vladivostok',
    timezoneOffset: 'UTC+10',
    preferredTime: '17:00', // –í–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ
  },
  {
    id: 2004,
    name: '–î–º–∏—Ç—Ä–∏–π (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)',
    profession: 'backend',
    language: 'ru',
    tools: ['java', 'spring', 'mysql'],
    role: 'candidate',
    timezone: 'Asia/Vladivostok',
    timezoneOffset: 'UTC+10',
    preferredTime: '09:00', // –£—Ç—Ä–µ–Ω–Ω–µ–µ –≤—Ä–µ–º—è –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ
  },
  
  // –ù—å—é-–ô–æ—Ä–∫ (UTC-5) - Full Stack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏
  {
    id: 2005,
    name: 'John (New York)',
    profession: 'fullstack',
    language: 'en',
    tools: ['react', 'nodejs', 'typescript'],
    role: 'interviewer',
    timezone: 'America/New_York',
    timezoneOffset: 'UTC-5',
    preferredTime: '15:00', // –î–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ù—å—é-–ô–æ—Ä–∫–µ
  },
  {
    id: 2006,
    name: 'Sarah (New York)',
    profession: 'fullstack',
    language: 'en',
    tools: ['vue', 'python', 'mongodb'],
    role: 'candidate',
    timezone: 'America/New_York',
    timezoneOffset: 'UTC-5',
    preferredTime: '10:00', // –£—Ç—Ä–µ–Ω–Ω–µ–µ –≤—Ä–µ–º—è –≤ –ù—å—é-–ô–æ—Ä–∫–µ
  },
  
  // –õ–æ–Ω–¥–æ–Ω (UTC+0) - DevOps —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏
  {
    id: 2007,
    name: 'Emma (London)',
    profession: 'devops',
    language: 'en',
    tools: ['docker', 'kubernetes', 'aws'],
    role: 'interviewer',
    timezone: 'Europe/London',
    timezoneOffset: 'UTC+0',
    preferredTime: '13:00', // –î–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è –≤ –õ–æ–Ω–¥–æ–Ω–µ
  },
  {
    id: 2008,
    name: 'James (London)',
    profession: 'devops',
    language: 'en',
    tools: ['jenkins', 'terraform', 'gcp'],
    role: 'candidate',
    timezone: 'Europe/London',
    timezoneOffset: 'UTC+0',
    preferredTime: '16:00', // –í–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è –≤ –õ–æ–Ω–¥–æ–Ω–µ
  },
  
  // –¢–æ–∫–∏–æ (UTC+9) - Mobile —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏
  {
    id: 2009,
    name: 'Yuki (Tokyo)',
    profession: 'mobile',
    language: 'en',
    tools: ['react-native', 'swift', 'kotlin'],
    role: 'interviewer',
    timezone: 'Asia/Tokyo',
    timezoneOffset: 'UTC+9',
    preferredTime: '20:00', // –í–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è –≤ –¢–æ–∫–∏–æ
  },
  {
    id: 2010,
    name: 'Hiroshi (Tokyo)',
    profession: 'mobile',
    language: 'en',
    tools: ['flutter', 'dart', 'firebase'],
    role: 'candidate',
    timezone: 'Asia/Tokyo',
    timezoneOffset: 'UTC+9',
    preferredTime: '11:00', // –£—Ç—Ä–µ–Ω–Ω–µ–µ –≤—Ä–µ–º—è –≤ –¢–æ–∫–∏–æ
  },
];

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ UTC
function convertLocalToUTC(localTime, timezone) {
  const [hours, minutes] = localTime.split(':').map(Number);
  const localDate = DateTime.now().setZone(timezone);
  const slotDate = localDate.set({ hour: hours, minute: minutes, second: 0, millisecond: 0 });
  const utcDate = slotDate.toUTC();
  return utcDate.toISO();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏
async function createUserWithPreferences(user) {
  try {
    console.log(`\nüë§ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.name} (${user.timezoneOffset})`);
    console.log(`   –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${user.profession}, –†–æ–ª—å: ${user.role}, –Ø–∑—ã–∫: ${user.language}`);
    console.log(`   –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${user.tools.join(', ')}`);
    console.log(`   –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${user.preferredTime} (${user.timezone})`);

    // 1. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ UTC
    const utcSlot = convertLocalToUTC(user.preferredTime, user.timezone);
    const utcTime = DateTime.fromISO(utcSlot).toFormat('HH:mm');
    
    console.log(`   UTC –≤—Ä–µ–º—è: ${utcTime} (${utcSlot})`);

    // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    const toolsResponse = await fetch(`${API_BASE}/api/user-tools`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userId: user.id,
        profession: user.profession,
        tools: user.tools,
      }),
    });

    if (toolsResponse.ok) {
      console.log(`   ‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`);
    } else {
      const error = await toolsResponse.text();
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${toolsResponse.status} - ${error}`);
    }

    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å UTC —Å–ª–æ—Ç–æ–º
    const preferencesResponse = await fetch(`${API_BASE}/api/preferences`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userId: user.id,
        role: user.role,
        profession: user.profession,
        language: user.language,
        slotsUtc: [utcSlot],
      }),
    });

    if (preferencesResponse.ok) {
      console.log(`   ‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`);
    } else {
      const error = await preferencesResponse.text();
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: ${preferencesResponse.status} - ${error}`);
    }

    // 4. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —Å–ª–æ—Ç—É
    const joinResponse = await fetch(`${API_BASE}/api/slots/join`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userId: user.id,
        role: user.role,
        profession: user.profession,
        language: user.language,
        slotUtc: utcSlot,
        tools: user.tools,
      }),
    });

    if (joinResponse.ok) {
      const joinResult = await joinResponse.json();
      console.log(`   ‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–ª–æ—Ç—É (–ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: ${joinResult.position || 'N/A'})`);
    } else {
      const error = await joinResponse.text();
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${joinResponse.status} - ${error}`);
    }

    return {
      ...user,
      utcSlot,
      utcTime,
      success: true,
    };

  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${user.name}: ${error.message}`);
    return {
      ...user,
      success: false,
      error: error.message,
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π
function analyzePotentialMatches(users) {
  console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π:\n');

  const successfulUsers = users.filter(u => u.success);
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ UTC –≤—Ä–µ–º–µ–Ω–∏
  const timeGroups = {};
  successfulUsers.forEach(user => {
    if (!timeGroups[user.utcTime]) {
      timeGroups[user.utcTime] = [];
    }
    timeGroups[user.utcTime].push(user);
  });

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –≤—Ä–µ–º–µ–Ω–∏
  Object.entries(timeGroups).forEach(([utcTime, groupUsers]) => {
    console.log(`‚è∞ UTC ${utcTime}:`);
    
    const candidates = groupUsers.filter(u => u.role === 'candidate');
    const interviewers = groupUsers.filter(u => u.role === 'interviewer');
    
    console.log(`   –ö–∞–Ω–¥–∏–¥–∞—Ç—ã (${candidates.length}):`);
    candidates.forEach(c => {
      console.log(`     ‚Ä¢ ${c.name} (${c.timezoneOffset}) - ${c.profession} [${c.tools.join(', ')}]`);
    });
    
    console.log(`   –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—ã (${interviewers.length}):`);
    interviewers.forEach(i => {
      console.log(`     ‚Ä¢ ${i.name} (${i.timezoneOffset}) - ${i.profession} [${i.tools.join(', ')}]`);
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
    if (candidates.length > 0 && interviewers.length > 0) {
      console.log(`   üéØ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏:`);
      candidates.forEach(candidate => {
        interviewers.forEach(interviewer => {
          const commonTools = candidate.tools.filter(t => interviewer.tools.includes(t));
          const matchScore = commonTools.length;
          
          console.log(`     ‚Ä¢ ${candidate.name} ‚Üî ${interviewer.name}`);
          console.log(`       –û–±—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${commonTools.length > 0 ? commonTools.join(', ') : '–Ω–µ—Ç'}`);
          console.log(`       –û—Ü–µ–Ω–∫–∞ –º–∞—Ç—á–∞: ${matchScore}/3`);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö
          const candidateLocalTime = DateTime.fromISO(candidate.utcSlot).setZone(candidate.timezone).toFormat('HH:mm');
          const interviewerLocalTime = DateTime.fromISO(interviewer.utcSlot).setZone(interviewer.timezone).toFormat('HH:mm');
          
          console.log(`       –í—Ä–µ–º—è: ${candidate.name} ${candidateLocalTime} ‚Üî ${interviewer.name} ${interviewerLocalTime}`);
          console.log('');
        });
      });
    } else {
      console.log(`   ‚ö†Ô∏è  –ù–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π (—Ç–æ–ª—å–∫–æ ${candidates.length} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ ${interviewers.length} –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–æ–≤)`);
    }
    
    console.log('');
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö
function demonstrateTimezoneConversion(users) {
  console.log('\nüåç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö:\n');

  const successfulUsers = users.filter(u => u.success);
  if (successfulUsers.length === 0) {
    console.log('‚ùå –ù–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏');
    return;
  }

  // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
  const exampleUser = successfulUsers[0];
  const utcTime = exampleUser.utcTime;
  
  console.log(`üìÖ –ü—Ä–∏–º–µ—Ä: ${exampleUser.name} –≤—ã–±—Ä–∞–ª ${exampleUser.preferredTime} (${exampleUser.timezone})`);
  console.log(`üïê –≠—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ${utcTime} UTC\n`);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–æ –≤—Ä–µ–º—è –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö
  const timezones = [
    { name: '–ú–æ—Å–∫–≤–∞', zone: 'Europe/Moscow', offset: 'UTC+3' },
    { name: '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', zone: 'Asia/Vladivostok', offset: 'UTC+10' },
    { name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', zone: 'Asia/Yekaterinburg', offset: 'UTC+5' },
    { name: '–õ–æ–Ω–¥–æ–Ω', zone: 'Europe/London', offset: 'UTC+0' },
    { name: '–ù—å—é-–ô–æ—Ä–∫', zone: 'America/New_York', offset: 'UTC-5' },
    { name: '–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å', zone: 'America/Los_Angeles', offset: 'UTC-8' },
    { name: '–¢–æ–∫–∏–æ', zone: 'Asia/Tokyo', offset: 'UTC+9' },
    { name: '–î—É–±–∞–π', zone: 'Asia/Dubai', offset: 'UTC+4' },
  ];

  const [hours, minutes] = utcTime.split(':').map(Number);
  const utcDate = DateTime.utc().set({ hour: hours, minute: minutes, second: 0, millisecond: 0 });

  timezones.forEach(tz => {
    const localTime = utcDate.setZone(tz.zone);
    console.log(`${tz.name} (${tz.offset}): ${localTime.toFormat('HH:mm')}`);
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function createTimezoneTestUsers() {
  console.log('üåç –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏\n');
  console.log('üìã –ü–ª–∞–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log('‚Ä¢ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ 5 —Ä–∞–∑–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤');
  console.log('‚Ä¢ –†–∞–∑–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —è–∑—ã–∫–∏');
  console.log('‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏');
  console.log('‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π\n');

  const results = [];

  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  for (const user of testUsers) {
    const result = await createUserWithPreferences(user);
    results.push(result);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 500));
  }

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const successfulUsers = results.filter(r => r.success);
  const failedUsers = results.filter(r => !r.success);

  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è:');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: ${successfulUsers.length}/${testUsers.length}`);
  console.log(`‚ùå –û—à–∏–±–∫–∏: ${failedUsers.length}/${testUsers.length}`);

  if (failedUsers.length > 0) {
    console.log('\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ—à–∏–±–∫–∞–º–∏:');
    failedUsers.forEach(user => {
      console.log(`   ‚Ä¢ ${user.name}: ${user.error}`);
    });
  }

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
  analyzePotentialMatches(results);

  // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏
  demonstrateTimezoneConversion(results);

  console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
  console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏');
  console.log('3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–ª–æ—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  console.log('4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –º–∞—Ç—á–∏–Ω–≥ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');
  console.log('5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö');
}

// –ó–∞–ø—É—Å–∫
createTimezoneTestUsers().catch(console.error);
