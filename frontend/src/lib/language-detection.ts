import { getTelegramWebApp } from './utils';

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export const SUPPORTED_LANGUAGES = [
  'ru',
  'en',
  'es',
  'de',
  'fr',
  'zh',
] as const;
export type SupportedLanguage = (typeof SUPPORTED_LANGUAGES)[number];

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:
 * 1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤ localStorage
 * 2. –Ø–∑—ã–∫ –∏–∑ Telegram WebApp
 * 3. –Ø–∑—ã–∫ –±—Ä–∞—É–∑–µ—Ä–∞ (navigator.language)
 * 4. IP-–∞–¥—Ä–µ—Å (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω API)
 * 5. Fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π
 */
export async function detectUserLanguage(): Promise<SupportedLanguage> {
  console.log('üîç Starting language detection...');

  // –í dev —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä—ã–π fallback
  if (import.meta.env.DEV) {
    console.log('üîß Dev mode detected, using instant fallback');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫
    const savedLanguage = localStorage.getItem('Super Mock-language');
    if (
      savedLanguage &&
      SUPPORTED_LANGUAGES.includes(savedLanguage as SupportedLanguage)
    ) {
      console.log('üî§ Language detected from localStorage in dev mode:', savedLanguage);
      return savedLanguage as SupportedLanguage;
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–∞—É–∑–µ—Ä
    const browserLang = getBrowserLanguage();
    if (browserLang) {
      console.log('üî§ Language detected from browser in dev mode:', browserLang);
      return browserLang;
    }
    
    // 3. –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    console.log('üî§ Using instant fallback language in dev mode: ru');
    return 'ru';
  }

  // Production —Ä–µ–∂–∏–º - –ø–æ–ª–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫
  const savedLanguage = localStorage.getItem('Super Mock-language');
  if (
    savedLanguage &&
    SUPPORTED_LANGUAGES.includes(savedLanguage as SupportedLanguage)
  ) {
    console.log('üî§ Language detected from localStorage:', savedLanguage);
    return savedLanguage as SupportedLanguage;
  }
  console.log('üì≠ No valid language found in localStorage');

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp
  const telegramLang = getTelegramLanguage();
  if (telegramLang) {
    console.log('üî§ Language detected from Telegram:', telegramLang);
    return telegramLang;
  }
  console.log('üì± No valid language found in Telegram WebApp');

  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–∞—É–∑–µ—Ä
  const browserLang = getBrowserLanguage();
  if (browserLang) {
    console.log('üî§ Language detected from browser:', browserLang);
    return browserLang;
  }
  console.log('üåê No valid language found in browser settings');

  // 4. –ü—Ä–æ–±—É–µ–º IP-–≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –≤ production)
  try {
    const ipLang = await getLanguageByIP();
    if (ipLang) {
      console.log('üî§ Language detected from IP:', ipLang);
      return ipLang;
    }
  } catch (error) {
    console.warn('Failed to detect language by IP:', error);
  }
  console.log('üåç No valid language found via IP detection');

  // 5. Fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π
  console.log('üî§ Using fallback language: ru');
  return 'ru';
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –∏–∑ Telegram WebApp
 */
function getTelegramLanguage(): SupportedLanguage | null {
  try {
    const tg = getTelegramWebApp();
    const telegramLang = tg?.initDataUnsafe?.user?.language_code;

    if (!telegramLang) return null;

    // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥—ã —è–∑—ã–∫–æ–≤ Telegram —Å –Ω–∞—à–∏–º–∏
    const langMapping: { [key: string]: SupportedLanguage } = {
      ru: 'ru',
      en: 'en',
      es: 'es',
      de: 'de',
      fr: 'fr',
      zh: 'zh',
      'zh-cn': 'zh',
      'zh-tw': 'zh',
      'zh-hans': 'zh',
      'zh-hant': 'zh',
    };

    return langMapping[telegramLang.toLowerCase()] || null;
  } catch (error) {
    console.warn('Failed to get Telegram language:', error);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—Ä–∞—É–∑–µ—Ä–∞
 */
function getBrowserLanguage(): SupportedLanguage | null {
  try {
    const browserLang = navigator.language || (navigator as any).languages?.[0];
    if (!browserLang) return null;

    console.log('üåê Browser language detected:', browserLang);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ —è–∑—ã–∫–∞ (–¥–æ –¥–µ—Ñ–∏—Å–∞)
    const langCode = browserLang.split('-')[0].toLowerCase();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —è–∑—ã–∫
    if (SUPPORTED_LANGUAGES.includes(langCode as SupportedLanguage)) {
      return langCode as SupportedLanguage;
    }

    return null;
  } catch (error) {
    console.warn('Failed to get browser language:', error);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ IP-–∞–¥—Ä–µ—Å–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ API ipapi.co
 */
async function getLanguageByIP(): Promise<SupportedLanguage | null> {
  try {
    console.log('üåç Attempting to detect language by IP...');

    // –°–æ–∑–¥–∞–µ–º AbortController –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ API –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã –ø–æ IP
      const response = await fetch('https://ipapi.co/json/', {
        method: 'GET',
        headers: {
          Accept: 'application/json',
        },
        signal: controller.signal,
      });

      clearTimeout(timeoutId); // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const data = await response.json();
      const countryCode = data.country_code?.toLowerCase();

      console.log('üåç IP-based country detected:', countryCode);

      if (!countryCode) return null;

    // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥—ã —Å—Ç—Ä–∞–Ω —Å —è–∑—ã–∫–∞–º–∏
    const countryToLanguage: { [key: string]: SupportedLanguage } = {
      // –†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
      ru: 'ru',
      by: 'ru',
      kz: 'ru',
      kg: 'ru',
      tj: 'ru',
      uz: 'ru',
      am: 'ru',
      az: 'ru',
      ge: 'ru',
      md: 'ru',

      // –ê–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
      us: 'en',
      gb: 'en',
      ca: 'en',
      au: 'en',
      nz: 'en',
      ie: 'en',
      za: 'en',
      in: 'en',
      sg: 'en',
      my: 'en',
      ph: 'en',

      // –ò—Å–ø–∞–Ω–æ—è–∑—ã—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
      es: 'es',
      mx: 'es',
      ar: 'es',
      co: 'es',
      pe: 'es',
      ve: 'es',
      cl: 'es',
      ec: 'es',
      gt: 'es',
      cu: 'es',
      bo: 'es',
      do: 'es',
      hn: 'es',
      py: 'es',
      sv: 'es',
      ni: 'es',
      cr: 'es',
      pa: 'es',
      uy: 'es',
      gq: 'es',

      // –ù–µ–º–µ—Ü–∫–æ—è–∑—ã—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
      de: 'de',
      at: 'de',
      li: 'de',

      // –§—Ä–∞–Ω–∫–æ—è–∑—ã—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
      fr: 'fr',
      be: 'fr',
      mc: 'fr',

      // –ö–∏—Ç–∞–π—Å–∫–æ—è–∑—ã—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã/—Ä–µ–≥–∏–æ–Ω—ã
      cn: 'zh',
      tw: 'zh',
      hk: 'zh',
      mo: 'zh',
    };

          return countryToLanguage[countryCode] || null;
    } catch (fetchError) {
      clearTimeout(timeoutId); // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      
      if (fetchError instanceof Error && fetchError.name === 'AbortError') {
        console.warn('IP language detection timed out after 5 seconds');
      } else {
        console.warn('Failed to get language by IP:', fetchError);
      }
      return null;
    }
  } catch (error) {
    console.warn('Failed to get language by IP:', error);
    return null;
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –µ–≥–æ
 */
export function saveAndApplyLanguage(
  language: SupportedLanguage,
  i18n: any,
  setLanguage: (lang: string) => void
) {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
  localStorage.setItem('Super Mock-language', language);

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤ i18n
  i18n.changeLanguage(language);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ store
  setLanguage(language);

  console.log('üî§ Language saved and applied:', language);
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
 */
export async function testLanguageDetection() {
  console.log('üß™ Testing language detection...');

  // –û—á–∏—â–∞–µ–º localStorage –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
  localStorage.removeItem('Super Mock-language');

  const detected = await detectUserLanguage();
  console.log('üß™ Test result:', detected);

  return detected;
}
