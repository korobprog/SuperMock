import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';
import { apiGetUserSettings, apiSaveUserSettings, apiCheckUserData } from './api';
import { TelegramUser } from './telegram-auth';

type Role = 'interviewer' | 'candidate' | null;

export interface UserSettings {
  id: number;
  userId: string;
  openrouterApiKey?: string;
  preferredModel: string;
  questionsLevel: string;
  useAiGeneration: boolean;
  questionsCount: number;
  stackblitzApiKey?: string;
  createdAt: string;
  updatedAt: string;
}

export interface MediaSettings {
  videoDeviceId: string;
  audioDeviceId: string;
  audioOutputDeviceId: string;
  videoEnabled: boolean;
  audioEnabled: boolean;
  volume: number;
}

export type AppState = {
  userId: number | null;
  telegramUser: TelegramUser | null;
  role: Role;
  lastRole: Role; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–æ–ª—å
  profession: string | null;
  language: string;
  slotsLocal: string[];
  sessionId: string | null;
  jitsiRoom: string | null;
  userSettings: UserSettings;
  mediaSettings: MediaSettings | null; // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  selectedTools: string[]; // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
  demoMode: boolean; // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∂–∏–º –¥–µ–º–æ
  setUserId: (id: number) => void;
  setTelegramUser: (user: TelegramUser | null) => void;
  loadUserSettings: (userId: number) => Promise<void>;
  loadUserData: (userId: number) => Promise<void>;
  setRole: (role: Role) => void;
  setProfession: (p: string) => void;
  setLanguage: (lng: string) => void;
  setSlotsLocal: (slots: string[]) => void;
  setSession: (s: { sessionId: string; jitsiRoom: string } | null) => void;
  setUserSettings: (settings: Partial<UserSettings>) => void;
  setMediaSettings: (settings: MediaSettings) => void; // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ–¥–∏–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  setSelectedTools: (tools: string[]) => void; // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  setDemoMode: (mode: boolean) => void; // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ –¥–µ–º–æ
  saveCurrentRoleAsLast: () => void; // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π
  reset: () => void;
  clearAll: () => void;
};

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π userId –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
function generateLocalUserId(): number {
  const existingId = localStorage.getItem('Super Mock-local-user-id');
  if (existingId) {
    return parseInt(existingId);
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp + —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–æ —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å Telegram ID
  const timestamp = Date.now();
  const random = Math.floor(Math.random() * 1000);
  const localId = parseInt(
    `1${timestamp.toString().slice(-8)}${random.toString().padStart(3, '0')}`
  );

  localStorage.setItem('Super Mock-local-user-id', localId.toString());
  return localId;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ userId
function getOrGenerateUserId(): number {
  const existingId = localStorage.getItem('Super Mock-local-user-id');
  if (existingId) {
    return parseInt(existingId);
  }
  return generateLocalUserId();
}

export const useAppStore = create<AppState>()(
  persist(
    (set, get) => ({
      userId: getOrGenerateUserId(), // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º userId –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      telegramUser: null,
      role: null,
      lastRole: null,
      profession: null,
      language: 'ru',
      slotsLocal: [],
      sessionId: null,
      jitsiRoom: null,
      mediaSettings: null, // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–¥–∏–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∫ null
      selectedTools: [], // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º
      demoMode: false, // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –¥–µ–º–æ –∫–∞–∫ false
      userSettings: {
        id: 0,
        userId: '',
        openrouterApiKey: null,
        stackblitzApiKey: null,
        preferredModel: 'openai/gpt-4o-mini',
        questionsLevel: 'middle',
        useAiGeneration: false,
        questionsCount: 10,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      },
      setUserId: (id) => {
        console.log('üîß setUserId called with:', id, 'Type:', typeof id);
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è 0 –∏–ª–∏ null, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID
        const finalId = id && id > 0 ? id : getOrGenerateUserId();
        set({ userId: finalId });
        console.log('üîß userId set in store to:', finalId);
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ userId
        if (finalId > 0) {
          const store = useAppStore.getState();
          store.loadUserData(finalId).catch(() => {
            // Silent error handling
          });
        }
      },
      setTelegramUser: (user) => {
        console.log('üîß setTelegramUser called with:', user);
        set({ telegramUser: user });
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ ID –∫–∞–∫ userId
        if (user) {
          console.log('üîß Setting userId from telegramUser:', user.id);
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è race condition
          setTimeout(() => {
            const store = useAppStore.getState();
            console.log('üîß About to set userId:', user.id, 'Current state:', store.userId);
            store.setUserId(user.id);
            console.log('üîß userId set to:', user.id, 'New state:', useAppStore.getState().userId);
          }, 0);
        }
      },
      loadUserSettings: async (userId) => {
        try {
          const settings = await apiGetUserSettings(userId);
          set((state) => ({
            userSettings: { ...state.userSettings, ...settings },
          }));
        } catch (error) {
          // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        }
      },
      loadUserData: async (userId) => {
        try {
          console.log('üîç Loading user data for userId:', userId);
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const settings = await apiGetUserSettings(userId);
          set((state) => ({
            userSettings: { ...state.userSettings, ...settings },
          }));
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ—Ñ–µ—Å—Å–∏—è, —è–∑—ã–∫, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)
          const userData = await apiCheckUserData(userId);
          console.log('üìä Loaded user data:', userData);
          
          if (userData.hasProfession && userData.profession) {
            set({ profession: userData.profession });
          }
          
          if (userData.tools && userData.tools.length > 0) {
            set({ selectedTools: userData.tools });
          }
          
          console.log('‚úÖ User data loaded successfully');
        } catch (error) {
          console.warn('‚ö†Ô∏è Failed to load user data:', error);
          // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        }
      },
      setRole: (role) => {
        set({ role }); // –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Ä–æ–ª—å, –Ω–µ –º–µ–Ω—è–µ–º lastRole
      },
      setProfession: (p) => set({ profession: p }),
      setLanguage: (lng) => set({ language: lng }),
      setSlotsLocal: (slots) => set({ slotsLocal: slots }),
      setSession: (s) => {
        const currentState = get();
        // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è (s === null), —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å –∫–∞–∫ lastRole
        if (s === null && currentState.role) {
          set({
            sessionId: null,
            jitsiRoom: null,
            lastRole: currentState.role, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω—é—é
          });
        } else {
          set({
            sessionId: s?.sessionId ?? null,
            jitsiRoom: s?.jitsiRoom ?? null,
          });
        }
      },
      setUserSettings: (settings) => {
        set((state) => ({
          userSettings: { ...state.userSettings, ...settings },
        }));

        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        const currentUserId = get().userId;
        const normalizedUserId = Number(currentUserId) || 0;
        
        apiSaveUserSettings({
          userId: normalizedUserId,
          ...settings,
        }).catch(() => {
          // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage
        });
      },
      setSelectedTools: (tools) => set({ selectedTools: tools }), // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
      setMediaSettings: (settings) => set({ mediaSettings: settings }), // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ–¥–∏–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      setDemoMode: (mode) => set({ demoMode: mode }), // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ –¥–µ–º–æ
      saveCurrentRoleAsLast: () => {
        const currentState = get();
        if (currentState.role) {
          console.log('Saving current role as lastRole:', currentState.role);
          set({ lastRole: currentState.role });
        }
      },
      reset: () =>
        set({
          role: null,
          lastRole: null,
          profession: null,
          slotsLocal: [],
          sessionId: null,
          jitsiRoom: null,
          selectedTools: [], // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–∏ reset
          mediaSettings: null, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ–¥–∏–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ reset
          demoMode: false, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –¥–µ–º–æ –ø—Ä–∏ reset
        }),
      clearAll: () =>
        set({
          userId: Number(getOrGenerateUserId()) || 0, // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π userId –≤–º–µ—Å—Ç–æ 0
          telegramUser: null,
          role: null,
          lastRole: null,
          profession: null,
          slotsLocal: [],
          sessionId: null,
          jitsiRoom: null,
          selectedTools: [], // –û—á–∏—â–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–∏ clearAll
          mediaSettings: null, // –û—á–∏—â–∞–µ–º –º–µ–¥–∏–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ clearAll
          demoMode: false, // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º –¥–µ–º–æ –ø—Ä–∏ clearAll
          userSettings: {
            id: 0,
            userId: '',
            openrouterApiKey: null,
            stackblitzApiKey: null,
            preferredModel: 'openai/gpt-4o-mini',
            questionsLevel: 'middle',
            useAiGeneration: false,
            questionsCount: 10,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
          },
        }),
    }),
    {
      name: 'Super Mock-storage', // –∏–º—è –∫–ª—é—á–∞ –≤ localStorage
      storage: createJSONStorage(() => localStorage),
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —è–∑—ã–∫ –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
      partialize: (state) => ({
        userSettings: state.userSettings,
        language: state.language,
        telegramUser: state.telegramUser,
        userId: state.userId,
        role: state.role,
        lastRole: state.lastRole, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–æ–ª—å
        profession: state.profession,
        selectedTools: state.selectedTools, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        mediaSettings: state.mediaSettings, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        demoMode: state.demoMode, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –¥–µ–º–æ
      }),
      // –í–µ—Ä—Å–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –±—É–¥—É—â–µ–º
      version: 1,
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage
      onRehydrateStorage: () => (state) => {
        if (state) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ
          const justLoggedOut = sessionStorage.getItem('just_logged_out');
          const logoutTimestamp = sessionStorage.getItem('logout_timestamp');

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ –±–æ–ª—å—à–µ —á–∞—Å–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –≤—ã—Ö–æ–¥–∞
          const isRecentlyLoggedOut =
            justLoggedOut &&
            logoutTimestamp &&
            Date.now() - parseInt(logoutTimestamp) < 60 * 60 * 1000; // 1 —á–∞—Å

          if (isRecentlyLoggedOut) {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–∞–≤–Ω–æ –≤—ã—à–µ–ª, –æ—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            console.log('User recently logged out, clearing all data');
            state.userId = Number(getOrGenerateUserId()) || 0; // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π userId –≤–º–µ—Å—Ç–æ 0
            state.telegramUser = null;
            state.role = null;
            state.lastRole = null;
            state.selectedTools = []; // –û—á–∏—â–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            state.userSettings = {
              id: 0,
              userId: '',
              openrouterApiKey: null,
              stackblitzApiKey: null,
              preferredModel: 'openai/gpt-4o-mini',
              questionsLevel: 'middle',
              useAiGeneration: false,
              questionsCount: 10,
              createdAt: new Date().toISOString(),
              updatedAt: new Date().toISOString(),
            };
            // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ –≤—ã—Ö–æ–¥–∞
            sessionStorage.removeItem('just_logged_out');
            sessionStorage.removeItem('logout_timestamp');
            return;
          }

          // –ï—Å–ª–∏ –Ω–µ—Ç userId (–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Telegram), —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –≤ development)
          if (!state.userId && !state.telegramUser && import.meta.env.DEV) {
            const localUserId = Number(generateLocalUserId()) || 0;
            state.userId = localUserId;
            console.log('Initialized local user ID:', localUserId);
          }
        }
      },
    }
  )
);
