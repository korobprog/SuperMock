import React, { useEffect, useState, useRef } from 'react';
import { useAppTranslation } from '@/lib/i18n';
import { TelegramLoginWidget, TelegramWebLogin, TelegramProductionLogin } from './telegram-login';
import { TelegramWebAuth } from './telegram-web-auth';
import { env } from '@/lib/env';
import { TelegramUser } from '@/lib/telegram-auth';
import { useAppStore } from '@/lib/store';

interface AuthRequiredMessageProps {
  onAuth: (user: TelegramUser) => void;
  className?: string;
}

export function AuthRequiredMessage({ onAuth, className = '' }: AuthRequiredMessageProps) {
  const { t } = useAppTranslation();
  const [isTelegramMiniApps, setIsTelegramMiniApps] = useState(false);
  const [miniAppUser, setMiniAppUser] = useState<any>(null);
  const { telegramUser, userId } = useAppStore();
  const [authStep, setAuthStep] = useState<'initial' | 'authing' | 'instructions' | 'success'>('initial');
  const [isWebAuth, setIsWebAuth] = useState(false);
  const ref = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ Telegram Mini Apps
    const checkTelegramMiniApps = () => {
      console.log('üîß AuthRequiredMessage: Checking environment...');
      console.log('üîß Window location:', window.location.href);
      console.log('üîß User agent:', navigator.userAgent);
      
      if (window.Telegram?.WebApp) {
        const tg = window.Telegram.WebApp;
        console.log('üîß AuthRequiredMessage: Detected Telegram Mini Apps environment');
        console.log('üîß WebApp initData:', tg.initData);
        console.log('üîß WebApp initDataUnsafe:', tg.initDataUnsafe);
        console.log('üîß WebApp version:', tg.version);
        console.log('üîß WebApp platform:', tg.platform);
        
        setIsTelegramMiniApps(true);
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Mini Apps
        if (tg.initDataUnsafe?.user) {
          console.log('üîß AuthRequiredMessage: User already authenticated in Mini Apps:', tg.initDataUnsafe.user);
          setMiniAppUser(tg.initDataUnsafe.user);
        }
      } else {
        console.log('üîß AuthRequiredMessage: Not in Telegram Mini Apps environment');
        console.log('üîß This is a regular web browser, will use Telegram Web Auth');
        setIsTelegramMiniApps(false);
      }
    };

    checkTelegramMiniApps();
  }, []);

  const handleTelegramAuth = async () => {
    try {
      setAuthStep('authing');
      console.log('üöÄ Starting Telegram WebApp authorization...');
      
      const tg = window.Telegram?.WebApp;
      if (!tg) {
        console.log('‚ùå Telegram WebApp not available');
        setAuthStep('initial');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º initDataRaw —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram Mini Apps
      const initDataRaw = tg.initData;
      console.log('üîë initDataRaw:', initDataRaw);
      
      if (!initDataRaw) {
        console.log('‚ö†Ô∏è initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º...');
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if ((tg as any).requestWriteAccess) {
          console.log('‚úÖ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ requestWriteAccess');
          (tg as any).requestWriteAccess();
        } else {
          console.log('‚ö†Ô∏è requestWriteAccess –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞');
          if (tg.openTelegramLink) {
            tg.openTelegramLink(`https://t.me/${env.TELEGRAM_BOT_NAME || 'SuperMock_bot'}?start=auth`);
          } else {
            window.open(`https://t.me/${env.TELEGRAM_BOT_NAME || 'SuperMock_bot'}?start=auth`, '_blank');
          }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        setAuthStep('instructions');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        const checkAuth = setInterval(() => {
          const currentTg = window.Telegram?.WebApp;
          if (currentTg?.initData) {
            console.log('‚úÖ initData –ø–æ–ª—É—á–µ–Ω –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞:', currentTg.initData);
            clearInterval(checkAuth);
            // –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            handleTelegramAuth();
          }
        }, 2000);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          clearInterval(checkAuth);
          if (authStep === 'instructions') {
            setAuthStep('initial');
          }
        }, 30000);
        
        return;
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å initData, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      console.log('‚úÖ initData –ø–æ–ª—É—á–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
      
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ initData
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      
      setAuthStep('success');
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram Mini Apps —É—Å–ø–µ—à–Ω–∞');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram Mini Apps:', error);
      setAuthStep('initial');
    }
  };

  const handleWebAuth = () => {
    console.log('üåê Starting web Telegram authorization...');
    setAuthStep('authing');
    setIsWebAuth(true);
  };

  // –ï—Å–ª–∏ –º—ã –≤ Telegram Mini Apps, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  if (isTelegramMiniApps) {
    return (
      <div className={`bg-blue-50 border border-blue-200 rounded-lg p-6 text-center ${className}`}>
        <div className="mb-4">
          <div className="mx-auto w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mb-4">
            <svg className="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
            </svg>
          </div>
          <h3 className="text-lg font-semibold text-blue-900 mb-2">
            {miniAppUser ? '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram Mini Apps' : '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'}
          </h3>
          <p className="text-blue-700 mb-4">
            {miniAppUser 
              ? `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${miniAppUser.first_name}!`
              : '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Telegram Mini Apps'
            }
          </p>
        </div>
        
        {miniAppUser ? (
          <div className="space-y-3">
            <button
              onClick={() => {
                console.log('‚úÖ User already authenticated in Mini Apps');
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å onAuth —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (miniAppUser) {
                  onAuth({
                    id: miniAppUser.id,
                    first_name: miniAppUser.first_name,
                    last_name: miniAppUser.last_name || '',
                    username: miniAppUser.username || '',
                    photo_url: miniAppUser.photo_url || '',
                    auth_date: Math.floor(Date.now() / 1000),
                    hash: 'telegram_mini_apps_hash',
                  });
                }
              }}
              className="w-full px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition-colors"
            >
              –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            </button>
          </div>
        ) : (
          <div className="space-y-3">
            <button
              onClick={handleTelegramAuth}
              disabled={authStep === 'authing'}
              className="w-full px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white rounded-lg font-medium transition-colors"
            >
              {authStep === 'authing' ? '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...' : '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'}
            </button>
            
            {authStep === 'instructions' && (
              <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                <p className="text-sm text-yellow-800">
                  –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –≤ Telegram Mini Apps
                </p>
              </div>
            )}
          </div>
        )}
      </div>
    );
  }

  // –î–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç TelegramWebAuth
  return (
    <div className={`bg-white border border-gray-200 rounded-lg p-6 ${className}`}>
      <div className="text-center mb-6">
        <div className="mx-auto w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mb-4">
          <svg className="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
          </svg>
        </div>
        <h3 className="text-lg font-semibold text-gray-900 mb-2">
          –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç
        </h3>
        <p className="text-gray-600">
          –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram
        </p>
      </div>
      
      {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤–µ–±-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */}
      <TelegramWebAuth
        botName="SuperMock_bot"
        onAuth={onAuth}
        className="w-full"
      />
    </div>
  );
}
