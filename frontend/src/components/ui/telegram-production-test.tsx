import React, { useState, useEffect } from 'react';
import { TelegramUser } from '@/lib/telegram-auth';
import { getTelegramWebApp } from '@/lib/utils';
import { useAppStore } from '@/lib/store';

interface TelegramProductionTestProps {
  botName: string;
  onAuth: (user: TelegramUser) => void;
  className?: string;
}

export function TelegramProductionTest({
  botName,
  onAuth,
  className = '',
}: TelegramProductionTestProps) {
  const [telegramStatus, setTelegramStatus] = useState<'checking' | 'available' | 'unavailable'>('checking');
  const [webAppData, setWebAppData] = useState<any>(null);
  const [authStep, setAuthStep] = useState<'initial' | 'authing' | 'success'>('initial');
  const { telegramUser, userId } = useAppStore();

  useEffect(() => {
    console.log('üîß TelegramProductionTest: Checking Telegram WebApp availability...');
    
    const checkTelegramWebApp = () => {
      const tg = getTelegramWebApp();
      
      if (tg) {
        console.log('‚úÖ Telegram WebApp detected');
        console.log('üîß initData:', tg.initData);
        console.log('üîß initDataUnsafe:', tg.initDataUnsafe);
        console.log('üîß version:', tg.version);
        console.log('üîß platform:', tg.platform);
        console.log('üîß colorScheme:', tg.colorScheme);
        
        setWebAppData({
          initData: tg.initData,
          initDataUnsafe: tg.initDataUnsafe,
          version: tg.version,
          platform: tg.platform,
          colorScheme: tg.colorScheme,
        });
        
        setTelegramStatus('available');
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if (tg.initDataUnsafe?.user) {
          console.log('‚úÖ User already authenticated:', tg.initDataUnsafe.user);
          const user = tg.initDataUnsafe.user;
          onAuth({
            id: user.id,
            first_name: user.first_name,
            last_name: user.last_name || '',
            username: user.username || '',
            photo_url: user.photo_url || '',
            auth_date: Math.floor(Date.now() / 1000),
            hash: 'telegram_mini_apps_hash',
          });
          setAuthStep('success');
        }
      } else {
        console.log('‚ùå Telegram WebApp not available');
        setTelegramStatus('unavailable');
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É
    checkTelegramWebApp();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ WebApp –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è)
    const timeoutId = setTimeout(checkTelegramWebApp, 1000);
    
    return () => clearTimeout(timeoutId);
  }, [onAuth]);

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  if (telegramUser || (userId && userId > 0)) {
    return null;
  }

  const handleStartAuth = () => {
    setAuthStep('authing');
    console.log('üöÄ Starting production auth process...');
    
    try {
      const tg = getTelegramWebApp();
      
      if (!tg) {
        console.log('‚ùå Telegram WebApp not available');
        setTelegramStatus('unavailable');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º initDataRaw —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram Mini Apps
      const initDataRaw = tg.initData;
      console.log('üîë initDataRaw:', initDataRaw);
      
      if (!initDataRaw) {
        console.log('‚ö†Ô∏è initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º...');
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if ((tg as any).requestWriteAccess) {
          console.log('‚úÖ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ requestWriteAccess');
          (tg as any).requestWriteAccess();
        } else {
          console.log('‚ö†Ô∏è requestWriteAccess –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞');
          if (tg.openTelegramLink) {
            tg.openTelegramLink(`https://t.me/${botName}?start=auth`);
          } else {
            window.open(`https://t.me/${botName}?start=auth`, '_blank');
          }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        alert(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –≤ Telegram –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        const checkAuth = setInterval(() => {
          const tg = getTelegramWebApp();
          if (tg?.initData) {
            console.log('‚úÖ initData –ø–æ–ª—É—á–µ–Ω –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞:', tg.initData);
            clearInterval(checkAuth);
            // –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            handleStartAuth();
          }
        }, 2000);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          clearInterval(checkAuth);
          if (authStep === 'authing') {
            console.log('‚è∞ Auth timeout, resetting to initial state');
            setAuthStep('initial');
          }
        }, 30000);
        
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º initDataRaw –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º initDataRaw –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
      
      fetch('/api/init', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `tma ${initDataRaw}` // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        },
        body: JSON.stringify({
          language: 'ru',
          initData: initDataRaw
        })
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data);
        
        if (data.user) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
          onAuth({
            id: data.user.id,
            first_name: data.user.first_name,
            last_name: data.user.last_name || '',
            username: data.user.username || '',
            photo_url: data.user.photo_url || '',
            auth_date: Math.floor(Date.now() / 1000),
            hash: data.user.hash || 'telegram_mini_apps_hash',
          });
        } else if (tg.initDataUnsafe?.user) {
          // Fallback –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp
          const user = tg.initDataUnsafe.user;
          onAuth({
            id: user.id,
            first_name: user.first_name,
            last_name: user.last_name || '',
            username: user.username || '',
            photo_url: user.photo_url || '',
            auth_date: Math.floor(Date.now() / 1000),
            hash: 'telegram_mini_apps_hash',
          });
        }
        
        setAuthStep('success');
      })
      .catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', error);
        
        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        if (tg.initDataUnsafe?.user) {
          console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ WebApp');
          const user = tg.initDataUnsafe.user;
          onAuth({
            id: user.id,
            first_name: user.first_name,
            last_name: user.last_name || '',
            username: user.username || '',
            photo_url: user.photo_url || '',
            auth_date: Math.floor(Date.now() / 1000),
            hash: 'telegram_mini_apps_hash',
          });
          setAuthStep('success');
        } else {
          console.log('‚ùå Fallback –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
          setAuthStep('initial');
        }
      });
      
    } catch (error) {
      console.error('‚ùå Error during auth:', error);
      setAuthStep('initial');
    }
  };

  if (authStep === 'success') {
    return (
      <div className={`text-center ${className}`}>
        <div className="inline-flex items-center justify-center gap-2 px-4 py-2 bg-green-100 text-green-800 rounded-lg">
          <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
          </svg>
          <span className="text-sm font-medium">–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</span>
        </div>
      </div>
    );
  }

  if (telegramStatus === 'checking') {
    return (
      <div className={`text-center ${className}`}>
        <div className="inline-flex items-center justify-center gap-2 px-4 py-2 bg-blue-100 text-blue-800 rounded-lg">
          <svg className="animate-spin h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <span className="text-sm">–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram...</span>
        </div>
      </div>
    );
  }

  if (telegramStatus === 'unavailable') {
    return (
      <div className={`text-center ${className}`}>
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <p className="text-sm text-yellow-800 mb-3">
            Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ.
          </p>
          <button
            onClick={() => window.open(`https://t.me/${botName}?start=auth`, '_blank')}
            className="inline-flex items-center justify-center gap-2 px-4 py-2 bg-[#0088cc] hover:bg-[#006fa0] text-white rounded-lg font-medium text-sm transition-colors"
          >
            <svg width="20" height="20" viewBox="0 0 240 240" fill="currentColor" className="flex-shrink-0">
              <circle cx="120" cy="120" r="120" fill="#fff" />
              <path d="m98 175c-3.888 0-3.227-1.468-4.568-5.17L82 132.207 170 80" fill="#c8daea" />
              <path d="m98 175c3 0 4.325-1.372 6-3l16-15.558-19.958-12.035" fill="#a9c9dd" />
              <path d="m100 144-15.958-12.035L170 80" fill="#f6fbfe" />
            </svg>
            –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={`text-center ${className}`}>
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
        <h3 className="text-lg font-semibold text-blue-900 mb-2">
          Telegram WebApp –æ–±–Ω–∞—Ä—É–∂–µ–Ω
        </h3>
        <div className="text-left text-sm text-blue-700 space-y-1">
          <p><strong>–í–µ—Ä—Å–∏—è:</strong> {webAppData?.version || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
          <p><strong>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong> {webAppData?.platform || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
          <p><strong>initData:</strong> {webAppData?.initData ? '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
          <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {webAppData?.initDataUnsafe?.user ? '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' : '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}</p>
        </div>
      </div>
      
      {webAppData?.initDataUnsafe?.user ? (
        <div className="text-green-700 text-sm">
          ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Telegram WebApp
        </div>
      ) : (
        <>
          <p className="text-sm text-gray-600 mb-3">
            –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Telegram
          </p>
          <button
            onClick={handleStartAuth}
            disabled={authStep === 'authing'}
            className={`
              inline-flex items-center justify-center gap-2 px-4 py-2 
              bg-[#0088cc] hover:bg-[#006fa0] disabled:bg-gray-400
              text-white rounded-lg font-medium text-sm transition-colors w-full h-12
              ${authStep === 'authing' ? 'cursor-not-allowed' : ''}
            `}
          >
            {authStep === 'authing' ? (
              <>
                <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <span>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...</span>
              </>
            ) : (
              <>
                <svg width="20" height="20" viewBox="0 0 240 240" fill="currentColor" className="flex-shrink-0">
                  <circle cx="120" cy="120" r="120" fill="#fff" />
                  <path d="m98 175c-3.888 0-3.227-1.468-4.568-5.17L82 132.207 170 80" fill="#c8daea" />
                  <path d="m98 175c3 0 4.325-1.372 6-3l16-15.558-19.958-12.035" fill="#a9c9dd" />
                  <path d="m100 144-15.958-12.035L170 80" fill="#f6fbfe" />
                </svg>
                <span>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Telegram</span>
              </>
            )}
          </button>
        </>
      )}
    </div>
  );
}

// –ü—Ä–æ—Å—Ç–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
export function TelegramQuickTest({
  botName,
  onAuth,
  className = '',
}: {
  botName: string;
  onAuth: (user: TelegramUser) => void;
  className?: string;
}) {
  const [testStep, setTestStep] = useState<'initial' | 'testing' | 'success'>('initial');
  const [testResults, setTestResults] = useState<string[]>([]);

  const addTestResult = (result: string) => {
    setTestResults(prev => [...prev, `${new Date().toLocaleTimeString()}: ${result}`]);
  };

  const runQuickTest = async () => {
    setTestStep('testing');
    setTestResults([]);
    
    addTestResult('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç...');
    
    try {
      // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      addTestResult('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
      const botNameEnv = import.meta.env.VITE_TELEGRAM_BOT_NAME;
      const botIdEnv = import.meta.env.VITE_TELEGRAM_BOT_ID;
      
      if (!botNameEnv) {
        addTestResult('‚ùå VITE_TELEGRAM_BOT_NAME –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        return;
      }
      if (!botIdEnv) {
        addTestResult('‚ùå VITE_TELEGRAM_BOT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        return;
      }
      addTestResult(`‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: –±–æ—Ç "${botNameEnv}", ID ${botIdEnv}`);

      // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram WebApp
      addTestResult('üì± –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp...');
      const tg = window.Telegram?.WebApp;
      if (tg) {
        addTestResult(`‚úÖ Telegram WebApp –æ–±–Ω–∞—Ä—É–∂–µ–Ω (–≤–µ—Ä—Å–∏—è ${tg.version || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'})`);
        addTestResult(`üìä initData: ${tg.initData ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
        addTestResult(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${tg.initDataUnsafe?.user ? '–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' : '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}`);
      } else {
        addTestResult('‚ùå Telegram WebApp –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
      }

      // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –±–æ—Ç–∞
      addTestResult('ü§ñ –ü—Ä–æ–≤–µ—Ä—è–µ–º API –±–æ—Ç–∞...');
      try {
        const response = await fetch(`https://api.telegram.org/bot${botIdEnv}/getMe`);
        const data = await response.json();
        
        if (data.ok) {
          addTestResult(`‚úÖ –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: ${data.result.first_name} (@${data.result.username})`);
        } else {
          addTestResult(`‚ùå –û—à–∏–±–∫–∞ API –±–æ—Ç–∞: ${data.description}`);
        }
      } catch (error) {
        addTestResult(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: ${error}`);
      }

      // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞
      addTestResult('üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω...');
      const currentDomain = window.location.hostname;
      addTestResult(`üìç –¢–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω: ${currentDomain}`);
      
      if (currentDomain === 'localhost' || currentDomain === '127.0.0.1') {
        addTestResult('‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å');
      } else {
        addTestResult('‚úÖ –ü—Ä–æ–¥–∞–∫—à–Ω –¥–æ–º–µ–Ω');
      }

      addTestResult('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
      setTestStep('success');
      
    } catch (error) {
      addTestResult(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${error}`);
      setTestStep('initial');
    }
  };

  const resetTest = () => {
    setTestStep('initial');
    setTestResults([]);
  };

  if (testStep === 'success') {
    return (
      <div className={`text-center ${className}`}>
        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
          <h3 className="text-lg font-semibold text-green-900 mb-2">‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω</h3>
          <p className="text-sm text-green-700 mb-3">
            –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏–∂–µ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
          </p>
          <button
            onClick={resetTest}
            className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg text-sm"
          >
            –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={`${className}`}>
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
        <h3 className="text-lg font-semibold text-blue-900 mb-2">
          üß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç Telegram –æ–∫—Ä—É–∂–µ–Ω–∏—è
        </h3>
        <p className="text-sm text-blue-700 mb-3">
          –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–º–æ–∂–µ—Ç –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
        </p>
        <button
          onClick={runQuickTest}
          disabled={testStep === 'testing'}
          className={`
            px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400
            text-white rounded-lg text-sm font-medium
            ${testStep === 'testing' ? 'cursor-not-allowed' : ''}
          `}
        >
          {testStep === 'testing' ? '–¢–µ—Å—Ç–∏—Ä—É–µ–º...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç'}
        </button>
      </div>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ */}
      {testResults.length > 0 && (
        <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
          <h4 className="text-sm font-medium text-gray-700 mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:</h4>
          <div className="bg-white border border-gray-200 rounded p-3 max-h-64 overflow-y-auto">
            {testResults.map((result, index) => (
              <div key={index} className="text-xs text-gray-700 mb-1 font-mono">
                {result}
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ */}
      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3 mt-4">
        <h4 className="text-sm font-medium text-yellow-900 mb-2">‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h4>
        <div className="text-xs text-yellow-800 space-y-1">
          <div>‚Ä¢ –ë–æ—Ç: {botName}</div>
          <div>‚Ä¢ –î–æ–º–µ–Ω: {window.location.hostname}</div>
          <div>‚Ä¢ –†–µ–∂–∏–º: {import.meta.env.PROD ? '–ü—Ä–æ–¥–∞–∫—à–Ω' : '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞'}</div>
        </div>
      </div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –≤–µ—Ä—Å–∏–∏
export function TelegramProductionAuthTest({
  botName,
  onAuth,
  className = '',
}: {
  botName: string;
  onAuth: (user: TelegramUser) => void;
  className?: string;
}) {
  const { telegramUser, userId } = useAppStore();
  const [isChecking, setIsChecking] = useState(false);
  const [checkResult, setCheckResult] = useState<string>('');
  const [authStep, setAuthStep] = useState<'initial' | 'authing' | 'success'>('initial');

  const checkAuthStatus = () => {
    setIsChecking(true);
    setCheckResult('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    
    setTimeout(() => {
      const tg = window.Telegram?.WebApp;
      let result = '';
      
      if (tg) {
        result += `‚úÖ Telegram WebApp –æ–±–Ω–∞—Ä—É–∂–µ–Ω\n`;
        result += `üì± –í–µ—Ä—Å–∏—è: ${tg.version || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}\n`;
        result += `üîß initData: ${tg.initData ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n`;
        result += `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${tg.initDataUnsafe?.user ? '–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' : '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}\n`;
        
        if (tg.initDataUnsafe?.user) {
          result += `\nüéØ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n`;
          result += `ID: ${tg.initDataUnsafe.user.id}\n`;
          result += `–ò–º—è: ${tg.initDataUnsafe.user.first_name}\n`;
          result += `Username: ${tg.initDataUnsafe.user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
        }
      } else {
        result += `‚ùå Telegram WebApp –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω\n`;
      }
      
      result += `\nüìä Store —Å–æ—Å—Ç–æ—è–Ω–∏–µ:\n`;
      result += `telegramUser: ${telegramUser ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n`;
      result += `userId: ${userId || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n`;
      
      if (telegramUser) {
        result += `\nüë§ –î–∞–Ω–Ω—ã–µ –∏–∑ store:\n`;
        result += `ID: ${telegramUser.id}\n`;
        result += `–ò–º—è: ${telegramUser.first_name}\n`;
        result += `Username: ${telegramUser.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
      }
      
      setCheckResult(result);
      setIsChecking(false);
    }, 1000);
  };

  const handleTelegramAuth = () => {
    setAuthStep('authing');
    setCheckResult('–ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram...');
    
    try {
      const tg = window.Telegram?.WebApp;
      
      if (tg?.openTelegramLink) {
        console.log('‚úÖ Using WebApp API to open Telegram link');
        tg.openTelegramLink(`https://t.me/${botName}?start=auth`);
      } else {
        console.log('‚ö†Ô∏è WebApp API not available, using fallback');
        window.open(`https://t.me/${botName}?start=auth`, '_blank');
      }
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if ((tg as any).requestWriteAccess) {
        console.log('‚úÖ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ requestWriteAccess');
        (tg as any).requestWriteAccess();
      } else {
        console.log('‚ö†Ô∏è requestWriteAccess –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞');
        if (tg.openTelegramLink) {
          tg.openTelegramLink(`https://t.me/${botName}?start=auth`);
        } else {
          window.open(`https://t.me/${botName}?start=auth`, '_blank');
        }
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      setCheckResult('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –≤ Telegram –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
      const checkAuth = setInterval(() => {
        const currentTg = window.Telegram?.WebApp;
        if (currentTg?.initDataUnsafe?.user) {
          console.log('‚úÖ User authenticated after write access:', currentTg.initDataUnsafe.user);
          clearInterval(checkAuth);
          
          const user = currentTg.initDataUnsafe.user;
          const telegramUser: TelegramUser = {
            id: user.id,
            first_name: user.first_name,
            last_name: user.last_name || '',
            username: user.username || '',
            photo_url: user.photo_url || '',
            auth_date: Math.floor(Date.now() / 1000),
            hash: 'telegram_mini_apps_hash',
          };
          
          setCheckResult('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ' + user.first_name);
          setAuthStep('success');
          onAuth(telegramUser);
        }
      }, 1000);
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        clearInterval(checkAuth);
        if (authStep === 'authing') {
          console.log('‚è∞ Auth timeout, resetting to initial state');
          setAuthStep('initial');
          setCheckResult('‚è∞ –¢–∞–π–º–∞—É—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
      }, 30000);
      
    } catch (error) {
      console.error('‚ùå Error during auth:', error);
      setAuthStep('initial');
      setCheckResult('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + error);
    }
  };

  const forceAuth = () => {
    if (telegramUser) {
      onAuth(telegramUser);
      setCheckResult('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
    } else {
      setCheckResult('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
  };

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  if (telegramUser || (userId && userId > 0)) {
    return (
      <div className={`text-center ${className}`}>
        <div className="inline-flex items-center justify-center gap-2 px-4 py-2 bg-green-100 text-green-800 rounded-lg">
          <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
          </svg>
          <span className="text-sm font-medium">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</span>
        </div>
      </div>
    );
  }

  return (
    <div className={`${className}`}>
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
        <h3 className="text-lg font-semibold text-blue-900 mb-2">
          üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram
        </h3>
        <p className="text-sm text-blue-700 mb-3">
          –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
        </p>
        
        <div className="space-y-3">
          <button
            onClick={handleTelegramAuth}
            disabled={authStep === 'authing'}
            className="w-full px-4 py-2 bg-[#0088cc] hover:bg-[#006fa0] disabled:bg-gray-400 text-white rounded-lg text-sm font-medium flex items-center justify-center gap-2"
          >
            {authStep === 'authing' ? (
              <>
                <svg className="animate-spin h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <span>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...</span>
              </>
            ) : (
              <>
                <svg width="20" height="20" viewBox="0 0 240 240" fill="currentColor">
                  <circle cx="120" cy="120" r="120" fill="#fff" />
                  <path d="m98 175c-3.888 0-3.227-1.468-4.568-5.17L82 132.207 170 80" fill="#c8daea" />
                  <path d="m98 175c3 0 4.325-1.372 6-3l16-15.558-19.958-12.035" fill="#a9c9dd" />
                  <path d="m100 144-15.958-12.035L170 80" fill="#f6fbfe" />
                </svg>
                <span>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram</span>
              </>
            )}
          </button>
          
          <button
            onClick={checkAuthStatus}
            disabled={isChecking}
            className="w-full px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white rounded-lg text-sm font-medium"
          >
            {isChecking ? '–ü—Ä–æ–≤–µ—Ä—è–µ–º...' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'}
          </button>
        </div>
      </div>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ */}
      {checkResult && (
        <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
          <h4 className="text-sm font-medium text-gray-700 mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</h4>
          <div className="bg-white border border-gray-200 rounded p-3 max-h-64 overflow-y-auto">
            <pre className="text-xs text-gray-700 whitespace-pre-wrap font-mono">
              {checkResult}
            </pre>
          </div>
        </div>
      )}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ */}
      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3 mt-4">
        <h4 className="text-sm font-medium text-yellow-900 mb-2">‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h4>
        <div className="text-xs text-yellow-800 space-y-1">
          <div>‚Ä¢ –ë–æ—Ç: {botName}</div>
          <div>‚Ä¢ –î–æ–º–µ–Ω: {window.location.hostname}</div>
          <div>‚Ä¢ –†–µ–∂–∏–º: {import.meta.env.PROD ? '–ü—Ä–æ–¥–∞–∫—à–Ω' : '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞'}</div>
          <div>‚Ä¢ Telegram WebApp: {window.Telegram?.WebApp ? '–î–æ—Å—Ç—É–ø–µ–Ω' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}</div>
        </div>
      </div>
    </div>
  );
}
