import React, { useEffect, useRef, useState } from 'react';
import { TelegramUser } from '@/lib/telegram-auth';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø—ã –∏–∑ @telegram-auth/react –ø–∞–∫–µ—Ç–∞

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è Telegram Mini Apps
export function TelegramLoginWidget({
  onAuth,
  className = '',
}: {
  onAuth: (user: TelegramUser) => void;
  className?: string;
}) {
  const [isInTelegram, setIsInTelegram] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const checkTelegramEnvironment = () => {
      const tg = window.Telegram?.WebApp;
      
      if (tg) {
        console.log('‚úÖ Telegram WebApp detected');
        console.log('üîß Version:', tg.version);
        console.log('üîß Platform:', tg.platform);
        console.log('üîß Init data:', tg.initData);
        console.log('üîß Init data unsafe:', tg.initDataUnsafe);
        
        setIsInTelegram(true);
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if (tg.initDataUnsafe?.user) {
          console.log('‚úÖ User already authenticated:', tg.initDataUnsafe.user);
          const user = tg.initDataUnsafe.user;
          
          const telegramUser: TelegramUser = {
            id: user.id,
            first_name: user.first_name,
            last_name: user.last_name || '',
            username: user.username || '',
            photo_url: user.photo_url || '',
            auth_date: Math.floor(Date.now() / 1000),
            hash: 'telegram_mini_apps_hash',
          };
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
          localStorage.setItem('telegram_user', JSON.stringify(telegramUser));
          console.log('‚úÖ User saved to localStorage');
          
          // –í—ã–∑—ã–≤–∞–µ–º callback
          onAuth(telegramUser);
        } else {
          console.log('‚ÑπÔ∏è User not authenticated in Mini Apps');
          setError('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Telegram');
        }
        
        // –ì–æ—Ç–æ–≤–∏–º WebApp
        tg.ready();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        if (tg.MainButton) {
          tg.MainButton.setText('–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram');
          tg.MainButton.onClick(() => {
            handleTelegramAuth();
          });
          tg.MainButton.show();
        }
        
      } else {
        console.log('‚ÑπÔ∏è Not in Telegram environment');
        setIsInTelegram(false);
        setError('–≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ Telegram Mini Apps');
      }
    };

    checkTelegramEnvironment();
  }, [onAuth]);

  const handleTelegramAuth = async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      const tg = window.Telegram?.WebApp;
      
      if (!tg) {
        throw new Error('Telegram WebApp not available');
      }
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π
      // Note: requestWriteAccess is not available in current API
      console.log('üîê Write access request not implemented in current API');
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞
      const botUsername = import.meta.env.VITE_TELEGRAM_BOT_NAME;
      if (botUsername) {
        const botUrl = `https://t.me/${botUsername}?start=auth`;
        console.log('üîê Opening bot URL:', botUrl);
        
        if (tg.openTelegramLink) {
          tg.openTelegramLink(botUrl);
        } else {
          // Fallback
          window.open(botUrl, '_blank');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        // Note: showAlert is not available in current API
        console.log('üîê Please authorize in bot and return to app');
        
        // –ñ–¥–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        setTimeout(() => {
          checkAuthStatus();
        }, 3000);
        
      } else {
        throw new Error('Bot username not configured');
      }
      
    } catch (error) {
      console.error('‚ùå Error during Telegram auth:', error);
      setError(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    } finally {
      setIsLoading(false);
    }
  };

  const checkAuthStatus = () => {
    const tg = window.Telegram?.WebApp;
    
    if (tg?.initDataUnsafe?.user) {
      console.log('‚úÖ User authenticated after delay:', tg.initDataUnsafe.user);
      const user = tg.initDataUnsafe.user;
      
      const telegramUser: TelegramUser = {
        id: user.id,
        first_name: user.first_name,
        last_name: user.last_name || '',
        username: user.username || '',
        photo_url: user.photo_url || '',
        auth_date: Math.floor(Date.now() / 1000),
        hash: 'telegram_mini_apps_hash',
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      localStorage.setItem('telegram_user', JSON.stringify(telegramUser));
      console.log('‚úÖ User saved to localStorage after delay');
      
      // –í—ã–∑—ã–≤–∞–µ–º callback
      onAuth(telegramUser);
      setError(null);
    } else {
      console.log('‚ÑπÔ∏è User still not authenticated');
      setError('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  };

  if (!isInTelegram) {
    return (
      <div className={`text-center p-4 border border-gray-200 bg-gray-50 rounded-lg ${className}`}>
        <p className="text-sm text-gray-600">
          –≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ Telegram Mini Apps
        </p>
      </div>
    );
  }

  if (error) {
    return (
      <div className={`text-center p-4 border border-red-200 bg-red-50 rounded-lg ${className}`}>
        <p className="text-sm text-red-600 mb-3">{error}</p>
        <button
          onClick={handleTelegramAuth}
          disabled={isLoading}
          className="inline-flex items-center justify-center gap-2 px-4 py-2 bg-[#0088cc] hover:bg-[#006fa0] disabled:bg-gray-400 text-white rounded-lg font-medium text-sm transition-colors"
        >
          {isLoading ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
              <span>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...</span>
            </>
          ) : (
            <>
              <svg width="20" height="20" viewBox="0 0 240 240" fill="currentColor" className="flex-shrink-0">
                <circle cx="120" cy="120" r="120" fill="#fff" />
                <path d="m98 175c-3.888 0-3.227-1.468-4.568-5.17L82 132.207 170 80" fill="#c8daea" />
                <path d="m98 175c3 0 4.325-1.372 6-3l16-15.558-19.958-12.035" fill="#a9c9dd" />
                <path d="m100 144-15.958-12.035L170 80" fill="#f6fbfe" />
              </svg>
              <span>–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram</span>
            </>
          )}
        </button>
      </div>
    );
  }

  return (
    <div className={`text-center p-4 border border-green-200 bg-green-50 rounded-lg ${className}`}>
      <p className="text-sm text-green-600 mb-3">
        ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram Mini Apps
      </p>
      <p className="text-xs text-green-500">
        –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
      </p>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–µ–±-–±—Ä–∞—É–∑–µ—Ä–æ–≤ (fallback)
export function TelegramWebFallback({
  onAuth,
  className = '',
}: {
  onAuth: (user: TelegramUser) => void;
  className?: string;
}) {
  const handleWebAuth = () => {
    const botUsername = import.meta.env.VITE_TELEGRAM_BOT_NAME;
    
    if (botUsername) {
      const botUrl = `https://t.me/${botUsername}?start=auth`;
      console.log('üîê Opening bot in browser:', botUrl);
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
      window.open(botUrl, '_blank');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
      alert('–û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram –∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç.');
    } else {
      alert('–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –∏–º—è –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
  };

  return (
    <div className={`text-center p-4 border border-blue-200 bg-blue-50 rounded-lg ${className}`}>
      <p className="text-sm text-blue-600 mb-3">
        –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram
      </p>
      <button
        onClick={handleWebAuth}
        className="inline-flex items-center justify-center gap-2 px-4 py-2 bg-[#0088cc] hover:bg-[#006fa0] text-white rounded-lg font-medium text-sm transition-colors"
      >
        <svg width="20" height="20" viewBox="0 0 240 240" fill="currentColor" className="flex-shrink-0">
          <circle cx="120" cy="120" r="120" fill="#fff" />
          <path d="m98 175c-3.888 0-3.227-1.468-4.568-5.17L82 132.207 170 80" fill="#c8daea" />
          <path d="m98 175c3 0 4.325-1.372 6-3l16-15.558-19.958-12.035" fill="#a9c9dd" />
          <path d="m100 144-15.958-12.035L170 80" fill="#f6fbfe" />
        </svg>
        <span>–û—Ç–∫—Ä—ã—Ç—å –≤ Telegram</span>
      </button>
    </div>
  );
}

// –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Å–ø–æ—Ä—Ç - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
export function TelegramLogin({
  onAuth,
  className = '',
}: {
  onAuth: (user: TelegramUser) => void;
  className?: string;
}) {
  const [isInTelegram, setIsInTelegram] = useState(false);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ Telegram Mini Apps
    const tg = window.Telegram?.WebApp;
    setIsInTelegram(!!tg);
  }, []);

  if (isInTelegram) {
    return <TelegramLoginWidget onAuth={onAuth} className={className} />;
  } else {
    return <TelegramWebFallback onAuth={onAuth} className={className} />;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export { TelegramLoginWidget as TelegramProductionLogin };
