import React, { useEffect, useState } from 'react';
import { useAppStore } from '@/lib/store';
import { useAppTranslation } from '@/lib/i18n';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Bell, Settings, LogOut, User } from 'lucide-react';
import { TelegramUser } from '@/lib/telegram-auth';
import { createApiUrl } from '@/lib/config';
import { LanguageSelector } from './language-selector';
import { useNavigate } from 'react-router-dom';
import { useOAuthListener } from '@/hooks/useOAuthListener';
import { TelegramOAuthButton } from './telegram-oauth-button';

interface RealUser {
  id: string;
  firstName: string;
  lastName?: string;
  username?: string;
  language?: string;
  phone?: string;
}

export function ProfileHeader() {
  const navigate = useNavigate();
  const { t } = useAppTranslation();
  const { telegramUser, setTelegramUser, userId, setUserId } = useAppStore();
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –≤ development)
  if (import.meta.env.DEV) {
    console.log('üîç ProfileHeader: Component loaded with state:', {
      telegramUser: telegramUser ? { id: telegramUser.id, first_name: telegramUser.first_name } : null,
      userId,
      hasTelegramUser: !!telegramUser,
      hasUserId: !!userId
    });
  }
  
  // –°–ª—É—à–∞–µ–º OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏–∑ –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–æ–∫
  useOAuthListener();
  const [realUser, setRealUser] = useState<RealUser | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (import.meta.env.DEV) {
      console.log('üîç ProfileHeader: useEffect triggered with:', { userId, telegramUser });
    }
    
    const loadRealUser = async () => {
      if (!userId) {
        if (import.meta.env.DEV) {
          console.log('‚ö†Ô∏è ProfileHeader: No userId, skipping user data load');
        }
        setRealUser(null);
        return;
      }

      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!import.meta.env.DEV && !telegramUser) {
        setRealUser(null);
        return;
      }

      setIsLoading(true);
      try {
        if (import.meta.env.DEV) {
          console.log('üîç ProfileHeader: Loading user data for userId:', userId);
        }
        const response = await fetch(createApiUrl(`/api/user/${userId}`));
        if (response.ok) {
          const userData = await response.json();
          if (import.meta.env.DEV) {
            console.log('‚úÖ ProfileHeader: User data loaded:', userData);
          }
          setRealUser(userData);
        } else if (response.status === 404) {
          if (import.meta.env.DEV) {
            console.log('‚ö†Ô∏è ProfileHeader: User not found in database, using local data');
          }
          setRealUser(null);
        } else {
          if (import.meta.env.DEV) {
            console.error('‚ùå ProfileHeader: Error loading user data:', response.status);
          }
          // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º realUser –≤ null –ø—Ä–∏ –æ—à–∏–±–∫–µ –ë–î
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        }
      } catch (error) {
        if (import.meta.env.DEV) {
          console.log('‚ö†Ô∏è ProfileHeader: Network error loading user data, using local data:', error);
        }
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–µ—Ç–∏/–ë–î –Ω–µ –æ—á–∏—â–∞–µ–º realUser
        // –í–æ–∑–º–æ–∂–Ω–æ, —É –Ω–∞—Å –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      } finally {
        setIsLoading(false);
      }
    };

    loadRealUser();
  }, [userId, telegramUser]);

  const handleLogout = () => {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setTelegramUser(null);
    setUserId(0);
    setRealUser(null);
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    localStorage.removeItem('Super Mock-storage');
    localStorage.removeItem('telegram_user');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –≤—ã—Ö–æ–¥–∞
    sessionStorage.setItem('just_logged_out', 'true');
    sessionStorage.setItem('logout_timestamp', Date.now().toString());
    
    // –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    navigate('/');
    
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (import.meta.env.DEV) {
      setTimeout(() => {
        window.location.reload();
      }, 100);
    }
  };

  const handleTelegramAuth = async (user: TelegramUser) => {
    if (import.meta.env.DEV) {
      console.log('ProfileHeader: Received Telegram auth:', user);
    }
    
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const initResponse = await fetch(createApiUrl('/api/init'), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          tg: user,
          language: 'ru',
          initData: 'telegram_auth_hash'
        })
      });
      
      if (initResponse.ok) {
        const initData = await initResponse.json();
        if (import.meta.env.DEV) {
          console.log('ProfileHeader: User initialized in database:', initData);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ store (—ç—Ç–æ —Ç–∞–∫–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç userId)
        setTelegramUser(user);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (import.meta.env.DEV) {
          console.log('‚úÖ User successfully authenticated and initialized');
        }
      } else {
        if (import.meta.env.DEV) {
          console.error('ProfileHeader: Failed to initialize user in database');
        }
        // –î–∞–∂–µ –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –ë–î –Ω–µ —É–¥–∞–ª–∞—Å—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ store
        setTelegramUser(user);
      }
    } catch (error) {
      if (import.meta.env.DEV) {
        console.error('ProfileHeader: Error initializing user:', error);
      }
      // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ store
      setTelegramUser(user);
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: telegramUser > realUser > null
  const displayUser = telegramUser || realUser;
  
  if (import.meta.env.DEV) {
    console.log('üîç ProfileHeader: displayUser calculation:', {
      telegramUser: telegramUser ? { id: telegramUser.id, first_name: telegramUser.first_name } : null,
      realUser: realUser ? { id: realUser.id, firstName: realUser.firstName } : null,
      displayUser: displayUser ? { id: displayUser.id } : null
    });
  }
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let displayName = null;
  
  if (telegramUser) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å telegramUser, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    displayName = telegramUser.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram';
  } else if (realUser) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å realUser, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    if (realUser.firstName) {
      displayName = realUser.lastName 
        ? `${realUser.firstName} ${realUser.lastName}`
        : realUser.firstName;
    } else {
      displayName = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }
  }
  
  if (import.meta.env.DEV) {
    console.log('üîç ProfileHeader: displayName calculation:', {
      telegramUser: !!telegramUser,
      realUser: !!realUser,
      displayName
    });
  }

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è username
  let displayUsername = null;
  
  if (telegramUser) {
    displayUsername = telegramUser.username;
  } else if (realUser) {
    displayUsername = realUser.username;
  }
  
  if (import.meta.env.DEV) {
    console.log('üîç ProfileHeader: displayUsername calculation:', {
      telegramUser: !!telegramUser,
      realUser: !!realUser,
      displayUsername
    });
  }

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ç–æ
  const displayPhoto = telegramUser?.photo_url || null;
  
  if (import.meta.env.DEV) {
    console.log('üîç ProfileHeader: displayPhoto calculation:', {
      telegramUser: !!telegramUser,
      hasPhoto: !!displayPhoto
    });
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –µ—Å–ª–∏ –µ—Å—Ç—å telegramUser –ò–õ–ò userId > 0
  // –ù–û –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å hash === 'telegram_mini_apps_temp_hash') –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏
  const isAuthorized = !!(telegramUser || (userId && userId > 0)) && 
    !(telegramUser?.hash === 'telegram_mini_apps_temp_hash');
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –≤ development)
  if (import.meta.env.DEV) {
    console.log('üîç ProfileHeader Debug:', {
      telegramUser,
      userId,
      isAuthorized,
      displayUser,
      displayName,
      displayUsername
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ Telegram Mini Apps
  const isInTelegramMiniApps = !!window.Telegram?.WebApp;

  // –í Telegram Mini Apps –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Telegram
  // –í –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  // –í –ø—Ä–æ–¥–∞–∫—à–Ω –≤–µ—Ä—Å–∏–∏ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const shouldShowAuthBlock = !isAuthorized && (!isInTelegramMiniApps || import.meta.env.PROD);

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ (—Ç–æ–ª—å–∫–æ –≤ development)
  if (import.meta.env.DEV) {
    console.log('üîç ProfileHeader: Rendering with state:', {
      telegramUser,
      userId,
      isAuthorized,
      displayUser,
      displayName,
      displayUsername,
      realUser
    });
  }

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –≤–µ—Ä—Å–∏–∏
  if (import.meta.env.PROD) {
    console.log('üîç ProfileHeader PRODUCTION: Rendering with state:', {
      telegramUser: telegramUser ? { id: telegramUser.id, first_name: telegramUser.first_name, hash: telegramUser.hash } : null,
      userId,
      isAuthorized,
      isInTelegramMiniApps,
      shouldShowAuthBlock,
      displayUser: displayUser ? { id: displayUser.id } : null
    });
  }

  return (
    <div className="w-full">
      <div className="bg-white rounded-lg shadow-sm border p-4 mb-4">
        <div className="flex items-center justify-between">
          {isAuthorized ? ( 
            <div className="flex items-center space-x-3">
              <Avatar className="h-10 w-10">
                <AvatarImage src={displayPhoto} />
                <AvatarFallback className="bg-blue-100 text-blue-600">
                  {displayName ? (
                    displayName.charAt(0).toUpperCase()
                  ) : (
                    <User className="h-5 w-5" />
                  )}
                </AvatarFallback>
              </Avatar>

              <div className="flex flex-col">
                <span className="font-semibold text-gray-900">
                  {isAuthorized ? (displayName || t('common.user')) : t('common.notAuthorized')}
                </span>
                <span className="text-sm text-gray-500">
                  {isAuthorized 
                    ? (displayUsername ? `@${displayUsername}` : `ID: ${userId}`)
                    : t('common.notAuthorized')
                  }
                </span>
                <span className="text-xs text-gray-400">
                  {isLoading
                    ? t('common.loading')
                    : isAuthorized
                    ? (telegramUser ? t('common.telegram') : '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
                    : t('common.notAuthorized')}
                </span>
              </div>
            </div>
          ) : (
            <div className="text-center">
              {shouldShowAuthBlock && (
                <div className="flex flex-col items-center space-y-2">
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">
                    –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç
                  </h3>
                  <p className="text-gray-600 text-center mb-4 max-w-xs">
                    –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram
                  </p>
                  <TelegramOAuthButton
                    onAuth={handleTelegramAuth}
                    className="w-full max-w-xs"
                    size="lg"
                  />
                </div>
              )}
            </div>
          )}
          
          <div className="flex items-center space-x-2">
            {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ - —Å–∫—Ä—ã—Ç—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
            <div className="hidden md:flex items-center space-x-2">
              {isAuthorized && (
                <>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => navigate('/notifications')}
                    className="text-gray-500 hover:text-gray-700"
                    title={t('common.notifications')}
                  >
                    <Bell className="h-5 w-5" />
                  </Button>

                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => navigate('/profile')}
                    className="text-gray-500 hover:text-gray-700"
                    title={t('common.settings')}
                  >
                    <Settings className="h-5 w-5" />
                  </Button>
                </>
              )}
            </div>
            
            {/* –Ø–∑—ã–∫–æ–≤–æ–µ –º–µ–Ω—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–µ–∑–¥–µ */}
            <LanguageSelector />
            
            {/* –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
            {isAuthorized && (
              <Button 
                variant="ghost"
                size="sm"
                onClick={handleLogout}
                className="text-gray-500 hover:text-gray-700"
                title={t('common.logout')}
              >
                <LogOut className="h-5 w-5" />
              </Button>
            )}
          </div>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Telegram Mini Apps - —Å–∫—Ä—ã—Ç–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ */}
        {import.meta.env.DEV && isInTelegramMiniApps && !isAuthorized && (
          <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
            <div className="text-center">
              <p className="text-sm text-blue-800 mb-2">
                üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SuperMock!
              </p>
              <p className="text-xs text-blue-600">
                –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Telegram. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.
              </p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
