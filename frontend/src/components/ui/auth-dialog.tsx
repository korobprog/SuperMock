import { useState, useEffect } from 'react';
import { User } from 'lucide-react';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { TelegramLogin, TelegramWebLogin } from '@/components/ui/telegram-login';
import { useAppStore } from '@/lib/store';
import {
  TelegramUser,
  saveTelegramUser,
  loadTelegramUser,
  getTelegramUserDisplayName,
  validateTelegramAuth,
} from '@/lib/telegram-auth';
import { apiValidateTelegramAuth } from '@/lib/api';
import { createApiUrl } from '@/lib/config';
import { toast } from 'sonner';

interface AuthDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function AuthDialog({ open, onOpenChange }: AuthDialogProps) {
  const [isLoading, setIsLoading] = useState(false);
  const [isBotAvailable, setIsBotAvailable] = useState(false);
  const {
    setUserId: setStoreUserId,
    setTelegramUser,
    telegramUser,
  } = useAppStore();

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
  const isDesktop =
    !navigator.userAgent.includes('Mobile') &&
    !navigator.userAgent.includes('Android') &&
    !navigator.userAgent.includes('iPhone') &&
    !navigator.userAgent.includes('iPad');

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ
  const isProduction =
    import.meta.env.PROD &&
    !import.meta.env.VITE_API_URL?.includes('127.0.0.1');

  console.log('üîß Auth Dialog Debug:', {
    PROD: import.meta.env.PROD,
    VITE_API_URL: import.meta.env.VITE_API_URL,
    VITE_TELEGRAM_BOT_NAME: import.meta.env.VITE_TELEGRAM_BOT_NAME,
    isProduction,
    isBotAvailable,
    isDesktop,
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞
  const checkBotAvailability = async () => {
    console.log('Checking bot availability...');
    console.log(
      'VITE_TELEGRAM_BOT_NAME:',
      import.meta.env.VITE_TELEGRAM_BOT_NAME
    );

    if (!import.meta.env.VITE_TELEGRAM_BOT_NAME) {
      console.log('No bot name configured, setting available to false');
      setIsBotAvailable(false);
      return;
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –Ω–∞—à API
      console.log('Fetching /api/telegram-bot-check...');
      const response = await fetch(createApiUrl('/api/telegram-bot-check'));
      const data = await response.json();
      console.log('Bot check response:', data);
      setIsBotAvailable(data.available);
    } catch (error) {
      console.warn('Bot availability check failed:', error);
      setIsBotAvailable(false);
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞
  useEffect(() => {
    if (open) {
      console.log('üîß Auth dialog opened');
      console.log('üîß Environment variables:', {
        VITE_TELEGRAM_BOT_NAME: import.meta.env.VITE_TELEGRAM_BOT_NAME,
        VITE_TELEGRAM_BOT_ID: import.meta.env.VITE_TELEGRAM_BOT_ID,
        NODE_ENV: import.meta.env.NODE_ENV,
      });

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
      if (telegramUser) {
        console.log('User already authenticated, closing dialog');
        onOpenChange(false);
        return;
      }

      const savedUser = loadTelegramUser();
      console.log('Auth dialog opened, checking saved user:', savedUser);
      if (savedUser) {
        console.log('Found saved user, setting in store and closing dialog');
        setTelegramUser(savedUser);
        toast.success(
          `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, ${getTelegramUserDisplayName(savedUser)}!`
        );
        onOpenChange(false);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ URL (callback –æ—Ç Telegram OAuth)
      const urlParams = new URLSearchParams(window.location.search);
      const telegramAuthData = urlParams.get('tgAuth');

      if (telegramAuthData) {
        try {
          console.log('üîß Found auth data in URL, processing...');
          const userData = JSON.parse(decodeURIComponent(telegramAuthData));
          console.log('üîß Parsed user data:', userData);
          handleTelegramAuth(userData);

          // –û—á–∏—â–∞–µ–º URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          const newUrl = new URL(window.location.href);
          newUrl.searchParams.delete('tgAuth');
          window.history.replaceState({}, '', newUrl.toString());
        } catch (error) {
          console.error('üîß Error parsing auth data:', error);
          toast.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }
      }
    }
  }, [open, setTelegramUser, onOpenChange, telegramUser]);

  const handleTelegramAuth = async (user: TelegramUser) => {
    console.log('üîê Telegram auth started with user:', user);
    console.log('üîê User details:', {
      id: user.id,
      first_name: user.first_name,
      last_name: user.last_name,
      username: user.username,
      photo_url: user.photo_url,
      auth_date: user.auth_date,
      hash: user.hash,
    });

    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      setIsLoading(true);

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      if (!validateTelegramAuth(user)) {
        console.error('Local validation failed for user:', user);
        toast.error(
          '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.'
        );
        return;
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
      console.log('Validating telegram auth on server...');
      try {
        const result = await apiValidateTelegramAuth(user);
        console.log('Server validation result:', result);

        if (result.success) {
          // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          console.log('Initializing user in database...');
          const initResponse = await fetch(createApiUrl('/api/init'), {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              tg: user,
              language: 'ru',
              initData: 'telegram_auth_hash'
            })
          });
          
          if (initResponse.ok) {
            const initData = await initResponse.json();
            console.log('User initialized in database:', initData);
          } else {
            console.error('Failed to initialize user in database');
          }
        } else {
          console.error(
            'Server validation failed, but continuing with local auth:',
            result
          );
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–æ–∑–≤–æ–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
          toast.warning(
            '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ. –°–µ—Ä–≤–µ—Ä–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.'
          );
        }
      } catch (serverError) {
        console.error(
          'Server validation error, continuing with local auth:',
          serverError
        );
        toast.warning('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ.');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('Saving telegram user data...');
      saveTelegramUser(user);
      setTelegramUser(user);

      console.log('Telegram auth completed successfully');
      toast.success(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${getTelegramUserDisplayName(user)}!`);
      onOpenChange(false);
    } catch (error) {
      console.error('Telegram auth error:', error);

      // –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (error instanceof Error) {
        if (error.message.includes('Failed to fetch')) {
          toast.error(
            '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.'
          );
        } else if (error.message.includes('Invalid Telegram authorization')) {
          toast.error(
            '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
          );
        } else {
          toast.error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
        }
      } else {
        toast.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram');
      }
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md w-[95vw] max-w-[400px] mx-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center">
            <User className="mr-2 w-5 h-5" />
            –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
          </DialogTitle>
          <DialogDescription>
            {isProduction
              ? '–í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –≤ –æ–±–ª–∞–∫–µ'
              : '–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏—é –∏–Ω—Ç–µ—Ä–≤—å—é –≤ –æ–±–ª–∞–∫–µ'}
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          {/* Telegram Authorization */}
          <div className="space-y-3">
            <div className="text-center">
              <h4 className="text-sm font-medium mb-2">–ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥</h4>
              <div className="flex justify-center w-full">
                {isLoading ? (
                  <div className="flex items-center justify-center w-full h-12 border border-gray-300 rounded-lg">
                    <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
                    <span className="ml-2 text-sm">–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...</span>
                  </div>
                ) : import.meta.env.VITE_TELEGRAM_BOT_NAME ? (
                  // –ù–∞—Å—Ç–æ—è—â–∞—è –∫–Ω–æ–ø–∫–∞ Telegram (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –∏–º—è –±–æ—Ç–∞)
                  <>
                    {console.log('üîß Rendering real Telegram button')}
                    {isProduction ? (
                      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±-–≤–µ—Ä—Å–∏—é –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                      <TelegramWebLogin
                        botName={import.meta.env.VITE_TELEGRAM_BOT_NAME}
                        onAuth={handleTelegramAuth}
                        className="w-full"
                      />
                    ) : (
                      // –í dev —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –≤–∏–¥–∂–µ—Ç
                      <TelegramLogin
                        botName={import.meta.env.VITE_TELEGRAM_BOT_NAME}
                        onAuth={handleTelegramAuth}
                        className="w-full"
                      />
                    )}
                  </>
                ) : (
                  // –ï—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                  <>
                    {console.log('üîß Rendering unavailable message')}
                    <div className="w-full h-12 border border-gray-300 rounded-lg flex items-center justify-center">
                      <span className="text-sm text-muted-foreground">
                        Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                      </span>
                    </div>
                  </>
                )}
              </div>
              <p className="text-xs text-muted-foreground mt-2">
                {import.meta.env.VITE_TELEGRAM_BOT_NAME
                  ? '–í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏ –∞–≤–∞—Ç–∞—Ä–∞'
                  : '–í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram'}
              </p>
            </div>
          </div>

          {/* –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç–æ–π –±–ª–æ–∫ –¥–ª—è production —Ä–µ–∂–∏–º–∞ */}

          <div className="bg-blue-50 dark:bg-blue-950/20 border border-blue-200 dark:border-blue-800 rounded-lg p-3">
            <h4 className="text-sm font-medium text-blue-900 dark:text-blue-100 mb-2">
              –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:
            </h4>
            <ul className="text-xs text-blue-800 dark:text-blue-200 space-y-1">
              <li>‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏</li>
              <li>‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é –≤ –æ–±–ª–∞–∫–µ</li>
              <li>‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö</li>
              <li>‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</li>
            </ul>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
