import React, { useEffect, useRef, useState } from 'react';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
export interface TelegramUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  photo_url?: string;
  auth_date: number;
  hash: string;
}

// –ü—Ä–æ–ø—Å—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
interface TelegramLoginWidgetProps {
  botName: string;
  onAuth: (user: TelegramUser) => void;
  onError?: (error: string) => void;
  className?: string;
  dataOnauth?: string;
  requestAccess?: boolean;
  usePic?: boolean;
  cornerRadius?: number;
  lang?: string;
}

/**
 * Telegram Login Widget - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
 * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://core.telegram.org/widgets/login
 */
export function TelegramLoginWidget({
  botName,
  onAuth,
  onError,
  className = '',
  dataOnauth = '/auth/telegram/callback', // Fixed: Use relative path to match backend
  requestAccess = true,
  usePic = true,
  cornerRadius = 8,
  lang = 'ru'
}: TelegramLoginWidgetProps) {
  const widgetRef = useRef<HTMLDivElement>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [loadError, setLoadError] = useState<string | null>(null);

  useEffect(() => {
    console.log('üîß TelegramLoginWidget: Initializing with bot:', botName);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ —Å–∫—Ä–∏–ø—Ç
    if ((window as any).TelegramLoginWidget) {
      console.log('‚úÖ Telegram widget script already loaded');
      setIsLoading(false);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Å–∫—Ä–∏–ø—Ç
    if (document.querySelector('script[src*="telegram-widget.js"]')) {
      console.log('‚è≥ Telegram widget script already loading...');
      return;
    }

    console.log('üì• Loading Telegram widget script...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º Telegram Login Widget —Å–∫—Ä–∏–ø—Ç
    const script = document.createElement('script');
    script.src = 'https://telegram.org/js/telegram-widget.js?22';
    script.async = true;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
    script.setAttribute('data-telegram-login', botName);
    script.setAttribute('data-size', 'large');
    script.setAttribute('data-onauth', dataOnauth);
    script.setAttribute('data-request-access', requestAccess ? 'write' : 'read');
    script.setAttribute('data-use-pic', usePic ? 'true' : 'false');
    script.setAttribute('data-radius', cornerRadius.toString());
    script.setAttribute('data-lang', lang);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    script.onload = () => {
      console.log('‚úÖ Telegram widget script loaded successfully');
      console.log('üîß Widget attributes:', {
        botName,
        dataOnauth,
        requestAccess,
        usePic,
        cornerRadius,
        lang
      });
      setIsLoading(false);
      setLoadError(null);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback
      (window as any).onTelegramAuth = (user: TelegramUser) => {
        console.log('‚úÖ Telegram auth successful:', user);
        onAuth(user);
      };
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    script.onerror = () => {
      const errorMsg = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Telegram Login Widget';
      console.error('‚ùå Telegram widget script load error');
      setIsLoading(false);
      setLoadError(errorMsg);
      onError?.(errorMsg);
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –≤ DOM
    if (widgetRef.current) {
      widgetRef.current.appendChild(script);
      console.log('üìé Script appended to DOM');
    } else {
      console.error('‚ùå Widget ref not available');
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      console.log('üßπ Cleaning up Telegram widget');
      if (widgetRef.current && script.parentNode) {
        script.parentNode.removeChild(script);
      }
      // –£–¥–∞–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      delete (window as any).onTelegramAuth;
    };
  }, [botName, dataOnauth, requestAccess, usePic, cornerRadius, lang, onAuth, onError]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
  if (loadError) {
    return (
      <div className={`telegram-login-widget-error ${className}`}>
        <div className="flex items-center justify-center p-4 text-red-600 border border-red-200 rounded-lg">
          <div className="text-center">
            <div className="text-sm font-medium mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–∂–µ—Ç–∞</div>
            <button 
              onClick={() => window.location.reload()} 
              className="text-xs text-blue-600 hover:underline"
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div 
      ref={widgetRef} 
      className={`telegram-login-widget ${className}`}
      style={{ minHeight: '40px' }}
    >
      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ —Å–∫—Ä–∏–ø—Ç –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è */}
      {isLoading && (
        <div className="flex items-center justify-center p-4 text-gray-500">
          <div className="animate-pulse">
            <div className="w-8 h-8 bg-gray-200 rounded-full mb-2"></div>
            <div className="w-32 h-4 bg-gray-200 rounded"></div>
          </div>
        </div>
      )}
    </div>
  );
}

/**
 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å iframe –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ —Å–∫—Ä–∏–ø—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
 */
export function TelegramLoginWidgetFallback({
  botName,
  onAuth,
  onError,
  className = '',
  dataOnauth = 'https://app.supermock.ru/auth/callback',
  requestAccess = true,
  usePic = true,
  cornerRadius = 8,
  lang = 'ru'
}: TelegramLoginWidgetProps) {
  const iframeUrl = `https://oauth.telegram.org/auth?bot_id=${botName}&origin=${encodeURIComponent(window.location.origin)}&return_to=${encodeURIComponent(dataOnauth)}&request_access=${requestAccess ? 'write' : 'read'}&use_pic=${usePic ? '1' : '0'}&radius=${cornerRadius}&lang=${lang}`;

  return (
    <div className={`telegram-login-widget-fallback ${className}`}>
      <iframe
        src={iframeUrl}
        width="300"
        height="40"
        frameBorder="0"
        scrolling="no"
        title="Telegram Login"
        className="border-0 rounded-lg"
      />
    </div>
  );
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback
 */
export function TelegramLoginWidgetMain(props: TelegramLoginWidgetProps) {
  const [useFallback, setUseFallback] = React.useState(false);

  React.useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ Telegram Login Widget
    const checkSupport = () => {
      const testScript = document.createElement('script');
      testScript.src = 'https://telegram.org/js/telegram-widget.js?22';
      testScript.onload = () => setUseFallback(false);
      testScript.onerror = () => setUseFallback(true);
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç
      setTimeout(() => {
        if (testScript.parentNode) {
          testScript.parentNode.removeChild(testScript);
        }
      }, 1000);
    };

    checkSupport();
  }, []);

  if (useFallback) {
    return <TelegramLoginWidgetFallback {...props} />;
  }

  return <TelegramLoginWidget {...props} />;
}

export default TelegramLoginWidgetMain;
