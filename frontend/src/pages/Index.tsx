import { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { ProfileHeader } from '@/components/ui/profile-header';
import { MainMenu } from '@/components/ui/main-menu';
import { MobileBottomMenu } from '@/components/ui/mobile-bottom-menu';
import { useNavigate } from 'react-router-dom';
import { useAppStore } from '@/lib/store';
import { useAppTranslation } from '@/lib/i18n';
import { Logo } from '@/components/ui/logo';
import { StyledSubtitle } from '@/components/ui/styled-subtitle';
import {
  detectUserLanguage,
  saveAndApplyLanguage,
  SupportedLanguage,
} from '@/lib/language-detection';
import {
  loadTelegramUser,
  clearTelegramUser,
  forceLogoutFromTelegram,
  saveTelegramUser,
} from '@/lib/telegram-auth';
import { useTelegramFullscreen } from '@/hooks/use-telegram-fullscreen';
import { DevBanner } from '@/components/ui/dev-banner';
import { 
  getActiveDevTestAccount, 
  isDevTestAccountsEnabled, 
  getDevTestAccounts,
  applyDevTestAccount,
  clearDevTestAccount
} from '@/lib/dev-test-account';

const Index = () => {
  const [isLanguageDetected, setIsLanguageDetected] = useState(false);
  const [demoUserState, setDemoUserState] = useState(getActiveDevTestAccount() ? 'enabled' : 'disabled');
  const { t } = useAppTranslation();
  const { i18n } = useTranslation();
  const { setUserId, setLanguage, setTelegramUser, telegramUser, setRole, setProfession } =
    useAppStore();

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤ Telegram Mini Apps
  useTelegramFullscreen();

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    async function initializeApp() {
      try {
        console.log('üöÄ Starting app initialization...');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
        let detectedLanguage: SupportedLanguage;
        
        if (import.meta.env.DEV) {
          // –í dev —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π fallback
          console.log('üîß Dev mode: using instant language fallback');
          detectedLanguage = 'ru';
        } else {
          // –í production –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
          const languagePromise = detectUserLanguage();
          const timeoutPromise = new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Language detection timeout')), 10000)
          );
          
          detectedLanguage = await Promise.race([languagePromise, timeoutPromise]) as SupportedLanguage;
        }
        
        saveAndApplyLanguage(detectedLanguage, i18n, setLanguage);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ
        const justLoggedOut = sessionStorage.getItem('just_logged_out');
        const logoutTimestamp = sessionStorage.getItem('logout_timestamp');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ –±–æ–ª—å—à–µ —á–∞—Å–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –≤—ã—Ö–æ–¥–∞
        const isRecentlyLoggedOut =
          justLoggedOut &&
          logoutTimestamp &&
          Date.now() - parseInt(logoutTimestamp) < 60 * 60 * 1000; // 1 —á–∞—Å

        if (!isRecentlyLoggedOut) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram Mini Apps –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å (–±–æ–ª–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ)
          if (window.Telegram?.WebApp?.initDataUnsafe?.user) {
            const tgUser = window.Telegram.WebApp.initDataUnsafe.user;
            console.log('Telegram Mini Apps user detected:', tgUser);

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram Mini Apps
            const telegramUser = {
              id: tgUser.id,
              first_name: tgUser.first_name,
              last_name: tgUser.last_name || '',
              username: tgUser.username || '',
              photo_url: tgUser.photo_url || '',
              auth_date: Math.floor(Date.now() / 1000),
              hash: 'telegram_mini_apps_hash',
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            saveTelegramUser(telegramUser);
            setTelegramUser(telegramUser);
            // –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º userId –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è race condition
            setTimeout(() => {
              setUserId(telegramUser.id);
            }, 0);
          } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ development —Ä–µ–∂–∏–º–µ
            if (isDevTestAccountsEnabled()) {
              const testAccount = getActiveDevTestAccount();
              if (testAccount) {
                              console.log('Dev test account detected:', testAccount);
              setTelegramUser(testAccount.telegramUser);
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è race condition
              setTimeout(() => {
                setUserId(testAccount.userId);
                setRole(testAccount.role);
                setProfession(testAccount.profession);
                setLanguage(testAccount.language);
              }, 0);
                return; // –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
              }
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –∏–∑ localStorage —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç Telegram WebApp –∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            const savedTelegramUser = loadTelegramUser();
            if (savedTelegramUser) {
              console.log('–ó–∞–≥—Ä—É–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram:', savedTelegramUser);
              setTelegramUser(savedTelegramUser);
              // –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º userId –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è race condition
              setTimeout(() => {
                setUserId(savedTelegramUser.id);
              }, 0);
            } else {
              console.log('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram');
              // –û—á–∏—â–∞–µ–º userId –µ—Å–ª–∏ –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
              setUserId(0);
            }
          }
        } else {
          // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ –≤—ã—Ö–æ–¥–∞
          sessionStorage.removeItem('just_logged_out');
          sessionStorage.removeItem('logout_timestamp');
          console.log('User recently logged out, not loading Telegram data');

          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ store –∏ localStorage
          setTelegramUser(null);
          setUserId(0);
          localStorage.removeItem('Super Mock-storage');
          localStorage.removeItem('telegram_user');
        }

        setIsLanguageDetected(true);
      } catch (error) {
        console.error('App initialization error:', error);
        // Fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        saveAndApplyLanguage('ru', i18n, setLanguage);
        setIsLanguageDetected(true);
      }
    }

    initializeApp();
  }, [i18n, setLanguage]);

  const handleLogout = () => {
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ Telegram –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    if (telegramUser) {
      clearTelegramUser();
      setTelegramUser(null);
    }
    setUserId(0);

    // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    localStorage.removeItem('Super Mock-storage');
    localStorage.removeItem('telegram_user');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –≤—ã—Ö–æ–¥–∞
    sessionStorage.setItem('just_logged_out', 'true');
    sessionStorage.setItem('logout_timestamp', Date.now().toString());

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ Telegram Mini Apps
    forceLogoutFromTelegram();
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setTimeout(() => {
      window.location.reload();
    }, 100);
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –ø–æ–∫–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —è–∑—ã–∫
  if (!isLanguageDetected) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-background to-telegram-light-gray p-4 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">
            {t('common.detectingLanguage')}
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-background to-telegram-light-gray p-3 sm:p-5 pb-24 md:pb-5">
      <div className="max-w-4xl mx-auto pt-16 sm:pt-20">
        {/* Header */}
        <div className="text-center mb-6">
          <div className="flex justify-center mb-4">
            <Logo size="lg" className="mb-1" clickable={true} />
          </div>
          <StyledSubtitle variant="tech" size="sm">
            {t('common.platformSubtitle')}
          </StyledSubtitle>
        </div>

        {/* Profile Header */}
        <ProfileHeader />

        {/* Main Menu */}
        <MainMenu />
        {
          import.meta.env.DEV && (
            <div className="mt-6">
              <DevBanner />
              {/* Quick Demo User Toggle */}
                             <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                 <h3 className="text-sm font-medium text-blue-800 mb-2">üß™ –ë—ã—Å—Ç—Ä–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>
                                    <div className="mb-2 text-xs text-blue-600">
                     –°—Ç–∞—Ç—É—Å: {demoUserState === 'enabled' ? '‚úÖ –î–µ–º–æ –≤–∫–ª—é—á–µ–Ω' : '‚ùå –î–µ–º–æ –≤—ã–∫–ª—é—á–µ–Ω'}
                   </div>
                 <div className="flex gap-2">
                                     <button
                     onClick={() => {
                       const testAccount = getDevTestAccounts()[0];
                       if (testAccount) {
                         console.log('üß™ Enabling demo user:', testAccount);
                         applyDevTestAccount(testAccount);
                         setTelegramUser(testAccount.telegramUser);
                         setUserId(testAccount.userId);
                         setRole(testAccount.role);
                         setProfession(testAccount.profession);
                         setLanguage(testAccount.language);
                         setDemoUserState('enabled');
                         // –ù–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É - –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                         console.log('‚úÖ Demo user enabled successfully');
                       }
                     }}
                     className="px-3 py-1 bg-green-500 text-white text-xs rounded hover:bg-green-600"
                   >
                     –í–∫–ª—é—á–∏—Ç—å –¥–µ–º–æ
                   </button>
                   <button
                     onClick={() => {
                       console.log('üß™ Clearing demo user');
                       clearDevTestAccount();
                       setTelegramUser(null);
                       setUserId(0);
                       setRole(null);
                       setProfession(null);
                       setLanguage('ru');
                       setDemoUserState('disabled');
                       // –ù–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É - –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                       console.log('‚úÖ Demo user cleared successfully');
                     }}
                     className="px-3 py-1 bg-red-500 text-white text-xs rounded hover:bg-red-600"
                   >
                                          –û—á–∏—Å—Ç–∏—Ç—å –¥–µ–º–æ
                   </button>
                   {demoUserState === 'enabled' && (
                     <button
                       onClick={() => {
                         console.log('üß™ Testing smart navigation');
                         // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–º–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                         window.location.href = '/';
                       }}
                       className="px-3 py-1 bg-purple-500 text-white text-xs rounded hover:bg-purple-600"
                     >
                       –¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                     </button>
                   )}
                 </div>
               </div>
            </div>
          )
        }
        {/* –£–¥–∞–ª–µ–Ω–æ */}
      </div>

      {/* Mobile Bottom Menu */}
      <MobileBottomMenu />
    </div>
  );
};

export default Index;
