import React, { useEffect, useState } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { useAppStore } from '@/lib/store';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { CheckCircle, XCircle, Loader2 } from 'lucide-react';
import { TelegramUser } from '@/lib/telegram-auth';
import { createApiUrl } from '@/lib/config';

// –†–∞—Å—à–∏—Ä—è–µ–º Window interface –¥–ª—è authHeaders
declare global {
  interface Window {
    authHeaders?: {
      Authorization?: string;
    };
  }
}

export default function AuthCallback() {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const { setUserId, setTelegramUser } = useAppStore();
  
  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading');
  const [message, setMessage] = useState('');

  useEffect(() => {
    const processAuth = async () => {
      try {
        console.log('üîê Processing Telegram auth callback...');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—ç—à–∞ URL (Telegram OAuth –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ö—ç—à–µ)
        const hash = window.location.hash;
        console.log('üîê Hash from URL:', hash);
        
        if (!hash || !hash.includes('tgAuthResult=')) {
          // Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
          const token = searchParams.get('token');
          const userId = searchParams.get('userId');
          
          if (!token || !userId) {
            setStatus('error');
            setMessage('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            return;
          }

          console.log('üîê Using query params:', { token: token ? 'present' : 'missing', userId });

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
          localStorage.setItem('authToken', token);
          localStorage.setItem('userId', userId);
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤—Å–µ—Ö –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
          if (window.authHeaders) {
            window.authHeaders.Authorization = `Bearer ${token}`;
          } else {
            window.authHeaders = { Authorization: `Bearer ${token}` };
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º userId –≤ store
          setUserId(Number(userId));
          
          setStatus('success');
          setMessage('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
          
          // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          setTimeout(() => {
            navigate('/');
          }, 2000);
          
          return;
        }

        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—ç—à–∞
        const tgAuthResult = hash.split('tgAuthResult=')[1];
        if (!tgAuthResult) {
          setStatus('error');
          setMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ URL');
          return;
        }

        console.log('üîê tgAuthResult from hash:', tgAuthResult);

        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –ø–∞—Ä—Å–∏–º JSON
        let telegramUser: TelegramUser;
        try {
          telegramUser = JSON.parse(decodeURIComponent(tgAuthResult));
          console.log('üîê Parsed Telegram user:', telegramUser);
        } catch (parseError) {
          console.error('Error parsing tgAuthResult:', parseError);
          setStatus('error');
          setMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!telegramUser.id || !telegramUser.first_name) {
          setStatus('error');
          setMessage('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ–ø–æ–ª–Ω—ã–µ');
          return;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try {
          console.log('üîê Initializing user in database...');
          const initResponse = await fetch(createApiUrl('/api/init'), {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              tg: telegramUser,
              language: 'ru',
              initData: 'telegram_oauth_hash'
            })
          });
          
          if (initResponse.ok) {
            const initData = await initResponse.json();
            console.log('‚úÖ User initialized in database:', initData);
          } else {
            console.warn('‚ö†Ô∏è Failed to initialize user in database, but continuing...');
          }
        } catch (initError) {
          console.warn('‚ö†Ô∏è Error initializing user in database:', initError);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –≤ store
        setTelegramUser(telegramUser);
        setUserId(telegramUser.id);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        localStorage.setItem('telegram_user', JSON.stringify(telegramUser));
        localStorage.setItem('userId', telegramUser.id.toString());
        
        console.log('‚úÖ Telegram user saved to store and localStorage');
        
        setStatus('success');
        setMessage('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
        
        // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        setTimeout(() => {
          navigate('/');
        }, 2000);
        
      } catch (error) {
        console.error('Error processing auth callback:', error);
        setStatus('error');
        setMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }
    };

    processAuth();
  }, [searchParams, navigate, setUserId, setTelegramUser]);

  const renderContent = () => {
    switch (status) {
      case 'loading':
        return (
          <div className="text-center">
            <Loader2 className="h-16 w-16 text-blue-500 mx-auto mb-4 animate-spin" />
            <h2 className="text-xl font-semibold text-gray-900 mb-2">
              –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...
            </h2>
            <p className="text-gray-600">
              –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ
            </p>
          </div>
        );
      
      case 'success':
        return (
          <div className="text-center">
            <CheckCircle className="h-16 w-16 text-green-500 mx-auto mb-4" />
            <h2 className="text-xl font-semibold text-gray-900 mb-2">
              –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!
            </h2>
            <p className="text-gray-600 mb-4">
              {message}
            </p>

            <p className="text-sm text-gray-500">
              –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...
            </p>
          </div>
        );
      
      case 'error':
        return (
          <div className="text-center">
            <XCircle className="h-16 w-16 text-red-500 mx-auto mb-4" />
            <h2 className="text-xl font-semibold text-gray-900 mb-2">
              –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            </h2>
            <p className="text-gray-600 mb-4">
              {message}
            </p>
            <div className="space-y-2">
              <Button onClick={() => navigate('/')} className="w-full">
                –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
              </Button>
              <Button 
                onClick={() => window.location.reload()} 
                variant="outline" 
                className="w-full"
              >
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </Button>
            </div>
          </div>
        );
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <CardTitle>Telegram –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</CardTitle>
          <CardDescription>
            –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram
          </CardDescription>
        </CardHeader>
        <CardContent>
          {renderContent()}
        </CardContent>
      </Card>
    </div>
  );
}
