import { useNavigate } from 'react-router-dom';
import { ArrowLeft, BookOpen, Search, Filter, Star, Clock, Users, TrendingUp } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { useAppTranslation } from '@/lib/i18n';
import { Logo } from '@/components/ui/logo';
import { ProfileHeader } from '@/components/ui/profile-header';
import { MobileBottomMenu } from '@/components/ui/mobile-bottom-menu';
import { useAppStore } from '@/lib/store';

export function Materials() {
  const navigate = useNavigate();
  const { t } = useAppTranslation();
  const profession = useAppStore((s) => s.profession);

  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getProfessionName = () => {
    if (!profession) return '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞';
    return t(`profession.${profession}`).toLowerCase();
  };

  const handleBack = () => {
    navigate('/applications');
  };

  // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  const materialsData = {
    categories: [
      {
        id: 'interview-questions',
        name: '–í–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏',
        count: 156,
        icon: 'üí¨',
        color: 'bg-blue-100 text-blue-800',
      },
      {
        id: 'technical-tasks',
        name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è',
        count: 89,
        icon: '‚ö°',
        color: 'bg-green-100 text-green-800',
      },
      {
        id: 'system-design',
        name: '–°–∏—Å—Ç–µ–º–Ω—ã–π –¥–∏–∑–∞–π–Ω',
        count: 34,
        icon: 'üèóÔ∏è',
        color: 'bg-purple-100 text-purple-800',
      },
      {
        id: 'behavioral',
        name: '–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã',
        count: 67,
        icon: 'üß†',
        color: 'bg-orange-100 text-orange-800',
      },
      {
        id: 'algorithms',
        name: '–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö',
        count: 123,
        icon: 'üìä',
        color: 'bg-red-100 text-red-800',
      },
      {
        id: 'best-practices',
        name: '–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏',
        count: 78,
        icon: '‚≠ê',
        color: 'bg-yellow-100 text-yellow-800',
      },
    ],
    popularMaterials: [
      {
        id: 1,
        title: '–¢–æ–ø-50 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ JavaScript',
        description: '–°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è—Ö –ø–æ JavaScript —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏',
        category: 'interview-questions',
        difficulty: '–°—Ä–µ–¥–Ω–∏–π',
        readTime: 15,
        rating: 4.8,
        reads: 1247,
        tags: ['JavaScript', '–û—Å–Ω–æ–≤—ã', 'ES6+'],
        isNew: false,
        isPopular: true,
      },
      {
        id: 2,
        title: 'React Hooks: –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ',
        description: '–ì–ª—É–±–æ–∫–∏–π —Ä–∞–∑–±–æ—Ä –≤—Å–µ—Ö —Ö—É–∫–æ–≤ React —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
        category: 'best-practices',
        difficulty: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
        readTime: 25,
        rating: 4.9,
        reads: 892,
        tags: ['React', 'Hooks', 'Frontend'],
        isNew: true,
        isPopular: true,
      },
      {
        id: 3,
        title: '–°–∏—Å—Ç–µ–º–Ω—ã–π –¥–∏–∑–∞–π–Ω: –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
        description: '–ü—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º',
        category: 'system-design',
        difficulty: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
        readTime: 40,
        rating: 4.7,
        reads: 567,
        tags: ['–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', '–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ', 'Backend'],
        isNew: false,
        isPopular: false,
      },
      {
        id: 4,
        title: '–ê–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–∏—Å–∫–∞',
        description: '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞',
        category: 'algorithms',
        difficulty: '–°—Ä–µ–¥–Ω–∏–π',
        readTime: 30,
        rating: 4.6,
        reads: 734,
        tags: ['–ê–ª–≥–æ—Ä–∏—Ç–º—ã', '–°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö', '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è'],
        isNew: false,
        isPopular: true,
      },
      {
        id: 5,
        title: '–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã: –∫–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å',
        description: '–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö, –ª–∏–¥–µ—Ä—Å—Ç–≤–µ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö',
        category: 'behavioral',
        difficulty: '–ù–∞—á–∞–ª—å–Ω—ã–π',
        readTime: 20,
        rating: 4.5,
        reads: 445,
        tags: ['Soft Skills', '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', '–õ–∏–¥–µ—Ä—Å—Ç–≤–æ'],
        isNew: false,
        isPopular: false,
      },
      {
        id: 6,
        title: 'Docker –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤',
        description: '–û—Ç –æ—Å–Ω–æ–≤ –¥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–µ—Ö–Ω–∏–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏',
        category: 'best-practices',
        difficulty: '–°—Ä–µ–¥–Ω–∏–π',
        readTime: 35,
        rating: 4.8,
        reads: 678,
        tags: ['Docker', 'DevOps', '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã'],
        isNew: true,
        isPopular: false,
      },
    ],
    recentMaterials: [
      {
        id: 7,
        title: 'TypeScript: –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–∏–ø—ã',
        description: '–£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ç–∏–ø–æ–≤ TypeScript',
        category: 'interview-questions',
        difficulty: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
        readTime: 18,
        rating: 4.7,
        reads: 234,
        tags: ['TypeScript', '–¢–∏–ø–∏–∑–∞—Ü–∏—è', 'Frontend'],
        isNew: true,
        isPopular: false,
      },
      {
        id: 8,
        title: 'GraphQL vs REST API',
        description: '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é API',
        category: 'best-practices',
        difficulty: '–°—Ä–µ–¥–Ω–∏–π',
        readTime: 22,
        rating: 4.6,
        reads: 189,
        tags: ['API', 'GraphQL', 'REST'],
        isNew: true,
        isPopular: false,
      },
    ],
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case '–ù–∞—á–∞–ª—å–Ω—ã–π':
        return 'bg-green-100 text-green-800';
      case '–°—Ä–µ–¥–Ω–∏–π':
        return 'bg-yellow-100 text-yellow-800';
      case '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-background to-telegram-light-gray p-4 pb-24 md:pb-4">
      <div className="max-w-4xl mx-auto pt-16 sm:pt-20">
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <Button
            variant="ghost"
            size="sm"
            onClick={handleBack}
            className="flex items-center space-x-2 text-muted-foreground hover:text-foreground"
          >
            <ArrowLeft size={20} />
            <span>–ù–∞–∑–∞–¥</span>
          </Button>
          <Logo size="md" clickable={true} />
          <div className="w-20" /> {/* Spacer for centering */}
        </div>

        {/* Profile Header */}
        <ProfileHeader />

        {/* Materials Header */}
        <div className="text-center mb-6">
          <h1 className="text-2xl font-bold text-foreground mb-2">
            –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è {getProfessionName()}
          </h1>
          <p className="text-muted-foreground">
            –í–æ–ø—Ä–æ—Å—ã –∏ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º
          </p>
        </div>

        {/* Search and Filter */}
        <div className="mb-6">
          <div className="flex flex-col sm:flex-row gap-3">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground" size={20} />
              <Input
                placeholder="–ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤..."
                className="pl-10"
              />
            </div>
            <Button variant="outline" className="flex items-center space-x-2">
              <Filter size={16} />
              <span>–§–∏–ª—å—Ç—Ä—ã</span>
            </Button>
          </div>
        </div>

        {/* Categories */}
        <div className="mb-8">
          <h2 className="text-lg font-semibold mb-4">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
            {materialsData.categories.map((category) => (
              <Card key={category.id} className="cursor-pointer hover:shadow-md transition-shadow">
                <CardContent className="p-4">
                  <div className="flex items-center space-x-3">
                    <div className="text-2xl">{category.icon}</div>
                    <div className="flex-1">
                      <h3 className="font-medium text-sm">{category.name}</h3>
                      <p className="text-xs text-muted-foreground">{category.count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        {/* Popular Materials */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-semibold">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</h2>
            <Button variant="ghost" size="sm" className="text-primary">
              –°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ
            </Button>
          </div>
          <div className="space-y-4">
            {materialsData.popularMaterials.map((material) => (
              <Card key={material.id} className="cursor-pointer hover:shadow-md transition-shadow">
                <CardContent className="p-4">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-2 mb-2">
                        <h3 className="font-medium">{material.title}</h3>
                        {material.isNew && (
                          <Badge variant="secondary" className="text-xs">–ù–æ–≤–æ–µ</Badge>
                        )}
                        {material.isPopular && (
                          <Badge className="text-xs bg-orange-100 text-orange-800">–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ</Badge>
                        )}
                      </div>
                      <p className="text-sm text-muted-foreground mb-3">
                        {material.description}
                      </p>
                      <div className="flex items-center space-x-4 mb-3">
                        <Badge variant="outline" className={getDifficultyColor(material.difficulty)}>
                          {material.difficulty}
                        </Badge>
                        <div className="flex items-center space-x-1 text-xs text-muted-foreground">
                          <Clock size={12} />
                          <span>{material.readTime} –º–∏–Ω</span>
                        </div>
                        <div className="flex items-center space-x-1 text-xs text-muted-foreground">
                          <Star size={12} className="text-yellow-500" />
                          <span>{material.rating}</span>
                        </div>
                        <div className="flex items-center space-x-1 text-xs text-muted-foreground">
                          <Users size={12} />
                          <span>{material.reads}</span>
                        </div>
                      </div>
                      <div className="flex flex-wrap gap-1">
                        {material.tags.map((tag, index) => (
                          <Badge key={index} variant="secondary" className="text-xs">
                            {tag}
                          </Badge>
                        ))}
                      </div>
                    </div>
                    <Button variant="outline" size="sm" className="ml-4">
                      –ß–∏—Ç–∞—Ç—å
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        {/* Recent Materials */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-semibold">–ù–µ–¥–∞–≤–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</h2>
            <Button variant="ghost" size="sm" className="text-primary">
              –°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ
            </Button>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {materialsData.recentMaterials.map((material) => (
              <Card key={material.id} className="cursor-pointer hover:shadow-md transition-shadow">
                <CardContent className="p-4">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-2 mb-2">
                        <h3 className="font-medium text-sm">{material.title}</h3>
                        {material.isNew && (
                          <Badge variant="secondary" className="text-xs">–ù–æ–≤–æ–µ</Badge>
                        )}
                      </div>
                      <p className="text-xs text-muted-foreground mb-3">
                        {material.description}
                      </p>
                      <div className="flex items-center space-x-3 mb-2">
                        <Badge variant="outline" className={`text-xs ${getDifficultyColor(material.difficulty)}`}>
                          {material.difficulty}
                        </Badge>
                        <div className="flex items-center space-x-1 text-xs text-muted-foreground">
                          <Clock size={10} />
                          <span>{material.readTime} –º–∏–Ω</span>
                        </div>
                        <div className="flex items-center space-x-1 text-xs text-muted-foreground">
                          <Star size={10} className="text-yellow-500" />
                          <span>{material.rating}</span>
                        </div>
                      </div>
                      <div className="flex flex-wrap gap-1">
                        {material.tags.slice(0, 2).map((tag, index) => (
                          <Badge key={index} variant="secondary" className="text-xs">
                            {tag}
                          </Badge>
                        ))}
                      </div>
                    </div>
                    <Button variant="outline" size="sm" className="ml-2">
                      –ß–∏—Ç–∞—Ç—å
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        {/* Quick Stats */}
        <div className="mb-6">
          <h2 className="text-lg font-semibold mb-4">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-blue-600">547</div>
                <div className="text-sm text-muted-foreground">–í—Å–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-green-600">23</div>
                <div className="text-sm text-muted-foreground">–ü—Ä–æ—á–∏—Ç–∞–Ω–æ</div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-purple-600">156</div>
                <div className="text-sm text-muted-foreground">–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º</div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-orange-600">8.5—á</div>
                <div className="text-sm text-muted-foreground">–í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è</div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      {/* Mobile Bottom Menu */}
      <MobileBottomMenu />
    </div>
  );
}
