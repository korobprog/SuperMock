import React, { useEffect, useState } from 'react';
import { useSearchParams, useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Loader2, CheckCircle, XCircle, AlertCircle } from 'lucide-react';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface User {
  id: string;
  tgId: string;
  firstName: string;
  lastName?: string;
  username?: string;
  photoUrl?: string;
  createdAt: string;
  lastLoginAt: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ API
interface AuthResponse {
  success: boolean;
  user: User;
  token: string;
}

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback'–∞ –æ—Ç Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç —Å —Ç–æ–∫–µ–Ω–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export default function AuthCallback() {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading');
  const [message, setMessage] = useState<string>('');
  const [user, setUser] = useState<User | null>(null);

  useEffect(() => {
    const handleCallback = async () => {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
        const token = searchParams.get('token');
        const userId = searchParams.get('userId');
        const success = searchParams.get('success');
        const error = searchParams.get('error');
        const errorMessage = searchParams.get('message');

        console.log('üîç Auth callback params:', { token, userId, success, error, errorMessage });

        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞
        if (error) {
          setStatus('error');
          setMessage(errorMessage || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
          return;
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞
        if (!token) {
          setStatus('error');
          setMessage('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω');
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API
        const response = await fetch(`/api/auth/telegram/status?token=${token}`);
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data: AuthResponse = await response.json();
        
        if (data.success && data.user) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          setUser(data.user);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
          localStorage.setItem('auth_token', data.token);
          localStorage.setItem('user_id', data.user.id);
          localStorage.setItem('telegram_user', JSON.stringify({
            id: data.user.tgId,
            first_name: data.user.firstName,
            last_name: data.user.lastName || '',
            username: data.user.username || '',
            photo_url: data.user.photoUrl || '',
            auth_date: Math.floor(Date.now() / 1000),
            hash: 'telegram_auth_hash',
          }));

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞
          setStatus('success');
          setMessage('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');

          // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
          setTimeout(() => {
            navigate('/');
          }, 2000);

        } else {
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }

      } catch (error) {
        console.error('‚ùå Error handling auth callback:', error);
        setStatus('error');
        setMessage(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }
    };

    handleCallback();
  }, [searchParams, navigate]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
  const handleRetry = () => {
    setStatus('loading');
    setMessage('');
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
    window.location.reload();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  const handleGoHome = () => {
    navigate('/');
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const handleGoToAuth = () => {
    navigate('/auth');
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <CardTitle className="text-2xl font-bold">
            {status === 'loading' && '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...'}
            {status === 'success' && '–£—Å–ø–µ—à–Ω–æ!'}
            {status === 'error' && '–û—à–∏–±–∫–∞'}
          </CardTitle>
          <CardDescription>
            {status === 'loading' && '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'}
            {status === 'success' && '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É'}
            {status === 'error' && '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é'}
          </CardDescription>
        </CardHeader>
        
        <CardContent className="space-y-4">
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
          {status === 'loading' && (
            <div className="flex flex-col items-center space-y-4">
              <Loader2 className="h-12 w-12 animate-spin text-blue-500" />
              <p className="text-sm text-gray-600">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</p>
            </div>
          )}

          {/* –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è */}
          {status === 'success' && (
            <div className="space-y-4">
              <div className="flex justify-center">
                <CheckCircle className="h-16 w-16 text-green-500" />
              </div>
              
              {user && (
                <div className="text-center space-y-2">
                  <div className="flex justify-center">
                    {user.photoUrl ? (
                      <img 
                        src={user.photoUrl} 
                        alt="Avatar" 
                        className="w-16 h-16 rounded-full border-2 border-green-200"
                      />
                    ) : (
                      <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center">
                        <span className="text-2xl font-bold text-green-600">
                          {user.firstName.charAt(0)}
                        </span>
                      </div>
                    )}
                  </div>
                  
                  <h3 className="font-semibold text-lg">
                    {user.firstName} {user.lastName || ''}
                  </h3>
                  
                  {user.username && (
                    <p className="text-sm text-gray-600">@{user.username}</p>
                  )}
                </div>
              )}

              <Alert>
                <CheckCircle className="h-4 w-4" />
                <AlertDescription>
                  –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
                </AlertDescription>
              </Alert>

              <Button onClick={handleGoHome} className="w-full">
                –ü–µ—Ä–µ–π—Ç–∏ —Å–µ–π—á–∞—Å
              </Button>
            </div>
          )}

          {/* –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */}
          {status === 'error' && (
            <div className="space-y-4">
              <div className="flex justify-center">
                <XCircle className="h-16 w-16 text-red-500" />
              </div>
              
              <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>
                  {message}
                </AlertDescription>
              </Alert>

              <div className="space-y-2">
                <Button onClick={handleRetry} variant="outline" className="w-full">
                  –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </Button>
                
                <Button onClick={handleGoToAuth} className="w-full">
                  –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
