const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkMaterials() {
  try {
    const materialCount = await prisma.material.count();
    const translationCount = await prisma.materialTranslation.count();
    
    console.log(`üìä –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:`);
    console.log(`   - –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ${materialCount}`);
    console.log(`   - –ü–µ—Ä–µ–≤–æ–¥–æ–≤: ${translationCount}`);
    
    if (materialCount > 0) {
      const sampleMaterial = await prisma.material.findFirst({
        include: {
          translations: true
        }
      });
      
      console.log(`\nüìñ –ü—Ä–∏–º–µ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞:`);
      console.log(`   - ID: ${sampleMaterial.id}`);
      console.log(`   - –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${sampleMaterial.profession}`);
      console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${sampleMaterial.category}`);
      console.log(`   - –ü–µ—Ä–µ–≤–æ–¥–æ–≤: ${sampleMaterial.translations.length}`);
      
      if (sampleMaterial.translations.length > 0) {
        console.log(`   - –ü–µ—Ä–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥: ${sampleMaterial.translations[0].title}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkMaterials();
