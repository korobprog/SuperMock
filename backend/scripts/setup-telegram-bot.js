#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/setup-telegram-bot.js
 */

const readline = require('readline');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

function generateJWTSecret() {
  return crypto.randomBytes(64).toString('hex');
}

function validateBotToken(token) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ Telegram –±–æ—Ç–∞
  const botTokenRegex = /^\d+:[A-Za-z0-9_-]{35}$/;
  return botTokenRegex.test(token);
}

function validatePhoneNumber(phone) {
  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const phoneRegex = /^[\+]?[1-9][\d]{0,15}$/;
  return phoneRegex.test(phone.replace(/\s/g, ''));
}

async function setupTelegramBot() {
  console.log('ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n');
  
  console.log('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:');
  console.log('1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ @BotFather –≤ Telegram');
  console.log('2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /newbot');
  console.log('3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º BotFather');
  console.log('4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω\n');

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
  let botToken;
  do {
    botToken = await question('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: 123456789:ABCdefGHIjklMNOpqrsTUVwxyz): ');
    
    if (!validateBotToken(botToken)) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n');
    }
  } while (!validateBotToken(botToken));

  // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  let testPhone;
  do {
    testPhone = await question('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79991234567): ');
    
    if (!validatePhoneNumber(testPhone)) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n');
    }
  } while (!validatePhoneNumber(testPhone));

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Å–µ–∫—Ä–µ—Ç
  const jwtSecret = generateJWTSecret();
  console.log('\n‚úÖ JWT —Å–µ–∫—Ä–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');

  // –ü–æ–ª—É—á–∞–µ–º URL —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
  const frontendUrl = await question('–í–≤–µ–¥–∏—Ç–µ URL —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: https://app.supermock.ru): ') || 'https://app.supermock.ru';

  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  const config = {
    TELEGRAM_BOT_TOKEN: botToken,
    JWT_SECRET: jwtSecret,
    FRONTEND_URL: frontendUrl,
    TEST_PHONE: testPhone,
    MAX_VERIFICATION_ATTEMPTS: 3,
    VERIFICATION_CODE_EXPIRY: 5,
    JWT_EXPIRY_DAYS: 30,
    VERIFICATION_CODE_LENGTH: 6,
    CODE_CLEANUP_INTERVAL: 5,
    MAX_CODES_PER_PHONE: 3
  };

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  const envPath = path.join(__dirname, '..', '.env');
  const envContent = Object.entries(config)
    .map(([key, value]) => `${key}=${value}`)
    .join('\n');

  try {
    fs.writeFileSync(envPath, envContent);
    console.log(`\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ ${envPath}`);
  } catch (error) {
    console.log(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`);
    console.log('–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤—Ä—É—á–Ω—É—é —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:');
    console.log('\n' + envContent);
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞...');
  
  try {
    const fetch = require('node-fetch');
    const response = await fetch(`https://api.telegram.org/bot${botToken}/getMe`);
    const data = await response.json();
    
    if (data.ok) {
      console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
      console.log(`üì± –ò–º—è –±–æ—Ç–∞: ${data.result.first_name}`);
      console.log(`üÜî Username: @${data.result.username}`);
      console.log(`üÜî ID: ${data.result.id}`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–æ—Ç–∞:', data.description);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞:', error.message);
  }

  // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
  console.log('\nüìñ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –ù–∞–π–¥–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ Telegram: @' + (await getBotUsername(botToken)));
  console.log('2. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –∫–æ–º–∞–Ω–¥–æ–π /start');
  console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: pnpm dev');
  console.log('4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: /auth/telegram');
  console.log('5. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º');

  console.log('\nüîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
  console.log('- –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞: 3');
  console.log('- –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–æ–¥–∞: 5 –º–∏–Ω—É—Ç');
  console.log('- –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ JWT —Ç–æ–∫–µ–Ω–∞: 30 –¥–Ω–µ–π');
  console.log('- –î–ª–∏–Ω–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: 6 —Ü–∏—Ñ—Ä');

  rl.close();
}

async function getBotUsername(token) {
  try {
    const fetch = require('node-fetch');
    const response = await fetch(`https://api.telegram.org/bot${token}/getMe`);
    const data = await response.json();
    return data.ok ? data.result.username : 'unknown';
  } catch (error) {
    return 'unknown';
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
setupTelegramBot().catch(console.error);
