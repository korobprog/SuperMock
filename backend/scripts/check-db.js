// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Prisma
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkDatabase() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Prisma...\n');

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
    const users = await prisma.user.findMany({
      select: {
        id: true,
        tgId: true,
        username: true,
        firstName: true,
        lastName: true,
        language: true,
        createdAt: true,
      },
    });

    if (users.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
      users.forEach((user) => {
        console.log(
          `  ID: ${user.id} | TG: ${user.tgId} | –ò–º—è: ${user.firstName} ${
            user.lastName || ''
          } | @${user.username || '–Ω–µ—Ç'} | –Ø–∑—ã–∫: ${user.language || '–Ω–µ—Ç'}`
        );
      });
    } else {
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    const settings = await prisma.userSettings.findMany({
      include: {
        user: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
            username: true,
          },
        },
      },
    });

    if (settings.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${settings.length} –Ω–∞—Å—Ç—Ä–æ–µ–∫:`);
      settings.forEach((setting) => {
        const user = setting.user;
        const apiKeyMasked = setting.openrouterApiKey
          ? setting.openrouterApiKey.substring(0, 8) +
            '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢' +
            setting.openrouterApiKey.substring(
              setting.openrouterApiKey.length - 4
            )
          : '–Ω–µ –∑–∞–¥–∞–Ω';

        console.log(
          `  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.firstName} ${user.lastName || ''} (ID: ${
            user.id
          })`
        );
        console.log(`    API –∫–ª—é—á: ${apiKeyMasked}`);
        console.log(`    –ú–æ–¥–µ–ª—å: ${setting.preferredModel}`);
        console.log(`    –£—Ä–æ–≤–µ–Ω—å: ${setting.questionsLevel}`);
        console.log(
          `    –ò–ò –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: ${
            setting.useAiGeneration ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'
          }`
        );
        console.log(`    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${setting.questionsCount}`);
        console.log(`    –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${setting.updatedAt.toLocaleString()}`);
        console.log('');
      });
    } else {
      console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüé≠ –î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: 12345678):');
    const demoUser = await prisma.user.findUnique({
      where: { id: 12345678 },
      include: {
        userSettings: true,
        preferences: true,
        sessionsAsInterviewer: true,
        sessionsAsCandidate: true,
      },
    });

    if (demoUser) {
      console.log('‚úÖ –î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:');
      console.log(`  –ò–º—è: ${demoUser.firstName} ${demoUser.lastName || ''}`);
      console.log(`  Username: @${demoUser.username || '–Ω–µ—Ç'}`);
      console.log(`  –Ø–∑—ã–∫: ${demoUser.language || '–Ω–µ—Ç'}`);
      console.log(`  –°–æ–∑–¥–∞–Ω: ${demoUser.createdAt.toLocaleString()}`);
      console.log(`  –û–±–Ω–æ–≤–ª–µ–Ω: ${demoUser.updatedAt.toLocaleString()}`);

      if (demoUser.userSettings) {
        console.log('  ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–π–¥–µ–Ω—ã:');
        const apiKeyMasked = demoUser.userSettings.openrouterApiKey
          ? demoUser.userSettings.openrouterApiKey.substring(0, 8) +
            '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢' +
            demoUser.userSettings.openrouterApiKey.substring(
              demoUser.userSettings.openrouterApiKey.length - 4
            )
          : '–Ω–µ –∑–∞–¥–∞–Ω';
        console.log(`    API –∫–ª—é—á: ${apiKeyMasked}`);
        console.log(`    –ú–æ–¥–µ–ª—å: ${demoUser.userSettings.preferredModel}`);
        console.log(
          `    –ò–ò –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: ${
            demoUser.userSettings.useAiGeneration ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'
          }`
        );
      } else {
        console.log('  ‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }

      console.log(`  –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: ${demoUser.preferences.length}`);
      console.log(
        `  –°–µ—Å—Å–∏–π –∫–∞–∫ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: ${demoUser.sessionsAsInterviewer.length}`
      );
      console.log(
        `  –°–µ—Å—Å–∏–π –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç: ${demoUser.sessionsAsCandidate.length}`
      );
    } else {
      console.log('‚ùå –î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // 4. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    const totalUsers = await prisma.user.count();
    const totalSettings = await prisma.userSettings.count();
    const totalPreferences = await prisma.preference.count();
    const totalSessions = await prisma.session.count();
    const totalFeedback = await prisma.feedback.count();

    console.log(`  –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
    console.log(`  –ù–∞—Å—Ç—Ä–æ–µ–∫: ${totalSettings}`);
    console.log(`  –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: ${totalPreferences}`);
    console.log(`  –°–µ—Å—Å–∏–π: ${totalSessions}`);
    console.log(`  –û—Ç–∑—ã–≤–æ–≤: ${totalFeedback}`);

    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkDatabase();
