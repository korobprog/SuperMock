#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/test-telegram-auth.js
 */

const fetch = require('node-fetch');
const readline = require('readline');
const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º production.env
const PRODUCTION_ENV_PATH = path.join(__dirname, '..', '..', 'production.env');
if (fs.existsSync(PRODUCTION_ENV_PATH)) {
  const envContent = fs.readFileSync(PRODUCTION_ENV_PATH, 'utf8');
  envContent.split('\n').forEach(line => {
    const trimmedLine = line.trim();
    if (trimmedLine && !trimmedLine.startsWith('#')) {
      const [key, ...valueParts] = trimmedLine.split('=');
      if (key && valueParts.length > 0) {
        process.env[key.trim()] = valueParts.join('=').trim();
      }
    }
  });
} else {
  require('dotenv').config();
}

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

const API_BASE = process.env.BACKEND_URL ? `${process.env.BACKEND_URL}/api` : 'http://localhost:3000/api';

async function testTelegramAuth() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  if (!process.env.TELEGRAM_BOT_TOKEN) {
    console.log('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/setup-telegram-bot.js');
    rl.close();
    return;
  }

  if (!process.env.JWT_SECRET) {
    console.log('‚ùå JWT_SECRET –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/setup-telegram-bot.js');
    rl.close();
    return;
  }

  console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞');

  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
  console.log('\nüì° –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API');
  try {
    const response = await fetch(`${API_BASE}/telegram-auth/stats`);
    const data = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${JSON.stringify(data.stats, null, 2)}`);
    } else {
      console.log('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', data.message);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API:', error.message);
    console.log('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: pnpm dev');
    rl.close();
    return;
  }

  // –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  console.log('\nüì± –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
  
  const phoneNumber = await question('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ');
  const telegramUserId = await question('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram User ID (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º): ') || 'test_user_id';

  try {
    const response = await fetch(`${API_BASE}/telegram-auth/send-code`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        phoneNumber,
        telegramUserId
      }),
    });

    const data = await response.json();

    if (data.success) {
      console.log('‚úÖ –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      console.log(`üÜî Code ID: ${data.codeId}`);
      console.log(`‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: ${data.expiresIn} —Å–µ–∫—É–Ω–¥`);
      
      // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
      console.log('\nüî¢ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      
      const code = await question('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–µ–ª –≤ Telegram (–∏–ª–∏ "test" –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è): ');
      
      if (code === 'test') {
        console.log('‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º');
        console.log('–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–π—Ç–∏ –≤ Telegram');
      }

      const verifyResponse = await fetch(`${API_BASE}/telegram-auth/verify-code`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          codeId: data.codeId,
          code: code,
          userInfo: {
            firstName: 'Test',
            lastName: 'User',
            username: 'testuser'
          }
        }),
      });

      const verifyData = await verifyResponse.json();

      if (verifyData.success) {
        console.log('‚úÖ –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω');
        console.log(`üé´ JWT Token: ${verifyData.token.substring(0, 50)}...`);
        console.log(`üë§ User: ${JSON.stringify(verifyData.user, null, 2)}`);

        // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        console.log('\nüîê –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');
        
        const meResponse = await fetch(`${API_BASE}/telegram-auth/me`, {
          headers: {
            'Authorization': `Bearer ${verifyData.token}`,
            'Content-Type': 'application/json'
          }
        });

        const meData = await meResponse.json();

        if (meData.success) {
          console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω');
          console.log(`üë§ User data: ${JSON.stringify(meData.user, null, 2)}`);
        } else {
          console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', meData.message);
        }

        // –¢–µ—Å—Ç 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        console.log('\nüîÑ –¢–µ—Å—Ç 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞');
        
        const refreshResponse = await fetch(`${API_BASE}/telegram-auth/refresh-token`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${verifyData.token}`,
            'Content-Type': 'application/json'
          }
        });

        const refreshData = await refreshResponse.json();

        if (refreshData.success) {
          console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
          console.log(`üé´ New Token: ${refreshData.token.substring(0, 50)}...`);
        } else {
          console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', refreshData.message);
        }

      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞:', verifyData.message);
      }

    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞:', data.message);
    }

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }

  // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
  try {
    const statsResponse = await fetch(`${API_BASE}/telegram-auth/stats`);
    const statsData = await statsResponse.json();
    
    if (statsResponse.ok) {
      console.log(`üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤: ${statsData.stats.activeCodes}`);
      console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${statsData.stats.totalUsers}`);
      console.log(`‚è∞ –ò—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤: ${statsData.stats.expiredCodes}`);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
  }

  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  rl.close();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testTelegramAuth().catch(console.error);
