const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function importMaterials() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...');
    
    // –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
    const materialsDir = path.join(__dirname, '../../materials');
    
    // –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
    const files = fs.readdirSync(materialsDir).filter(file => file.endsWith('.json'));
    
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤`);
    
    // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—Å—Ç–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    console.log('üßπ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã...');
    await prisma.materialTranslation.deleteMany();
    await prisma.material.deleteMany();
    console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã');
    
    for (const file of files) {
      console.log(`üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: ${file}`);
      
      const filePath = path.join(materialsDir, file);
      const content = fs.readFileSync(filePath, 'utf8');
      const data = JSON.parse(content);
      
      const { profession, language, materials } = data;
      
      console.log(`üìö –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ${materials.length} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: ${profession}, —è–∑—ã–∫: ${language}`);
      
      for (const materialData of materials) {
        try {
          // –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
          const material = await prisma.material.create({
            data: {
              profession: profession,
              category: materialData.category,
              difficulty: materialData.difficulty,
              readTime: materialData.readTime,
              rating: materialData.rating,
              reads: materialData.reads,
              tags: materialData.tags,
              isNew: materialData.isNew,
              isPopular: materialData.isPopular,
              createdAt: new Date(materialData.createdAt),
              translations: {
                create: {
                  language: language,
                  title: materialData.title,
                  description: materialData.description,
                  content: materialData.content
                }
              }
            }
          });
          
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª: ${materialData.title} (ID: ${material.id})`);
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ ${materialData.title}:`, error.message);
        }
      }
    }
    
    console.log('üéâ –ò–º–ø–æ—Ä—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
importMaterials();
