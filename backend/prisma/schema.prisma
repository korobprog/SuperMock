generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @map("id")
  tgId                  String?        @map("tg_id")
  username              String?
  firstName             String?        @map("first_name")
  lastName              String?        @map("last_name")
  language              String?
  createdAt             DateTime       @default(now()) @map("created_at")
  updatedAt             DateTime       @updatedAt @map("updated_at")
  lastLoginAt           DateTime?      @map("last_login_at")
  photoUrl              String?        @map("photo_url")
  feedbackGiven         Feedback[]     @relation("FeedbackFrom")
  feedbackReceived      Feedback[]     @relation("FeedbackTo")
  matchesAsCandidate    Match[]        @relation("MatchCandidate")
  matchesAsInterviewer  Match[]        @relation("MatchInterviewer")
  notifications         Notification[]
  preferences           Preference[]
  sessionsAsCandidate   Session[]      @relation("CandidateSessions")
  sessionsAsInterviewer Session[]      @relation("InterviewerSessions")
  queues                UserQueue[]
  userSettings          UserSettings?
  userTools             UserTool[]
  // ü§ñ AI —Å–≤—è–∑–∏
  feedbackAnalyses      FeedbackAnalysis[]
  learningRecommendations LearningRecommendation[]
  skillProgress         SkillProgress[]
  aiAnalysisLogs        AIAnalysisLog[]

  @@map("users")
}

model UserTool {
  id         Int      @id @default(autoincrement())
  userId     String   @map("user_id")
  profession String
  toolName   String   @map("tool_name")
  category   String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, profession])
  @@index([toolName, profession])
  @@map("user_tools")
}

model Preference {
  id         Int      @id @default(autoincrement())
  userId     String   @map("user_id")
  role       String
  profession String
  language   String
  slotsUtc   String   @map("slots_utc")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("preferences")
}

model Session {
  id                String           @id
  interviewerUserId String?          @map("interviewer_user_id")
  candidateUserId   String?          @map("candidate_user_id")
  profession        String?
  language          String?
  slotUtc           String?          @map("slot_utc")
  createdAt         DateTime         @default(now()) @map("created_at")
  status            String?
  jitsiRoom         String?          @map("jitsi_room")
  completedAt       DateTime?        @map("completed_at")
  feedback          Feedback[]
  questionRatings   QuestionRating[]
  candidate         User?            @relation("CandidateSessions", fields: [candidateUserId], references: [id])
  interviewer       User?            @relation("InterviewerSessions", fields: [interviewerUserId], references: [id])

  @@map("sessions")
}

/// –û—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–ª–æ—Ç—ã
model UserQueue {
  id         Int      @id @default(autoincrement())
  userId     String   @map("user_id")
  role       String
  profession String?
  language   String?
  slotUtc    String   @map("slot_utc")
  status     String   @default("waiting")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([slotUtc, role, status])
  @@index([userId, status])
  @@map("user_queues")
}

/// –¢–∞–±–ª–∏—Ü–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π –∫–∞–Ω–¥–∏–¥–∞—Ç-–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä (–¥–ª—è –∞—É–¥–∏—Ç–∞)
model Match {
  id            Int      @id @default(autoincrement())
  candidateId   String   @map("candidate_id")
  interviewerId String   @map("interviewer_id")
  slotUtc       String   @map("slot_utc")
  status        String   @default("scheduled")
  sessionId     String?  @map("session_id")
  meetingLink   String?  @map("meeting_link")
  createdAt     DateTime @default(now()) @map("created_at")
  candidate     User     @relation("MatchCandidate", fields: [candidateId], references: [id])
  interviewer   User     @relation("MatchInterviewer", fields: [interviewerId], references: [id])

  @@index([slotUtc, status])
  @@map("matches")
}

/// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–∫–ª—é—á–∞—è –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ Telegram)
model Notification {
  id          Int       @id @default(autoincrement())
  userId      String    @map("user_id")
  type        String
  title       String
  message     String
  status      String    @default("active")
  priority    Int       @default(0)
  actionData  String?   @map("action_data")
  createdAt   DateTime  @default(now()) @map("created_at")
  readAt      DateTime? @map("read_at")
  expiresAt   DateTime? @map("expires_at")
  messageData String?   @map("message_data")
  messageKey  String?   @map("message_key")
  titleKey    String?   @map("title_key")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status, createdAt])
  @@map("notifications")
}

model Feedback {
  id              Int      @id @default(autoincrement())
  sessionId       String   @map("session_id")
  fromUserId      String   @map("from_user_id")
  toUserId        String   @map("to_user_id")
  rating          Int
  comments        String?
  createdAt       DateTime @default(now()) @map("created_at")
  ratings         String?
  recommendations String?
  fromUser        User     @relation("FeedbackFrom", fields: [fromUserId], references: [id])
  session         Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  toUser          User     @relation("FeedbackTo", fields: [toUserId], references: [id])
  // ü§ñ AI —Å–≤—è–∑—å
  analysis        FeedbackAnalysis?

  @@index([sessionId])
  @@index([fromUserId])
  @@index([toUserId])
  @@map("feedback")
}

model QuestionRating {
  id            Int      @id @default(autoincrement())
  sessionId     String   @map("session_id")
  questionIndex Int      @map("question_index")
  questionText  String   @map("question_text")
  isAsked       Boolean  @default(false) @map("is_asked")
  rating        Int?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  session       Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, questionIndex])
  @@map("question_ratings")
}

model UserSettings {
  id               Int      @id @default(autoincrement())
  userId           String   @unique @map("user_id")
  openrouterApiKey String?  @map("openrouter_api_key")
  preferredModel   String   @default("meta-llama/llama-3.1-8b-instruct") @map("preferred_model")
  questionsLevel   String   @default("middle") @map("questions_level")
  useAiGeneration  Boolean  @default(false) @map("use_ai_generation")
  questionsCount   Int      @default(10) @map("questions_count")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  stackblitzApiKey String?  @map("stackblitz_api_key")
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Material {
  id           Int                   @id @default(autoincrement())
  profession   String
  category     String
  difficulty   String
  readTime     Int                   @map("read_time")
  rating       Float                 @default(0)
  reads        Int                   @default(0)
  tags         String[]
  isNew        Boolean               @default(false) @map("is_new")
  isPopular    Boolean               @default(false) @map("is_popular")
  createdAt    DateTime              @default(now()) @map("created_at")
  updatedAt    DateTime              @updatedAt @map("updated_at")
  translations MaterialTranslation[]

  @@index([profession, category])
  @@index([profession, difficulty])
  @@index([isPopular, createdAt])
  @@map("materials")
}

model MaterialTranslation {
  id          Int      @id @default(autoincrement())
  materialId  Int      @map("material_id")
  language    String
  title       String
  description String
  content     String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  material    Material @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@unique([materialId, language])
  @@index([language])
  @@map("material_translations")
}

// ü§ñ AI –ê–ù–ê–õ–ò–ó –§–ò–î–ë–ï–ö–ê - –ù–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è AI-–º–µ–Ω—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã
model FeedbackAnalysis {
  id                 Int      @id @default(autoincrement())
  feedbackId         Int      @unique @map("feedback_id")
  userId             String   @map("user_id")
  weaknesses         Json     // ["algorithms", "system_design"] 
  strengths          Json     // ["javascript", "communication"]
  skillLevels        Json     // [{"skill": "react", "level": 7, "confidence": 0.9}]
  communicationScore Int      @map("communication_score") // 1-10
  technicalScore     Int      @map("technical_score") // 1-10  
  overallReadiness   Int      @map("overall_readiness") // 1-10 –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–±–æ—Ç–µ
  suggestions        Json     // ["–ò–∑—É—á–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã", "–ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–∏–∑–∞–π–Ω–∞"]
  uniquenessScore    Float    @map("uniqueness_score") // 0.0-1.0 —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º
  summary            String   // –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ AI –∞–Ω–∞–ª–∏–∑–∞
  aiModel            String   @default("meta-llama/llama-3.1-8b-instruct") @map("ai_model") // –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å
  processingTimeMs   Int?     @map("processing_time_ms") // –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –º—Å
  createdAt          DateTime @default(now()) @map("created_at")
  
  // –°–≤—è–∑–∏
  feedback           Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recommendations    LearningRecommendation[]
  
  @@index([userId])
  @@index([createdAt])
  @@index([overallReadiness])
  @@map("feedback_analysis")
}

model LearningRecommendation {
  id                    Int      @id @default(autoincrement())
  analysisId            Int      @map("analysis_id")
  userId                String   @map("user_id")
  type                  String   // "material", "roadmap", "training", "schedule"
  priority              Int      // 1-10
  title                 String
  description           String
  estimatedHours        Int?     @map("estimated_hours")
  dueDate              DateTime? @map("due_date")
  isCompleted          Boolean   @default(false) @map("is_completed")
  completedAt          DateTime? @map("completed_at")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")
  
  // –°–≤—è–∑–∏
  analysis             FeedbackAnalysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, isCompleted])
  @@index([priority])
  @@index([dueDate])
  @@index([type])
  @@map("learning_recommendations")
}

model SkillProgress {
  id           Int      @id @default(autoincrement())
  userId       String   @map("user_id")
  skillName    String   @map("skill_name") // "react", "algorithms", "communication"
  currentLevel Int      @map("current_level") // 1-10 —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
  targetLevel  Int      @map("target_level") // 1-10 —Ü–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å
  confidence   Float    @default(0.5) // 0-1 —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ü–µ–Ω–∫–µ
  source       String   @default("ai_analysis") // "ai_analysis", "self_assessment", "manual"
  lastUpdated  DateTime @updatedAt @map("last_updated")
  createdAt    DateTime @default(now()) @map("created_at")
  
  // –°–≤—è–∑–∏
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, skillName])
  @@index([skillName])
  @@index([currentLevel])
  @@map("skill_progress")
}

model AIAnalysisLog {
  id              Int      @id @default(autoincrement())
  userId          String   @map("user_id")
  operation       String   // "analyze_feedback", "generate_recommendations", "extract_skills"
  inputData       Json     @map("input_data") // –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–±–µ–∑–ª–∏—á–µ–Ω–Ω—ã–µ)
  outputData      Json?    @map("output_data") // —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
  aiModel         String   @map("ai_model") // –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å
  processingTimeMs Int     @map("processing_time_ms") // –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  tokensUsed      Int?     @map("tokens_used") // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
  success         Boolean  @default(true) // —É—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
  errorMessage    String?  @map("error_message") // —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  createdAt       DateTime @default(now()) @map("created_at")
  
  // –°–≤—è–∑–∏
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([operation])
  @@index([success])
  @@index([createdAt])
  @@map("ai_analysis_log")
}
