import express, { Request, Response } from 'express';
import crypto from 'crypto';
import jwt from 'jsonwebtoken';
import fetch from 'node-fetch';

const router = express.Router();

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
router.get('/telegram-test', (req: Request, res: Response) => {
  res.json({ 
    message: 'Telegram auth routes are working!',
    timestamp: new Date().toISOString(),
    botToken: BOT_TOKEN ? 'configured' : 'not configured'
  });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram
function validateTelegramAuth(data: any, botToken: string): boolean {
  if (!botToken) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN not configured');
    return false;
  }

  console.log('üîç Starting Telegram auth validation...');
  console.log('  - Bot token length:', botToken.length);
  console.log('  - Data keys:', Object.keys(data));

  const checkHash = data.hash;
  if (!checkHash) {
    console.error('‚ùå Hash not provided in data');
    return false;
  }

  const dataToCheck = { ...data };
  delete dataToCheck.hash;

  console.log('  - Data without hash:', dataToCheck);

  const dataCheckString = Object.keys(dataToCheck)
    .sort()
    .map((key) => `${key}=${dataToCheck[key]}`)
    .join('\n');

  console.log('  - Data check string:', dataCheckString);

  const secretKey = crypto.createHash('sha256').update(botToken).digest();
  console.log('  - Secret key (hex):', secretKey.toString('hex').substring(0, 16) + '...');

  const hash = crypto
    .createHmac('sha256', secretKey)
    .update(dataCheckString)
    .digest('hex');

  console.log('  - Computed hash:', hash);
  console.log('  - Received hash:', checkHash);
  console.log('  - Hash match:', hash === checkHash ? '‚úÖ YES' : '‚ùå NO');

  return hash === checkHash;
}

// POST /api/telegram-auth-callback - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram –≤–∏–¥–∂–µ—Ç–∞ (POST)
router.post('/telegram-auth-callback', async (req: Request, res: Response) => {
  try {
    console.log('=== TELEGRAM AUTH CALLBACK (POST) ===');
    console.log('Body:', req.body);
    console.log('Headers:', req.headers);
    console.log('Content-Type:', req.headers['content-type']);
    console.log('User-Agent:', req.headers['user-agent']);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ body
    const {
      id,
      first_name,
      last_name,
      username,
      photo_url,
      auth_date,
      hash,
    } = req.body;

    console.log('üìã Parsed data:', {
      id: id ? `‚úÖ ${id}` : '‚ùå missing',
      first_name: first_name ? `‚úÖ ${first_name}` : '‚ùå missing',
      last_name: last_name ? `‚úÖ ${last_name}` : '‚ùå missing',
      username: username ? `‚úÖ ${username}` : '‚ùå missing',
      photo_url: photo_url ? `‚úÖ ${photo_url}` : '‚ùå missing',
      auth_date: auth_date ? `‚úÖ ${auth_date}` : '‚ùå missing',
      hash: hash ? `‚úÖ ${hash}` : '‚ùå missing',
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!id || !first_name || !auth_date || !hash) {
      console.error('‚ùå Missing required fields:', { id, first_name, auth_date, hash });
      return res.status(400).json({ 
        error: 'Missing required fields',
        message: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç Telegram',
        received: req.body,
        required: ['id', 'first_name', 'auth_date', 'hash']
      });
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
    if (!validateTelegramAuth(req.body, BOT_TOKEN || '')) {
      console.error('‚ùå Invalid Telegram auth data');
      console.error('üîç Validation details:');
      console.error('  - Bot token configured:', !!BOT_TOKEN);
      console.error('  - Received hash:', hash);
      console.error('  - Data to validate:', JSON.stringify(req.body, null, 2));
      return res.status(401).json({ 
        error: 'Invalid auth data',
        message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç Telegram',
        details: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ –¥–æ–º–µ–Ω–∞ –≤ BotFather'
      });
    }

    console.log('‚úÖ Telegram auth data validated successfully');

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const telegramUser = {
      id: String(id),
      first_name: String(first_name),
      last_name: String(last_name || ''),
      username: String(username || ''),
      photo_url: String(photo_url || ''),
      auth_date: Number(auth_date),
      hash: String(hash),
    };

    console.log('üë§ Processing user:', telegramUser);

    // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const userId = `user_${telegramUser.id}_${Date.now()}`;
    
    console.log('‚úÖ User processed successfully:', userId);

    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const JWT_SECRET = process.env.JWT_SECRET || 'default_secret';
    
    const token = jwt.sign(
      { 
        userId: userId,
        tgId: telegramUser.id,
        type: 'telegram'
      },
      JWT_SECRET,
      { expiresIn: '30d' }
    );

    console.log('üîê JWT token created successfully');

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ç–æ–∫–µ–Ω–æ–º
    res.json({
      success: true,
      message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
      token: token,
      user: {
        id: userId,
        telegramId: telegramUser.id,
        firstName: telegramUser.first_name,
        lastName: telegramUser.last_name,
        username: telegramUser.username,
        photoUrl: telegramUser.photo_url
      }
    });

  } catch (error) {
    console.error('‚ùå Error in Telegram auth callback (POST):', error);
    res.status(500).json({ 
      error: 'Internal server error',
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// GET /api/telegram-auth-callback - –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç Telegram –≤–∏–¥–∂–µ—Ç–∞ (GET)
router.get('/telegram-auth-callback', async (req: Request, res: Response) => {
  try {
    console.log('=== TELEGRAM AUTH CALLBACK (GET) ===');
    console.log('Query params:', req.query);
    console.log('Headers:', req.headers);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const {
      id,
      first_name,
      last_name,
      username,
      photo_url,
      auth_date,
      hash,
    } = req.query;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!id || !first_name || !auth_date || !hash) {
      console.error('Missing required fields:', { id, first_name, auth_date, hash });
      return res.status(400).json({ 
        error: 'Missing required fields',
        message: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç Telegram'
      });
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
    if (!validateTelegramAuth(req.query, BOT_TOKEN || '')) {
      console.error('Invalid Telegram auth data');
      return res.status(401).json({ 
        error: 'Invalid auth data',
        message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç Telegram'
      });
    }

    console.log('Telegram auth data validated successfully');

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const telegramUser = {
      id: String(id),
      first_name: String(first_name),
      last_name: String(last_name || ''),
      username: String(username || ''),
      photo_url: String(photo_url || ''),
      auth_date: Number(auth_date),
      hash: String(hash),
    };

    console.log('Processing user:', telegramUser);

    // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const userId = `user_${telegramUser.id}_${Date.now()}`;
    
    console.log('User processed successfully:', userId);

    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const JWT_SECRET = process.env.JWT_SECRET || 'default_secret';
    
    const token = jwt.sign(
      { 
        userId: userId,
        tgId: telegramUser.id,
        type: 'telegram'
      },
      JWT_SECRET,
      { expiresIn: '30d' }
    );

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ frontend —Å —Ç–æ–∫–µ–Ω–æ–º
    const frontendUrl = process.env.FRONTEND_URL || 'https://app.supermock.ru';
    const redirectUrl = `${frontendUrl}/telegram-auth-success?token=${token}&userId=${userId}`;
    
    console.log('Redirecting to:', redirectUrl);
    
    res.redirect(redirectUrl);

  } catch (error) {
    console.error('Error in Telegram auth callback (GET):', error);
    res.status(500).json({ 
      error: 'Internal server error',
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
    });
  }
});

// GET /api/telegram-bot-check - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
router.get('/telegram-bot-check', async (req: Request, res: Response) => {
  try {
    if (!BOT_TOKEN) {
      return res.json({ available: false, reason: 'Bot token not configured' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Telegram API
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getMe`);
    const data = await response.json() as any;

    if (data.ok) {
      res.json({ 
        available: true, 
        bot: data.result,
        message: 'Telegram –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω'
      });
    } else {
      res.json({ 
        available: false, 
        reason: 'Bot API error',
        error: data.description
      });
    }
  } catch (error) {
    console.error('Error checking bot availability:', error);
    res.json({ 
      available: false, 
      reason: 'Network error',
      error: (error as Error).message
    });
  }
});

// POST /api/telegram-generate-auth-token - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
router.post('/telegram-generate-auth-token', async (req: Request, res: Response) => {
  try {
    console.log('=== TELEGRAM GENERATE AUTH TOKEN ===');
    console.log('Body:', req.body);

    const { telegramId, firstName, username } = req.body;

    if (!telegramId) {
      return res.status(400).json({ 
        error: 'Missing telegramId',
        message: 'Telegram ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞'
      });
    }

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω (–¥–µ–π—Å—Ç–≤—É–µ—Ç 5 –º–∏–Ω—É—Ç)
    const JWT_SECRET = process.env.JWT_SECRET || 'default_secret';
    const tempToken = jwt.sign(
      { 
        telegramId: String(telegramId),
        firstName: firstName || '',
        username: username || '',
        type: 'telegram_temp_auth',
        purpose: 'bot_to_web_auth'
      },
      JWT_SECRET,
      { expiresIn: '5m' }
    );

    console.log('‚úÖ Temporary auth token generated for telegramId:', telegramId);

    res.json({
      success: true,
      token: tempToken,
      expiresIn: '5m',
      message: '–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω'
    });

  } catch (error) {
    console.error('‚ùå Error generating auth token:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
    });
  }
});

// GET /api/telegram-auth-status - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/telegram-auth-status', async (req: Request, res: Response) => {
  try {
    console.log('=== TELEGRAM AUTH STATUS CHECK ===');
    console.log('Query params:', req.query);

    const { telegramId } = req.query;

    if (!telegramId) {
      return res.status(400).json({ 
        error: 'Missing telegramId',
        message: 'Telegram ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å "–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    
    console.log('‚úÖ Auth status checked for telegramId:', telegramId);

    res.json({
      success: true,
      telegramId: String(telegramId),
      isAuthorized: false, // –í—Å–µ–≥–¥–∞ false –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
    });

  } catch (error) {
    console.error('‚ùå Error checking auth status:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
    });
  }
});

// GET /api/telegram-auth-by-token - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É
router.get('/telegram-auth-by-token', async (req: Request, res: Response) => {
  try {
    console.log('=== TELEGRAM AUTH BY TOKEN ===');
    console.log('Query params:', req.query);

    const { token } = req.query;

    if (!token) {
      return res.status(400).json({ 
        error: 'Missing token',
        message: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const JWT_SECRET = process.env.JWT_SECRET || 'default_secret';
    let decoded: any;
    
    try {
      decoded = jwt.verify(String(token), JWT_SECRET);
    } catch (jwtError) {
      console.error('‚ùå Invalid token:', jwtError);
      return res.status(401).json({ 
        error: 'Invalid token',
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
      });
    }

    if (decoded.type !== 'telegram_temp_auth' || decoded.purpose !== 'bot_to_web_auth') {
      return res.status(401).json({ 
        error: 'Invalid token type',
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞'
      });
    }

    console.log('‚úÖ Token validated for telegramId:', decoded.telegramId);

    // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = `user_${decoded.telegramId}_${Date.now()}`;
    
    const permanentToken = jwt.sign(
      { 
        userId: userId,
        tgId: decoded.telegramId,
        type: 'telegram'
      },
      JWT_SECRET,
      { expiresIn: '30d' }
    );

    console.log('‚úÖ Permanent token created for user:', userId);

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ frontend —Å —Ç–æ–∫–µ–Ω–æ–º
    const frontendUrl = process.env.FRONTEND_URL || 'https://app.supermock.ru';
    const redirectUrl = `${frontendUrl}/telegram-auth-success?token=${permanentToken}&userId=${userId}&telegramId=${decoded.telegramId}`;
    
    console.log('Redirecting to:', redirectUrl);
    
    res.redirect(redirectUrl);

  } catch (error) {
    console.error('‚ùå Error in telegram auth by token:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω—É'
    });
  }
});

export default router;
