import { Router, Request, Response } from 'express';
import crypto from 'crypto';
import jwt from 'jsonwebtoken';
import { PrismaClient } from '@prisma/client';

const router = Router();
const prisma = new PrismaClient();

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const JWT_SECRET = process.env.JWT_SECRET || 'default_secret';
const FRONTEND_URL = process.env.FRONTEND_URL || 'https://app.supermock.ru';

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram Login Widget
 * –°–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: https://core.telegram.org/widgets/login
 */
function validateTelegramAuth(data: any, botToken: string): boolean {
  if (!botToken) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN not configured');
    return false;
  }

  // –ü–æ–ª—É—á–∞–µ–º hash –∏–∑ –¥–∞–Ω–Ω—ã—Ö
  const checkHash = data.hash;
  if (!checkHash) {
    console.error('‚ùå Hash not provided');
    return false;
  }

  // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ hash –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const dataToCheck = { ...data };
  delete dataToCheck.hash;

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const dataCheckString = Object.keys(dataToCheck)
    .sort()
    .map((key) => `${key}=${dataToCheck[key]}`)
    .join('\n');

  console.log('üîç Data check string:', dataCheckString);

  // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
  const secretKey = crypto.createHash('sha256').update(botToken).digest();
  
  // –í—ã—á–∏—Å–ª—è–µ–º HMAC-SHA256
  const hash = crypto
    .createHmac('sha256', secretKey)
    .update(dataCheckString)
    .digest('hex');

  console.log('üîç Computed hash:', hash);
  console.log('üîç Received hash:', checkHash);

  const isValid = hash === checkHash;
  console.log('üîç Hash validation:', isValid ? '‚úÖ SUCCESS' : '‚ùå FAILED');

  return isValid;
}

/**
 * GET /auth/callback - –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback'–∞ –æ—Ç Telegram Login Widget
 * –≠—Ç–æ—Ç endpoint –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É https://app.supermock.ru/auth/callback
 */
router.get('/auth/callback', async (req: Request, res: Response) => {
  try {
    console.log('=== TELEGRAM LOGIN WIDGET CALLBACK ===');
    console.log('Query params:', req.query);
    console.log('Headers:', req.headers);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const {
      id,
      first_name,
      last_name,
      username,
      photo_url,
      auth_date,
      hash,
    } = req.query;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!id || !first_name || !auth_date || !hash) {
      console.error('‚ùå Missing required fields:', { id, first_name, auth_date, hash });
      return res.status(400).json({ 
        error: 'Missing required fields',
        message: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç Telegram'
      });
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
    if (!validateTelegramAuth(req.query, BOT_TOKEN || '')) {
      console.error('‚ùå Invalid Telegram auth data');
      return res.status(401).json({ 
        error: 'Invalid auth data',
        message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç Telegram'
      });
    }

    console.log('‚úÖ Telegram auth data validated successfully');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–Ω–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
    const authTime = Number(auth_date) * 1000; // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    const currentTime = Date.now();
    const maxAge = 60 * 60 * 1000; // 1 —á–∞—Å
    
    if (currentTime - authTime > maxAge) {
      console.warn('‚ö†Ô∏è OAuth data too old for user:', id);
      return res.status(401).json({
        error: 'Auth data expired',
        message: '–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏'
      });
    }

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const telegramUser = {
      id: String(id),
      first_name: String(first_name),
      last_name: String(last_name || ''),
      username: String(username || ''),
      photo_url: String(photo_url || ''),
      auth_date: Number(auth_date),
      hash: String(hash),
    };

    console.log('üë§ Processing user:', telegramUser);

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
    let user = await prisma.user.findFirst({
      where: {
        tgId: telegramUser.id,
      },
    });

    if (user) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üîÑ Updating existing user:', user.id);
      user = await prisma.user.update({
        where: { id: user.id },
        data: {
          tgId: telegramUser.id,
          firstName: telegramUser.first_name,
          lastName: telegramUser.last_name,
          username: telegramUser.username,
          photoUrl: telegramUser.photo_url,
          lastLoginAt: new Date(),
        },
      });
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üÜï Creating new user with Telegram ID:', telegramUser.id);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userId = `user_${telegramUser.id}_${Date.now()}`;
      
      user = await prisma.user.create({
        data: {
          id: userId,
          tgId: telegramUser.id,
          firstName: telegramUser.first_name,
          lastName: telegramUser.last_name,
          username: telegramUser.username,
          photoUrl: telegramUser.photo_url,
          createdAt: new Date(),
          lastLoginAt: new Date(),
        },
      });
    }

    console.log('‚úÖ User processed successfully:', user.id);

    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      { 
        userId: user.id,
        tgId: telegramUser.id,
        type: 'telegram',
        iat: Math.floor(Date.now() / 1000),
        exp: Math.floor(Date.now() / 1000) + (30 * 24 * 60 * 60), // 30 –¥–Ω–µ–π
      },
      JWT_SECRET
    );

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ frontend —Å —Ç–æ–∫–µ–Ω–æ–º
    const redirectUrl = `${FRONTEND_URL}/auth/callback?token=${token}&userId=${user.id}&success=true`;
    
    console.log('üîÑ Redirecting to:', redirectUrl);
    
    res.redirect(redirectUrl);

  } catch (error) {
    console.error('‚ùå Error in Telegram auth callback:', error);
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ frontend —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
    const errorRedirectUrl = `${FRONTEND_URL}/auth/callback?error=auth_failed&message=${encodeURIComponent('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')}`;
    
    res.redirect(errorRedirectUrl);
  }
});

/**
 * POST /auth/telegram/callback - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
 */
router.post('/auth/telegram/callback', async (req: Request, res: Response) => {
  try {
    console.log('=== TELEGRAM LOGIN WIDGET POST CALLBACK ===');
    console.log('Body:', req.body);
    console.log('Headers:', req.headers);

    const {
      id,
      first_name,
      last_name,
      username,
      photo_url,
      auth_date,
      hash,
    } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!id || !first_name || !auth_date || !hash) {
      console.error('‚ùå Missing required fields:', { id, first_name, auth_date, hash });
      return res.status(400).json({ 
        error: 'Missing required fields',
        message: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç Telegram'
      });
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
    if (!validateTelegramAuth(req.body, BOT_TOKEN || '')) {
      console.error('‚ùå Invalid Telegram auth data');
      return res.status(401).json({ 
        error: 'Invalid auth data',
        message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç Telegram'
      });
    }

    console.log('‚úÖ Telegram auth data validated successfully');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authTime = Number(auth_date) * 1000;
    const currentTime = Date.now();
    const maxAge = 60 * 60 * 1000; // 1 —á–∞—Å
    
    if (currentTime - authTime > maxAge) {
      console.warn('‚ö†Ô∏è OAuth data too old for user:', id);
      return res.status(401).json({
        error: 'Auth data expired',
        message: '–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏'
      });
    }

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const telegramUser = {
      id: String(id),
      first_name: String(first_name),
      last_name: String(last_name || ''),
      username: String(username || ''),
      photo_url: String(photo_url || ''),
      auth_date: Number(auth_date),
      hash: String(hash),
    };

    console.log('üë§ Processing user:', telegramUser);

    let user = await prisma.user.findFirst({
      where: { tgId: telegramUser.id },
    });

    if (user) {
      console.log('üîÑ Updating existing user:', user.id);
      user = await prisma.user.update({
        where: { id: user.id },
        data: {
          tgId: telegramUser.id,
          firstName: telegramUser.first_name,
          lastName: telegramUser.last_name,
          username: telegramUser.username,
          photoUrl: telegramUser.photo_url,
          lastLoginAt: new Date(),
        },
      });
    } else {
      console.log('üÜï Creating new user with Telegram ID:', telegramUser.id);
      const userId = `user_${telegramUser.id}_${Date.now()}`;
      
      user = await prisma.user.create({
        data: {
          id: userId,
          tgId: telegramUser.id,
          firstName: telegramUser.first_name,
          lastName: telegramUser.last_name,
          username: telegramUser.username,
          photoUrl: telegramUser.photo_url,
          createdAt: new Date(),
          lastLoginAt: new Date(),
        },
      });
    }

    console.log('‚úÖ User processed successfully:', user.id);

    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      { 
        userId: user.id,
        tgId: telegramUser.id,
        type: 'telegram',
        iat: Math.floor(Date.now() / 1000),
        exp: Math.floor(Date.now() / 1000) + (30 * 24 * 60 * 60), // 30 –¥–Ω–µ–π
      },
      JWT_SECRET
    );

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ç–æ–∫–µ–Ω–æ–º
    res.json({
      success: true,
      message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram —É—Å–ø–µ—à–Ω–∞',
      user: {
        id: user.id,
        tgId: telegramUser.id,
        firstName: telegramUser.first_name,
        lastName: telegramUser.last_name,
        username: telegramUser.username,
        photoUrl: telegramUser.photo_url,
      },
      token,
    });

  } catch (error) {
    console.error('‚ùå Error in Telegram auth POST callback:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
    });
  }
});

/**
 * GET /auth/telegram/status - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
router.get('/auth/telegram/status', async (req: Request, res: Response) => {
  try {
    const { token } = req.query;
    
    if (!token) {
      return res.status(400).json({
        error: 'Token required',
        message: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω
    const decoded = jwt.verify(String(token), JWT_SECRET) as any;
    
    if (decoded.type !== 'telegram') {
      return res.status(401).json({
        error: 'Invalid token type',
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    const user = await prisma.user.findUnique({
      where: { id: decoded.userId },
      select: {
        id: true,
        tgId: true,
        firstName: true,
        lastName: true,
        username: true,
        photoUrl: true,
        createdAt: true,
        lastLoginAt: true,
      }
    });

    if (!user) {
      return res.status(404).json({
        error: 'User not found',
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    res.json({
      success: true,
      user,
      token: String(token),
    });

  } catch (error) {
    console.error('‚ùå Error checking auth status:', error);
    res.status(401).json({
      error: 'Invalid token',
      message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
    });
  }
});

export default router;
