import crypto from 'crypto';
import jwt from 'jsonwebtoken';
import { telegramService } from './telegramService';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
interface VerificationCode {
  id: string;
  phoneNumber: string;
  code: string;
  expiresAt: Date;
  attempts: number;
  isUsed: boolean;
  createdAt: Date;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface TelegramUser {
  id: string;
  phoneNumber: string;
  firstName?: string;
  lastName?: string;
  username?: string;
  createdAt: Date;
}

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redis)
const verificationCodes = new Map<string, VerificationCode>();
const users = new Map<string, TelegramUser>();

export class TelegramAuthService {
  private readonly CODE_LENGTH = parseInt(process.env.VERIFICATION_CODE_LENGTH || '6');
  private readonly CODE_EXPIRY_MINUTES = parseInt(process.env.VERIFICATION_CODE_EXPIRY || '5');
  private readonly MAX_ATTEMPTS = parseInt(process.env.MAX_VERIFICATION_ATTEMPTS || '3');
  private readonly JWT_EXPIRY_DAYS = parseInt(process.env.JWT_EXPIRY_DAYS || '30');

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  private generateVerificationCode(): string {
    return Math.floor(100000 + Math.random() * 900000).toString();
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –∫–æ–¥–∞
   */
  private generateCodeId(phoneNumber: string): string {
    const timestamp = Date.now();
    const random = crypto.randomBytes(8).toString('hex');
    return `${phoneNumber}_${timestamp}_${random}`;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
   */
  async sendVerificationCode(phoneNumber: string, telegramUserId?: string): Promise<{
    success: boolean;
    codeId?: string;
    message: string;
    expiresIn?: number;
  }> {
    try {
      console.log(`üîê –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${phoneNumber}`);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
      const code = this.generateVerificationCode();
      const codeId = this.generateCodeId(phoneNumber);
      const expiresAt = new Date(Date.now() + this.CODE_EXPIRY_MINUTES * 60 * 1000);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      const verificationCode: VerificationCode = {
        id: codeId,
        phoneNumber,
        code,
        expiresAt,
        attempts: 0,
        isUsed: false,
        createdAt: new Date()
      };

      verificationCodes.set(codeId, verificationCode);

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const message = `üîê –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è SuperMock

üì± –ù–æ–º–µ—Ä: ${phoneNumber}
üî¢ –ö–æ–¥: ${code}

‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω ${this.CODE_EXPIRY_MINUTES} –º–∏–Ω—É—Ç

‚ö†Ô∏è –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º!`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
      let sent = false;
      
      if (telegramUserId) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å telegramUserId, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
        sent = await telegramService.sendMessage(telegramUserId, message, {
          parse_mode: 'HTML',
          disable_web_page_preview: true
        });
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç telegramUserId, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.warn('‚ö†Ô∏è Telegram User ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –∫–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        return {
          success: false,
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.'
        };
      }

      if (sent) {
        console.log(`‚úÖ –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${phoneNumber}`);
        return {
          success: true,
          codeId,
          message: '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram',
          expiresIn: this.CODE_EXPIRY_MINUTES * 60
        };
      } else {
        // –£–¥–∞–ª—è–µ–º –∫–æ–¥ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        verificationCodes.delete(codeId);
        return {
          success: false,
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.'
        };
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      return {
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞'
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  async verifyCode(codeId: string, inputCode: string, userInfo?: {
    firstName?: string;
    lastName?: string;
    username?: string;
  }): Promise<{
    success: boolean;
    token?: string;
    user?: any;
    message: string;
  }> {
    try {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞: ${inputCode} –¥–ª—è ID: ${codeId}`);

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      const verificationCode = verificationCodes.get(codeId);
      
      if (!verificationCode) {
        return {
          success: false,
          message: '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫–æ–¥
      if (new Date() > verificationCode.expiresAt) {
        verificationCodes.delete(codeId);
        return {
          success: false,
          message: '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–∏ –∫–æ–¥
      if (verificationCode.isUsed) {
        return {
          success: false,
          message: '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
      if (verificationCode.attempts >= this.MAX_ATTEMPTS) {
        verificationCodes.delete(codeId);
        return {
          success: false,
          message: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.'
        };
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
      verificationCode.attempts++;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
      if (verificationCode.code !== inputCode) {
        verificationCodes.set(codeId, verificationCode);
        return {
          success: false,
          message: `–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${this.MAX_ATTEMPTS - verificationCode.attempts}`
        };
      }

      // –ö–æ–¥ –≤–µ—Ä–Ω—ã–π - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
      verificationCode.isUsed = true;
      verificationCodes.set(codeId, verificationCode);

      console.log(`‚úÖ –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${verificationCode.phoneNumber}`);

      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userId = `user_${verificationCode.phoneNumber.replace(/\D/g, '')}_${Date.now()}`;
      
      const user: TelegramUser = {
        id: userId,
        phoneNumber: verificationCode.phoneNumber,
        firstName: userInfo?.firstName,
        lastName: userInfo?.lastName,
        username: userInfo?.username,
        createdAt: new Date()
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      users.set(userId, user);

      // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
      const JWT_SECRET = process.env.JWT_SECRET || 'default_secret';
      const token = jwt.sign(
        {
          userId: userId,
          phoneNumber: verificationCode.phoneNumber,
          type: 'telegram_auth',
          iat: Math.floor(Date.now() / 1000)
        },
        JWT_SECRET,
        { expiresIn: `${this.JWT_EXPIRY_DAYS}d` }
      );

      console.log(`üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${userId}`);

      return {
        success: true,
        token,
        user: {
          id: userId,
          phoneNumber: verificationCode.phoneNumber,
          firstName: user.firstName,
          lastName: user.lastName,
          username: user.username,
          createdAt: user.createdAt
        },
        message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞'
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      return {
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ —Ç–æ–∫–µ–Ω—É
   */
  async getUserByToken(token: string): Promise<{
    success: boolean;
    user?: any;
    message: string;
  }> {
    try {
      const JWT_SECRET = process.env.JWT_SECRET || 'default_secret';
      const decoded = jwt.verify(token, JWT_SECRET) as any;

      if (decoded.type !== 'telegram_auth') {
        return {
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞'
        };
      }

      const user = users.get(decoded.userId);
      
      if (!user) {
        return {
          success: false,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        };
      }

      return {
        success: true,
        user: {
          id: user.id,
          phoneNumber: user.phoneNumber,
          firstName: user.firstName,
          lastName: user.lastName,
          username: user.username,
          createdAt: user.createdAt
        },
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω'
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É:', error);
      return {
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω'
      };
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤ (–≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
   */
  cleanupExpiredCodes(): void {
    const now = new Date();
    let cleanedCount = 0;

    for (const [codeId, code] of verificationCodes.entries()) {
      if (now > code.expiresAt) {
        verificationCodes.delete(codeId);
        cleanedCount++;
      }
    }

    if (cleanedCount > 0) {
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤: ${cleanedCount}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–¥–æ–≤
   */
  getStats(): {
    activeCodes: number;
    totalUsers: number;
    expiredCodes: number;
  } {
    const now = new Date();
    let expiredCodes = 0;

    for (const code of verificationCodes.values()) {
      if (now > code.expiresAt) {
        expiredCodes++;
      }
    }

    return {
      activeCodes: verificationCodes.size - expiredCodes,
      totalUsers: users.size,
      expiredCodes
    };
  }
}

// Singleton instance
export const telegramAuthService = new TelegramAuthService();

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤
const cleanupInterval = parseInt(process.env.CODE_CLEANUP_INTERVAL || '5') * 60 * 1000;
setInterval(() => {
  telegramAuthService.cleanupExpiredCodes();
}, cleanupInterval);
