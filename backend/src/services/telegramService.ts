export class TelegramService {
  private botToken: string;
  private baseUrl: string;

  constructor() {
    this.botToken = process.env.TELEGRAM_BOT_TOKEN || 'demo_token_or_empty';
    this.baseUrl = `https://api.telegram.org/bot${this.botToken}`;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendMessage(chatId: string | number, text: string, options?: {
    parse_mode?: 'HTML' | 'Markdown';
    reply_markup?: any;
    disable_web_page_preview?: boolean;
  }): Promise<boolean> {
    try {
      if (!this.botToken || this.botToken === 'demo_token_or_empty') {
        console.warn('Telegram bot token not configured, skipping message send');
        return false;
      }

      const payload = {
        chat_id: chatId,
        text,
        ...options,
      };

      console.log(`üì± Sending Telegram message to ${chatId}:`, text);

      const response = await fetch(`${this.baseUrl}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      const result = await response.json();

      if (!response.ok) {
        console.error('Failed to send Telegram message:', result);
        return false;
      }

      console.log('‚úÖ Telegram message sent successfully');
      return true;
    } catch (error) {
      console.error('Error sending Telegram message:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async notifyMatch(userIds: string[], sessionId: string, slotTime: string): Promise<void> {
    const message = `üéØ –ù–∞–π–¥–µ–Ω –ø–∞—Ä—Ç–Ω—ë—Ä –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è!

üìÖ –í—Ä–µ–º—è: ${new Date(slotTime).toLocaleString('ru-RU')}
üîó –°–µ—Å—Å–∏—è: ${sessionId}

–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è.`;

    for (const userId of userIds) {
      await this.sendMessage(userId, message, {
        parse_mode: 'HTML',
        disable_web_page_preview: true,
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏
   */
  async notifyReminder(userId: string, sessionId: string, slotTime: string, minutesBefore: number): Promise<void> {
    const message = `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ${minutesBefore} –º–∏–Ω—É—Ç!

üìÖ –í—Ä–µ–º—è: ${new Date(slotTime).toLocaleString('ru-RU')}
üîó –°–µ—Å—Å–∏—è: ${sessionId}

–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –≤–æ–≤—Ä–µ–º—è!`;

    await this.sendMessage(userId, message, {
      parse_mode: 'HTML',
      disable_web_page_preview: true,
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
   */
  async notifyCompletion(userId: string, sessionId: string): Promise<void> {
    const message = `‚úÖ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!

üîó –°–µ—Å—Å–∏—è: ${sessionId}

–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.`;

    await this.sendMessage(userId, message, {
      parse_mode: 'HTML',
      disable_web_page_preview: true,
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å
   */
  async notifyQueued(userId: string, role: string, slotTime: string): Promise<void> {
    const roleText = role === 'interviewer' ? '–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞' : '–∫–∞–Ω–¥–∏–¥–∞—Ç–∞';
    const message = `üìù –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å!

üë§ –†–æ–ª—å: ${roleText}
üìÖ –í—Ä–µ–º—è: ${new Date(slotTime).toLocaleString('ru-RU')}

–ò—â–µ–º –≤–∞–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è...`;

    await this.sendMessage(userId, message, {
      parse_mode: 'HTML',
      disable_web_page_preview: true,
    });
  }
}

// Singleton instance
export const telegramService = new TelegramService();
