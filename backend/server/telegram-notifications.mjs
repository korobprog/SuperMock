import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

/**
 * –°–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram –±–æ—Ç
 */
class TelegramNotificationService {
  constructor() {
    this.botToken = process.env.TELEGRAM_BOT_TOKEN;
    this.botName =
      process.env.TELEGRAM_BOT_NAME ||
      process.env.VITE_TELEGRAM_BOT_NAME ||
      'SuperMock_bot';
    this.baseUrl = `https://api.telegram.org/bot${this.botToken}`;
    this.frontendUrl = process.env.FRONTEND_URL || 'https://app.supermock.ru';
    this.logoPath = process.env.TELEGRAM_BOT_LOGO_PATH || '/home/korobprog/–î–æ–∫—É–º–µ–Ω—Ç—ã/supermock/frontend/dist/logo_flag.gif';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram –±–æ—Ç–∞
   */
  async checkBotAvailability() {
    try {
      if (!this.botToken) {
        return { available: false, reason: 'Bot token not configured' };
      }

      const response = await fetch(`${this.baseUrl}/getMe`);
      const data = await response.json();

      const isAvailable = data.ok && data.result?.username === this.botName;

      return {
        available: isAvailable,
        botName: data.result?.username,
        reason: isAvailable ? 'Bot is available' : 'Bot not found or inactive',
      };
    } catch (error) {
      console.error('Error checking bot availability:', error);
      return { available: false, reason: 'Error checking bot' };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram –±–æ—Ç
   */
  async sendMessage(chatId, message, options = {}) {
    try {
      if (!this.botToken) {
        console.warn('Telegram bot token not configured');
        return { success: false, reason: 'Bot token not configured' };
      }

      const payload = {
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML',
        ...options,
      };

      const response = await fetch(`${this.baseUrl}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      const data = await response.json();

      if (data.ok) {
        console.log(`‚úÖ Telegram message sent to ${chatId}`);
        return { success: true, messageId: data.result.message_id };
      } else {
        console.error(
          `‚ùå Failed to send Telegram message to ${chatId}:`,
          data.description
        );
        return { success: false, reason: data.description };
      }
    } catch (error) {
      console.error(`‚ùå Error sending Telegram message to ${chatId}:`, error);
      return { success: false, reason: error.message };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram –±–æ—Ç
   */
  async sendPhoto(chatId, photoPath, caption = '', options = {}) {
    try {
      if (!this.botToken) {
        console.warn('Telegram bot token not configured');
        return { success: false, reason: 'Bot token not configured' };
      }

      // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
      const FormData = await import('form-data');
      const form = new FormData();
      form.append('chat_id', chatId);
      form.append('photo', photoPath);
      
      if (caption) {
        form.append('caption', caption);
        form.append('parse_mode', 'HTML');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
      if (options.reply_markup) {
        form.append('reply_markup', JSON.stringify(options.reply_markup));
      }

      const response = await fetch(`${this.baseUrl}/sendPhoto`, {
        method: 'POST',
        body: form,
      });

      const data = await response.json();

      if (data.ok) {
        console.log(`‚úÖ Telegram photo sent to ${chatId}`);
        return { success: true, messageId: data.result.message_id };
      } else {
        console.error(
          `‚ùå Failed to send Telegram photo to ${chatId}:`,
          data.description
        );
        return { success: false, reason: data.description };
      }
    } catch (error) {
      console.error(`‚ùå Error sending Telegram photo to ${chatId}:`, error);
      return { success: false, reason: error.message };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
   */
  async sendSessionCompletedNotification(userId, session, userRole) {
    try {
      const user = await prisma.user.findUnique({
        where: { id: userId },
        select: { tgId: true, firstName: true, username: true },
      });

      if (!user?.tgId) {
        console.log(`User ${userId} has no Telegram ID`);
        return { success: false, reason: 'No Telegram ID' };
      }

      const targetRole =
        userRole === 'interviewer' ? '–∫–∞–Ω–¥–∏–¥–∞—Ç–µ' : '–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–µ';
      const message = `
üéØ <b>–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>

üìã <b>–î–µ—Ç–∞–ª–∏:</b>
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${session.profession || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
‚Ä¢ –Ø–∑—ã–∫: ${session.language || '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –í–∞—à–∞ —Ä–æ–ª—å: ${userRole === 'interviewer' ? '–ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä' : '–ö–∞–Ω–¥–∏–¥–∞—Ç'}

‚≠ê <b>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫ –æ ${targetRole}!</b>

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –±—É–¥—É—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ.

<a href="${this.frontendUrl}/history">üìä –ü–µ—Ä–µ–π—Ç–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é</a>
      `.trim();

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: '‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫',
              url: `${this.frontendUrl}/history?session=${session.id}`,
            },
          ],
          [
            {
              text: 'üìä –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è',
              url: `${this.frontendUrl}/history`,
            },
          ],
        ],
      };

      return await this.sendMessage(user.tgId, message, {
        reply_markup: keyboard,
      });
    } catch (error) {
      console.error(
        `‚ùå Error sending session completed notification to ${userId}:`,
        error
      );
      return { success: false, reason: error.message };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ñ–∏–¥–±–µ–∫–µ
   */
  async sendFeedbackReminder(userId, session, userRole) {
    try {
      const user = await prisma.user.findUnique({
        where: { id: userId },
        select: { tgId: true, firstName: true, username: true },
      });

      if (!user?.tgId) {
        console.log(`User ${userId} has no Telegram ID`);
        return { success: false, reason: 'No Telegram ID' };
      }

      const targetRole =
        userRole === 'interviewer' ? '–∫–∞–Ω–¥–∏–¥–∞—Ç–µ' : '–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–µ';
      const message = `
üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ñ–∏–¥–±–µ–∫–µ</b>

–ü—Ä–∏–≤–µ—Ç, ${user.firstName || user.username || '–¥—Ä—É–≥'}!

–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫ –æ ${targetRole} –ø–æ—Å–ª–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ <b>${
        session.profession || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏'
      }</b>.

‚≠ê <b>–í–∞—à —Ñ–∏–¥–±–µ–∫ –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω!</b>
‚Ä¢ –ü–æ–º–æ–≥–∞–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
‚Ä¢ –î–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–∞—Ä—Ç–Ω–µ—Ä—É

<a href="${this.frontendUrl}/history?session=${
        session.id
      }">üìù –û—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫ —Å–µ–π—á–∞—Å</a>
      `.trim();

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: '‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫',
              url: `${this.frontendUrl}/history?session=${session.id}`,
            },
          ],
          [
            {
              text: '‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ',
              callback_data: `remind_later_${session.id}`,
            },
          ],
        ],
      };

      return await this.sendMessage(user.tgId, message, {
        reply_markup: keyboard,
      });
    } catch (error) {
      console.error(`‚ùå Error sending feedback reminder to ${userId}:`, error);
      return { success: false, reason: error.message };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Å–æ–∫–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ
   */
  async sendHighRatingNotification(userId, feedback, session) {
    try {
      const user = await prisma.user.findUnique({
        where: { id: userId },
        select: { tgId: true, firstName: true, username: true },
      });

      if (!user?.tgId) {
        console.log(`User ${userId} has no Telegram ID`);
        return { success: false, reason: 'No Telegram ID' };
      }

      const message = `
‚≠ê <b>–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥!</b>

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, ${user.firstName || user.username || '–¥—Ä—É–≥'}!

–í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–ª–∏—á–Ω—É—é –æ—Ü–µ–Ω–∫—É <b>${
        feedback.rating
      }/5</b> –∑–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ <b>${
        session.profession || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏'
      }</b>!

üéâ <b>–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ–º!</b>

${feedback.comments ? `üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n"${feedback.comments}"` : ''}

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üöÄ

<a href="${this.frontendUrl}/history">üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã</a>
      `.trim();

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: 'üìä –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è',
              url: `${this.frontendUrl}/history`,
            },
          ],
          [
            {
              text: 'üéØ –ù–∞–π—Ç–∏ –Ω–æ–≤–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ',
              url: `${this.frontendUrl}`,
            },
          ],
        ],
      };

      return await this.sendMessage(user.tgId, message, {
        reply_markup: keyboard,
      });
    } catch (error) {
      console.error(
        `‚ùå Error sending high rating notification to ${userId}:`,
        error
      );
      return { success: false, reason: error.message };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
   */
  async sendAutoCompletedNotification(userId, session, userRole) {
    try {
      const user = await prisma.user.findUnique({
        where: { id: userId },
        select: { tgId: true, firstName: true, username: true },
      });

      if (!user?.tgId) {
        console.log(`User ${userId} has no Telegram ID`);
        return { success: false, reason: 'No Telegram ID' };
      }

      const targetRole =
        userRole === 'interviewer' ? '–∫–∞–Ω–¥–∏–¥–∞—Ç–µ' : '–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–µ';
      const message = `
üîÑ <b>–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>

–ü—Ä–∏–≤–µ—Ç, ${user.firstName || user.username || '–¥—Ä—É–≥'}!

–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ <b>${
        session.profession || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏'
      }</b> –±—ã–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π.

üìã <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>
‚Ä¢ –°–µ—Å—Å–∏—è –¥–ª–∏–ª–∞—Å—å –±–æ–ª–µ–µ 2 —á–∞—Å–æ–≤
‚Ä¢ –û–¥–∏–Ω –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∏–Ω—É–ª —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã

‚≠ê <b>–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫ –æ ${targetRole}!</b>

<a href="${this.frontendUrl}/history?session=${
        session.id
      }">üìù –û—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫</a>
      `.trim();

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: '‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫',
              url: `${this.frontendUrl}/history?session=${session.id}`,
            },
          ],
          [
            {
              text: 'üéØ –ù–∞–π—Ç–∏ –Ω–æ–≤–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ',
              url: `${this.frontendUrl}`,
            },
          ],
        ],
      };

      return await this.sendMessage(user.tgId, message, {
        reply_markup: keyboard,
      });
    } catch (error) {
      console.error(
        `‚ùå Error sending auto completed notification to ${userId}:`,
        error
      );
      return { success: false, reason: error.message };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏
   */
  async sendUpcomingSessionReminder(userId, session, userRole) {
    try {
      const user = await prisma.user.findUnique({
        where: { id: userId },
        select: { tgId: true, firstName: true, username: true },
      });

      if (!user?.tgId) {
        console.log(`User ${userId} has no Telegram ID`);
        return { success: false, reason: 'No Telegram ID' };
      }

      const sessionTime = new Date(session.slotUtc);
      const timeString = sessionTime.toLocaleString('ru-RU', {
        timeZone: 'UTC',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
      });

      const message = `
‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏</b>

–ü—Ä–∏–≤–µ—Ç, ${user.firstName || user.username || '–¥—Ä—É–≥'}!

–ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –Ω–∞—á–Ω–µ—Ç—Å—è –≤–∞—à–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!

üìã <b>–î–µ—Ç–∞–ª–∏:</b>
‚Ä¢ –í—Ä–µ–º—è: ${timeString} UTC
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${session.profession || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
‚Ä¢ –Ø–∑—ã–∫: ${session.language || '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –í–∞—à–∞ —Ä–æ–ª—å: ${userRole === 'interviewer' ? '–ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä' : '–ö–∞–Ω–¥–∏–¥–∞—Ç'}
‚Ä¢ –ö–æ–º–Ω–∞—Ç–∞: ${session.jitsiRoom || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

üéØ <b>–ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã!</b>

<a href="${this.frontendUrl}/interview/${
        session.id
      }">üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é</a>
      `.trim();

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: 'üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è',
              url: `${this.frontendUrl}/interview/${session.id}`,
            },
          ],
          [
            {
              text: 'üìã –î–µ—Ç–∞–ª–∏ —Å–µ—Å—Å–∏–∏',
              url: `${this.frontendUrl}/history?session=${session.id}`,
            },
          ],
        ],
      };

      return await this.sendMessage(user.tgId, message, {
        reply_markup: keyboard,
      });
    } catch (error) {
      console.error(
        `‚ùå Error sending upcoming session reminder to ${userId}:`,
        error
      );
      return { success: false, reason: error.message };
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram –±–æ—Ç–∞
   */
  async handleCallback(callbackData, chatId, user) {
    try {
      if (callbackData.startsWith('remind_later_')) {
        const sessionId = callbackData.replace('remind_later_', '');

        // –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ 3 —á–∞—Å–∞ –ø–æ–∑–∂–µ
        const remindLater = new Date(Date.now() + 3 * 60 * 60 * 1000);

        await prisma.notification.create({
          data: {
            userId: callbackData.userId, // –ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å userId
            type: 'feedback_reminder',
            title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ñ–∏–¥–±–µ–∫–µ (–æ—Ç–ª–æ–∂–µ–Ω–æ)',
            message: `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ñ–∏–¥–±–µ–∫–µ –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}`,
            status: 'active',
            priority: 2,
            actionData: JSON.stringify({
              sessionId,
              action: 'give_feedback',
              scheduledFor: remindLater.toISOString(),
            }),
            expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
          },
        });

        return { success: true, message: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ 3 —á–∞—Å–∞' };
      }

      if (callbackData === 'show_stats') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await prisma.user.findFirst({
          where: { tgId: String(user.id) },
        });

        if (user) {
          // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const stats = await this.getUserStats(user.id);
          return await this.sendUserStats(user.id, stats);
        } else {
          return await this.sendMessage(
            chatId,
            '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.'
          );
        }
      }

      if (callbackData === 'help') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
        const helpMessage = `
‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ SuperMock</b>

üéØ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:</b>

üé¨ <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É START</b> - –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ SuperMock
üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é</b> - —É–∫–∞–∂–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è
üë§ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å</b> - –∫–∞–Ω–¥–∏–¥–∞—Ç –∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä
üîç <b>–ù–∞–π–¥–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ</b> - —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–±–µ—Ä–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
üé• <b>–ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ</b> - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –≤–∏–¥–µ–æ—Å–≤—è–∑—å
‚≠ê <b>–û—Å—Ç–∞–≤—å—Ç–µ —Ñ–∏–¥–±–µ–∫</b> - –æ—Ü–µ–Ω–∏—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ü–µ–Ω–∫—É

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîó <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</b>
‚Ä¢ <a href="${this.frontendUrl}">–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</a>
‚Ä¢ <a href="${this.frontendUrl}/history">–ò—Å—Ç–æ—Ä–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π</a>

üí° <b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã
‚Ä¢ –û—Å—Ç–∞–≤–ª—è–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–¥–±–µ–∫
‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º! üìß
        `.trim();

        // –ë–æ–ª—å—à–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const keyboard = {
          keyboard: [
            [
              {
                text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å SuperMock',
                web_app: {
                  url: 'https://app.supermock.ru',
                },
              },
            ],
          ],
          resize_keyboard: true,
          one_time_keyboard: false,
          selective: false,
        };

        // Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        const inlineKeyboard = {
          inline_keyboard: [
            [
              {
                text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                callback_data: 'show_stats',
              },
            ],
          ],
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–æ–ª—å—à–æ–π –∫–Ω–æ–ø–∫–æ–π
        await this.sendMessage(chatId, helpMessage, {
          reply_markup: keyboard,
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
        const additionalMessage = `
üì± <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
        `.trim();

        return await this.sendMessage(chatId, additionalMessage, {
          reply_markup: inlineKeyboard,
        });
      }

      return { success: false, message: 'Unknown callback' };
    } catch (error) {
      console.error('‚ùå Error handling callback:', error);
      return { success: false, message: 'Error handling callback' };
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
   */
  async handleStartCommand(chatId, user) {
    try {
      if (!this.botToken) {
        console.warn('Telegram bot token not configured');
        return { success: false, reason: 'Bot token not configured' };
      }

      const welcomeMessage = `
üöÄ <b>Welcome to SuperMock!</b>

Hello, ${user.first_name || user.username || 'friend'}! üëã

üéØ <b>SuperMock</b> is a platform for practicing interviews with real people.

üìã <b>What you can do:</b>
‚Ä¢ Find interviews in your profession
‚Ä¢ Practice as a candidate or interviewer
‚Ä¢ Receive feedback from partners
‚Ä¢ Track your progress

üè¢ <b>About SuperMock:</b>
SuperMock is an innovative platform that connects professionals for realistic interview practice. Our mission is to help people improve their interview skills through real conversations with peers in their industry.

üí° <b>How it works:</b>
1. Choose your profession and role (candidate or interviewer)
2. Find a suitable partner for practice
3. Conduct a realistic interview using our video platform
4. Give and receive constructive feedback
5. Track your progress and improve your skills

Click the <b>Instructions</b> button below to learn how to conduct mock interviews! üéâ
      `.trim();

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
      const keyboard = {
        keyboard: [
          [
            {
              text: 'üìñ Instructions for Mock Interviews',
              url: 'https://supermock.ru/instructions',
            },
          ],
        ],
        resize_keyboard: true,
        one_time_keyboard: false,
        selective: false,
      };

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ inline —Ñ–æ—Ä–º–∞—Ç–µ
      const inlineKeyboard = {
        inline_keyboard: [
          [
            {
              text: 'üöÄ Open Application',
              url: 'https://app.supermock.ru',
            },
          ],
          [
            {
              text: 'üìä My Statistics',
              callback_data: 'show_stats',
            },
          ],
          [
            {
              text: '‚ùì Help',
              callback_data: 'help',
            },
          ],
        ],
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      const logoPath = this.logoPath;
      const logoCaption = `
üöÄ <b>Welcome to SuperMock!</b>

Hello, ${user.first_name || user.username || 'friend'}! üëã

üéØ <b>SuperMock</b> is a platform for practicing interviews with real people.

üìã <b>What you can do:</b>
‚Ä¢ Find interviews in your profession
‚Ä¢ Practice as a candidate or interviewer
‚Ä¢ Receive feedback from partners
‚Ä¢ Track your progress

üè¢ <b>About SuperMock:</b>
SuperMock is an innovative platform that connects professionals for realistic interview practice. Our mission is to help people improve their interview skills through real conversations with peers in their industry.

üí° <b>How it works:</b>
1. Choose your profession and role (candidate or interviewer)
2. Find a suitable partner for practice
3. Conduct a realistic interview using our video platform
4. Give and receive constructive feedback
5. Track your progress and improve your skills

Click the <b>Instructions</b> button below to learn how to conduct mock interviews! üéâ
      `.trim();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
      const fs = await import('fs');
      if (fs.existsSync(logoPath)) {
        await this.sendPhoto(chatId, logoPath, logoCaption, {
          reply_markup: keyboard,
        });
      } else {
        console.warn(`Logo file not found: ${logoPath}, sending text message instead`);
        await this.sendMessage(chatId, logoCaption, {
          reply_markup: keyboard,
        });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
      const additionalMessage = `
üì± <b>Additional Features:</b>

After studying the instructions, use the buttons below for quick access to bot functions.
      `.trim();

      return await this.sendMessage(chatId, additionalMessage, {
        reply_markup: inlineKeyboard,
      });
    } catch (error) {
      console.error(`‚ùå Error handling start command for ${chatId}:`, error);
      return { success: false, reason: error.message };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserStats(userId) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
      const completedSessions = await prisma.session.count({
        where: {
          OR: [
            { interviewerId: userId, status: 'completed' },
            { candidateId: userId, status: 'completed' },
          ],
        },
      });

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∏–¥–±–µ–∫–æ–≤
      const givenFeedbacks = await prisma.feedback.count({
        where: { fromUserId: userId },
      });

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ñ–∏–¥–±–µ–∫–æ–≤
      const receivedFeedbacks = await prisma.feedback.count({
        where: { toUserId: userId },
      });

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
      const avgRatingResult = await prisma.feedback.aggregate({
        where: { toUserId: userId },
        _avg: { rating: true },
      });

      const averageRating = avgRatingResult._avg.rating || 0;

      return {
        completedSessions,
        givenFeedbacks,
        receivedFeedbacks,
        averageRating: Math.round(averageRating * 10) / 10, // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
      };
    } catch (error) {
      console.error(`‚ùå Error getting user stats for ${userId}:`, error);
      return {
        completedSessions: 0,
        givenFeedbacks: 0,
        receivedFeedbacks: 0,
        averageRating: 0,
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º —Ñ–∏–¥–±–µ–∫–µ
   */
  async sendFeedbackReceivedNotification(userId, session, feedback, targetUser) {
    try {
      if (!targetUser?.tgId) {
        console.log(`User ${userId} has no Telegram ID`);
        return { success: false, reason: 'No Telegram ID' };
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ —Ñ–∏–¥–±–µ–∫–∞
      const fromUser = await prisma.user.findUnique({
        where: { id: feedback.fromUserId },
        select: { firstName: true, username: true },
      });

      const fromUserName = fromUser?.firstName || fromUser?.username || '–£—á–∞—Å—Ç–Ω–∏–∫';
      const targetUserName = targetUser.firstName || targetUser.username || '–¥—Ä—É–≥';

      const message = `
‚≠ê <b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π —Ñ–∏–¥–±–µ–∫!</b>

–ü—Ä–∏–≤–µ—Ç, ${targetUserName}!

${fromUserName} –æ—Å—Ç–∞–≤–∏–ª(–∞) —Ñ–∏–¥–±–µ–∫ –æ –≤–∞—à–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏ –ø–æ <b>${session.profession || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏'}</b>.

üìä <b>–û—Ü–µ–Ω–∫–∞:</b> ${feedback.rating}/5 –∑–≤–µ–∑–¥

${feedback.comments ? `üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n"${feedback.comments}"` : ''}

${feedback.recommendations ? `üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"${feedback.recommendations}"` : ''}

<a href="${this.frontendUrl}/history">üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏–∏</a>
      `.trim();

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏–∏',
              url: `${this.frontendUrl}/history`,
            },
          ],
          [
            {
              text: 'üéØ –ù–∞–π—Ç–∏ –Ω–æ–≤–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ',
              url: `${this.frontendUrl}`,
            },
          ],
        ],
      };

      return await this.sendMessage(targetUser.tgId, message, {
        reply_markup: keyboard,
      });
    } catch (error) {
      console.error(`‚ùå Error sending feedback received notification to ${userId}:`, error);
      return { success: false, reason: error.message };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendUserStats(userId, stats) {
    try {
      const user = await prisma.user.findUnique({
        where: { id: userId },
        select: { tgId: true, firstName: true, username: true },
      });

      if (!user?.tgId) {
        console.log(`User ${userId} has no Telegram ID`);
        return { success: false, reason: 'No Telegram ID' };
      }

      const message = `
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

–ü—Ä–∏–≤–µ—Ç, ${user.firstName || user.username || '–¥—Ä—É–≥'}!

üìà <b>–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π: ${stats.completedSessions}
‚Ä¢ –û—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∏–¥–±–µ–∫–æ–≤: ${stats.givenFeedbacks}
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ñ–∏–¥–±–µ–∫–æ–≤: ${stats.receivedFeedbacks}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${stats.averageRating}/5

üèÜ <b>–í–∞—à —Å—Ç–∞—Ç—É—Å:</b>
${
  stats.averageRating >= 4.5
    ? '‚≠ê –ó–≤–µ–∑–¥–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫'
    : stats.averageRating >= 4.0
    ? 'üåü –û—Ç–ª–∏—á–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫'
    : stats.averageRating >= 3.5
    ? '‚ú® –•–æ—Ä–æ—à–∏–π —É—á–∞—Å—Ç–Ω–∏–∫'
    : 'üë§ –£—á–∞—Å—Ç–Ω–∏–∫'
}

<a href="${this.frontendUrl}/history">üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
      `.trim();

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: 'üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
              url: `${this.frontendUrl}/history`,
            },
          ],
          [
            {
              text: 'üéØ –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ',
              url: `${this.frontendUrl}`,
            },
          ],
        ],
      };

      return await this.sendMessage(user.tgId, message, {
        reply_markup: keyboard,
      });
    } catch (error) {
      console.error(`‚ùå Error sending user stats to ${userId}:`, error);
      return { success: false, reason: error.message };
    }
  }
}

export default TelegramNotificationService;
