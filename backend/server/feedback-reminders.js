import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();
import TelegramNotificationService from './telegram-notifications.js';

/**
 * –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ñ–∏–¥–±–µ–∫–µ
 */
class FeedbackReminderService {
  constructor() {
    this.reminderIntervals = {
      first: 24 * 60 * 60 * 1000, // 24 —á–∞—Å–∞
      second: 3 * 24 * 60 * 60 * 1000, // 3 –¥–Ω—è
      final: 7 * 24 * 60 * 60 * 1000, // 7 –¥–Ω–µ–π
    };
    this.telegramService = new TelegramNotificationService();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –±–µ–∑ —Ñ–∏–¥–±–µ–∫–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   */
  async checkAndCreateReminders() {
    try {
      console.log('üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ñ–∏–¥–±–µ–∫–µ...');

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
      const completedSessions = await prisma.session.findMany({
        where: {
          status: 'completed',
          completedAt: {
            lt: new Date(Date.now() - this.reminderIntervals.first),
          },
        },
        include: {
          interviewer: true,
          candidate: true,
          feedback: true,
        },
      });

      let remindersCreated = 0;

      for (const session of completedSessions) {
        const reminders = await this.createRemindersForSession(session);
        remindersCreated += reminders.length;
      }

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${remindersCreated} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ñ–∏–¥–±–µ–∫–µ`);
      return remindersCreated;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏
   */
  async createRemindersForSession(session) {
    const reminders = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–∏–¥–±–µ–∫–∏ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const existingFeedbacks = session.feedback || [];
    const feedbackFromUserIds = existingFeedbacks.map((f) => f.fromUserId);

    // –î–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞
    if (
      session.interviewer &&
      !feedbackFromUserIds.includes(session.interviewer.id)
    ) {
      const reminder = await this.createReminderForUser(
        session.interviewer.id,
        session,
        'interviewer'
      );
      if (reminder) reminders.push(reminder);
    }

    // –î–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    if (
      session.candidate &&
      !feedbackFromUserIds.includes(session.candidate.id)
    ) {
      const reminder = await this.createReminderForUser(
        session.candidate.id,
        session,
        'candidate'
      );
      if (reminder) reminders.push(reminder);
    }

    return reminders;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async createReminderForUser(userId, session, userRole) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingReminder = await prisma.notification.findFirst({
        where: {
          userId,
          type: 'feedback_reminder',
          actionData: {
            contains: session.id,
          },
          status: 'active',
        },
      });

      if (existingReminder) {
        return null; // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      }

      const targetUser =
        userRole === 'interviewer' ? session.candidate : session.interviewer;
      const targetRole =
        userRole === 'interviewer' ? '–∫–∞–Ω–¥–∏–¥–∞—Ç–µ' : '–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–µ';

      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const reminder = await prisma.notification.create({
        data: {
          userId,
          type: 'feedback_reminder',
          title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ñ–∏–¥–±–µ–∫–µ',
          message: `–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫ –æ ${targetRole} –ø–æ—Å–ª–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ ${session.profession}.`,
          status: 'active',
          priority: 2,
          actionData: JSON.stringify({
            sessionId: session.id,
            action: 'give_feedback',
            targetUserId: targetUser?.id,
            reminderType: 'feedback',
          }),
          expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π
        },
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç
      const telegramResult = await this.telegramService.sendFeedbackReminder(
        userId,
        session,
        userRole
      );

      if (telegramResult.success) {
        console.log(
          `üì± Telegram –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –æ —Å–µ—Å—Å–∏–∏ ${session.id}`
        );
      } else {
        console.log(
          `‚ö†Ô∏è Telegram –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}: ${telegramResult.reason}`
        );
      }

      console.log(
        `üìß –°–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ —Å–µ—Å—Å–∏–∏ ${session.id}`
      );
      return reminder;
    } catch (error) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`,
        error
      );
      return null;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Å–æ–∫–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö
   */
  async sendHighRatingNotifications() {
    try {
      console.log('‚≠ê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Å–æ–∫–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤...');

      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–¥–±–µ–∫–∏ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º 5 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
      const highRatings = await prisma.feedback.findMany({
        where: {
          rating: 5,
          createdAt: {
            gte: new Date(Date.now() - 24 * 60 * 60 * 1000),
          },
        },
        include: {
          toUser: true,
          session: true,
        },
      });

      let notificationsSent = 0;

      for (const feedback of highRatings) {
        const notification = await this.createHighRatingNotification(feedback);
        if (notification) notificationsSent++;
      }

      console.log(
        `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${notificationsSent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤—ã—Å–æ–∫–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö`
      );
      return notificationsSent;
    } catch (error) {
      console.error(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤—ã—Å–æ–∫–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö:',
        error
      );
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Å–æ–∫–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ
   */
  async createHighRatingNotification(feedback) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ
      const existingNotification = await prisma.notification.findFirst({
        where: {
          userId: feedback.toUserId,
          type: 'high_rating',
          actionData: {
            contains: feedback.id.toString(),
          },
        },
      });

      if (existingNotification) {
        return null; // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      }

      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const notification = await prisma.notification.create({
        data: {
          userId: feedback.toUserId,
          type: 'high_rating',
          title: '–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥! ‚≠ê',
          message: `–í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–ª–∏—á–Ω—É—é –æ—Ü–µ–Ω–∫—É (5/5) –∑–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ ${feedback.session.profession}!`,
          status: 'active',
          priority: 3,
          actionData: JSON.stringify({
            feedbackId: feedback.id,
            sessionId: feedback.sessionId,
            rating: feedback.rating,
            action: 'view_feedback',
          }),
        },
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç
      const telegramResult =
        await this.telegramService.sendHighRatingNotification(
          feedback.toUserId,
          feedback,
          feedback.session
        );

      if (telegramResult.success) {
        console.log(
          `üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Å–æ–∫–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${feedback.toUserId}`
        );
      } else {
        console.log(
          `‚ö†Ô∏è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Å–æ–∫–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${feedback.toUserId}: ${telegramResult.reason}`
        );
      }

      console.log(
        `‚≠ê –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Å–æ–∫–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${feedback.toUserId}`
      );
      return notification;
    } catch (error) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Å–æ–∫–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ:`,
        error
      );
      return null;
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏
   */
  async autoCompleteOldSessions() {
    try {
      console.log('üïê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π...');

      // –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏–∏ —Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'scheduled'
      const oldSessions = await prisma.session.findMany({
        where: {
          status: 'scheduled',
          createdAt: {
            lt: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 —á–∞—Å–∞
          },
        },
        include: {
          interviewer: true,
          candidate: true,
        },
      });

      let completedCount = 0;

      for (const session of oldSessions) {
        await this.autoCompleteSession(session);
        completedCount++;
      }

      console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ${completedCount} —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π`);
      return completedCount;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π:', error);
      throw error;
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ–¥–Ω—É —Å–µ—Å—Å–∏—é
   */
  async autoCompleteSession(session) {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
      await prisma.session.update({
        where: { id: session.id },
        data: {
          status: 'completed',
          completedAt: new Date(),
        },
      });

      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      const notifications = [];

      if (session.interviewer) {
        notifications.push({
          userId: session.interviewer.id,
          type: 'session_auto_completed',
          title: '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
          message: `–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ ${session.profession} –±—ã–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫.`,
          status: 'active',
          priority: 1,
          actionData: JSON.stringify({
            sessionId: session.id,
            action: 'give_feedback',
            targetUserId: session.candidate?.id,
            autoCompleted: true,
          }),
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const telegramResult =
          await this.telegramService.sendAutoCompletedNotification(
            session.interviewer.id,
            session,
            'interviewer'
          );

        if (telegramResult.success) {
          console.log(
            `üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—É ${session.interviewer.id}`
          );
        }
      }

      if (session.candidate) {
        notifications.push({
          userId: session.candidate.id,
          type: 'session_auto_completed',
          title: '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
          message: `–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ ${session.profession} –±—ã–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫.`,
          status: 'active',
          priority: 1,
          actionData: JSON.stringify({
            sessionId: session.id,
            action: 'give_feedback',
            targetUserId: session.interviewer?.id,
            autoCompleted: true,
          }),
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const telegramResult =
          await this.telegramService.sendAutoCompletedNotification(
            session.candidate.id,
            session,
            'candidate'
          );

        if (telegramResult.success) {
          console.log(
            `üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—É ${session.candidate.id}`
          );
        }
      }

      if (notifications.length > 0) {
        await prisma.notification.createMany({
          data: notifications,
        });
      }

      console.log(`üîÑ –°–µ—Å—Å–∏—è ${session.id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
    } catch (error) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ ${session.id}:`,
        error
      );
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
   */
  async runAllTasks() {
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á...\n');

      const results = {
        remindersCreated: 0,
        highRatingNotifications: 0,
        sessionsAutoCompleted: 0,
      };

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ñ–∏–¥–±–µ–∫–µ
      results.remindersCreated = await this.checkAndCreateReminders();

      // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Å–æ–∫–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö
      results.highRatingNotifications =
        await this.sendHighRatingNotifications();

      // 3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏
      results.sessionsAutoCompleted = await this.autoCompleteOldSessions();

      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á:');
      console.log(`   - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ñ–∏–¥–±–µ–∫–µ: ${results.remindersCreated}`);
      console.log(
        `   - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤—ã—Å–æ–∫–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö: ${results.highRatingNotifications}`
      );
      console.log(
        `   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${results.sessionsAutoCompleted}`
      );

      return results;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á:', error);
      throw error;
    }
  }
}

export default FeedbackReminderService;
