{
  "profession": "backend-developer",
  "language": "es",
  "categories": [
    {
      "id": "interview-questions",
      "name": "Preguntas de Entrevista",
      "count": 156,
      "icon": "💬",
      "color": "bg-blue-100 text-blue-800"
    },
    {
      "id": "technical-tasks",
      "name": "Tareas Técnicas",
      "count": 89,
      "icon": "⚡",
      "color": "bg-green-100 text-green-800"
    },
    {
      "id": "system-design",
      "name": "Diseño de Sistemas",
      "count": 34,
      "icon": "🏗️",
      "color": "bg-purple-100 text-purple-800"
    },
    {
      "id": "behavioral",
      "name": "Preguntas de Comportamiento",
      "count": 67,
      "icon": "🧠",
      "color": "bg-orange-100 text-orange-800"
    },
    {
      "id": "algorithms",
      "name": "Algoritmos y Estructuras de Datos",
      "count": 123,
      "icon": "📊",
      "color": "bg-red-100 text-red-800"
    },
    {
      "id": "best-practices",
      "name": "Mejores Prácticas",
      "count": 78,
      "icon": "⭐",
      "color": "bg-yellow-100 text-yellow-800"
    }
  ],
  "materials": [
    {
      "id": 1,
      "title": "Node.js: Fundamentos y Arquitectura",
      "description": "Análisis profundo de la arquitectura de Node.js, event loop y principios fundamentales para desarrollo backend",
      "category": "interview-questions",
      "difficulty": "intermediate",
      "readTime": 20,
      "rating": 4.8,
      "reads": 1156,
      "tags": ["Node.js", "JavaScript", "Backend", "Arquitectura"],
      "content": "# Node.js: Fundamentos y Arquitectura\n\n## Introducción\n\nNode.js es un entorno de ejecución de JavaScript construido sobre el motor V8 de Chrome que permite la ejecución de JavaScript en el servidor.\n\n## Arquitectura de Node.js\n\n```javascript\n// Ejemplo del Event Loop\nconsole.log('1');\nsetTimeout(() => console.log('2'), 0);\nsetImmediate(() => console.log('3'));\nprocess.nextTick(() => console.log('4'));\nconsole.log('5');\n\n// Salida: 1, 5, 4, 2, 3\n```\n\n## Sistema de Módulos\n\n```javascript\n// CommonJS\nconst fs = require('fs');\nconst path = require('path');\n\n// ES Modules\nimport fs from 'fs';\nimport path from 'path';\n\n// Creando un módulo\nmodule.exports = {\n  add: (a, b) => a + b,\n  subtract: (a, b) => a - b\n};\n```\n\n## Programación Asíncrona\n\n```javascript\n// Callbacks\nfs.readFile('archivo.txt', 'utf8', (err, data) => {\n  if (err) {\n    console.error('Error:', err);\n    return;\n  }\n  console.log('Datos:', data);\n});\n\n// Promesas\nconst readFilePromise = (filename) => {\n  return new Promise((resolve, reject) => {\n    fs.readFile(filename, 'utf8', (err, data) => {\n      if (err) reject(err);\n      else resolve(data);\n    });\n  });\n};\n\n// Async/Await\nasync function readFiles() {\n  try {\n    const data1 = await readFilePromise('archivo1.txt');\n    const data2 = await readFilePromise('archivo2.txt');\n    console.log(data1, data2);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n```\n\n## Servidor HTTP\n\n```javascript\nconst http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, { 'Content-Type': 'application/json' });\n  \n  const response = {\n    message: '¡Hola, Mundo!',\n    timestamp: new Date().toISOString()\n  };\n  \n  res.end(JSON.stringify(response));\n});\n\nserver.listen(3000, () => {\n  console.log('Servidor ejecutándose en el puerto 3000');\n});\n```\n\n## Framework Express.js\n\n```javascript\nconst express = require('express');\nconst app = express();\n\n// Middleware\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Rutas\napp.get('/api/usuarios', (req, res) => {\n  res.json({ usuarios: [] });\n});\n\napp.post('/api/usuarios', (req, res) => {\n  const { nombre, email } = req.body;\n  // Lógica de creación de usuario\n  res.status(201).json({ message: 'Usuario creado' });\n});\n\napp.listen(3000, () => {\n  console.log('Servidor Express ejecutándose');\n});\n```\n\n## Manejo de Errores\n\n```javascript\n// Manejadores globales de errores\nprocess.on('uncaughtException', (err) => {\n  console.error('Excepción no capturada:', err);\n  process.exit(1);\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Promesa rechazada no manejada:', reason);\n});\n\n// Middleware de manejo de errores en Express\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).json({ error: '¡Algo salió mal!' });\n});\n```\n\n## Conclusión\n\nNode.js proporciona una plataforma poderosa para construir aplicaciones del lado del servidor escalables. Entender su arquitectura y principios es crucial para desarrolladores backend.",
      "isNew": false,
      "isPopular": true,
      "createdAt": "2024-01-01T00:00:00Z"
    }
  ]
}
