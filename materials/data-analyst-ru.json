{
  "profession": "data-analyst",
  "language": "ru",
  "categories": [
    {
      "id": "interview-questions",
      "name": "–í–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏",
      "count": 142,
      "icon": "üí¨",
      "color": "bg-blue-100 text-blue-800"
    },
    {
      "id": "technical-tasks",
      "name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è",
      "count": 76,
      "icon": "‚ö°",
      "color": "bg-green-100 text-green-800"
    },
    {
      "id": "system-design",
      "name": "–°–∏—Å—Ç–µ–º–Ω—ã–π –¥–∏–∑–∞–π–Ω",
      "count": 28,
      "icon": "üèóÔ∏è",
      "color": "bg-purple-100 text-purple-800"
    },
    {
      "id": "behavioral",
      "name": "–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã",
      "count": 54,
      "icon": "üß†",
      "color": "bg-orange-100 text-orange-800"
    },
    {
      "id": "algorithms",
      "name": "–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö",
      "count": 89,
      "icon": "üìä",
      "color": "bg-red-100 text-red-800"
    },
    {
      "id": "best-practices",
      "name": "–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏",
      "count": 67,
      "icon": "‚≠ê",
      "color": "bg-yellow-100 text-yellow-800"
    }
  ],
  "materials": [
    {
      "id": 1,
      "title": "SQL –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤: –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ",
      "description": "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ SQL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏",
      "category": "interview-questions",
      "difficulty": "intermediate",
      "readTime": 20,
      "rating": 4.8,
      "reads": 1156,
      "tags": ["SQL", "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", "PostgreSQL"],
      "content": "# SQL –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤: –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ\n\n## –û—Å–Ω–æ–≤—ã SQL\n\n### SELECT –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è\n\n```sql\n-- –ë–∞–∑–æ–≤—ã–π SELECT\nSELECT column1, column2\nFROM table_name\nWHERE condition;\n\n-- –ü—Ä–∏–º–µ—Ä —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π\nSELECT user_id, name, email, created_at\nFROM users\nWHERE created_at >= '2024-01-01'\n  AND status = 'active';\n```\n\n### –ê–≥—Ä–µ–≥–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n\n```sql\n-- –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É\nSELECT \n  status,\n  COUNT(*) as user_count,\n  AVG(age) as avg_age\nFROM users\nGROUP BY status\nHAVING COUNT(*) > 10;\n```\n\n## –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏\n\n### Window Functions\n\n```sql\n-- –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\nSELECT \n  user_id,\n  name,\n  activity_score,\n  ROW_NUMBER() OVER (ORDER BY activity_score DESC) as rank,\n  RANK() OVER (ORDER BY activity_score DESC) as rank_with_ties,\n  DENSE_RANK() OVER (ORDER BY activity_score DESC) as dense_rank\nFROM user_activity;\n\n-- –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ\nSELECT \n  date,\n  revenue,\n  AVG(revenue) OVER (\n    ORDER BY date \n    ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n  ) as moving_avg_7d\nFROM daily_revenue;\n```\n\n### CTE (Common Table Expressions)\n\n```sql\nWITH user_stats AS (\n  SELECT \n    user_id,\n    COUNT(*) as order_count,\n    SUM(amount) as total_spent\n  FROM orders\n  GROUP BY user_id\n),\nhigh_value_users AS (\n  SELECT user_id\n  FROM user_stats\n  WHERE total_spent > 1000\n)\nSELECT u.name, us.order_count, us.total_spent\nFROM users u\nJOIN user_stats us ON u.id = us.user_id\nWHERE u.id IN (SELECT user_id FROM high_value_users);\n```\n\n## –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤\n\n```sql\n-- –ú–µ—Å—è—á–Ω—ã–π —Ä–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\nSELECT \n  DATE_TRUNC('month', created_at) as month,\n  COUNT(*) as new_users,\n  LAG(COUNT(*)) OVER (ORDER BY DATE_TRUNC('month', created_at)) as prev_month,\n  (COUNT(*) - LAG(COUNT(*)) OVER (ORDER BY DATE_TRUNC('month', created_at))) / \n    LAG(COUNT(*)) OVER (ORDER BY DATE_TRUNC('month', created_at)) * 100 as growth_percent\nFROM users\nGROUP BY DATE_TRUNC('month', created_at)\nORDER BY month;\n```\n\n## –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤\n\n```sql\n-- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤\nCREATE INDEX idx_users_status_created ON users(status, created_at);\nCREATE INDEX idx_orders_user_date ON orders(user_id, order_date);\n\n-- –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\nEXPLAIN ANALYZE\nSELECT u.name, COUNT(o.id) as order_count\nFROM users u\nJOIN orders o ON u.id = o.user_id\nWHERE u.status = 'active'\n  AND o.order_date >= '2024-01-01'\nGROUP BY u.id, u.name;\n```\n\n## –†–∞–±–æ—Ç–∞ —Å JSON\n\n```sql\n-- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON\nSELECT \n  id,\n  data->>'name' as name,\n  data->>'email' as email,\n  (data->>'age')::int as age\nFROM user_profiles\nWHERE data->>'city' = '–ú–æ—Å–∫–≤–∞';\n\n-- –ê–≥—Ä–µ–≥–∞—Ü–∏—è JSON –¥–∞–Ω–Ω—ã—Ö\nSELECT \n  category,\n  jsonb_agg(\n    jsonb_build_object(\n      'id', id,\n      'name', name,\n      'price', price\n    )\n  ) as products\nFROM products\nGROUP BY category;\n```\n\n## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ\n\nSQL –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö. –í–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –Ω–æ –∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ –æ–±—ä–µ–º–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.",
      "isNew": false,
      "isPopular": true,
      "createdAt": "2024-01-01T00:00:00Z"
    },
    {
      "id": 2,
      "title": "Python –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: Pandas –∏ NumPy",
      "description": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Python –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
      "category": "technical-tasks",
      "difficulty": "intermediate",
      "readTime": 18,
      "rating": 4.7,
      "reads": 892,
      "tags": ["Python", "Pandas", "NumPy", "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"],
      "content": "# Python –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: Pandas –∏ NumPy\n\n## –û—Å–Ω–æ–≤—ã Pandas\n\n```python\nimport pandas as pd\nimport numpy as np\n\n# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n df = pd.read_csv('data.csv')\n\n# –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\nprint(df.head())\nprint(df.info())\nprint(df.describe())\n```\n\n## –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n\n```python\n# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π\ndf['age'].fillna(df['age'].median(), inplace=True)\ndf.dropna(subset=['email'], inplace=True)\n\n# –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤\ndf.drop_duplicates(subset=['email'], keep='first', inplace=True)\n\n# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö\ndf['date'] = pd.to_datetime(df['date'])\ndf['amount'] = pd.to_numeric(df['amount'], errors='coerce')\n```\n\n## –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞\n\n```python\n# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\nresult = df.groupby('category').agg({\n    'amount': ['sum', 'mean', 'count'],\n    'user_id': 'nunique'\n}).round(2)\n\n# –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞\npivot = df.pivot_table(\n    values='amount',\n    index='category',\n    columns='status',\n    aggfunc='sum',\n    fill_value=0\n)\n```\n\n## –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã\n\n```python\n# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ –≤—Ä–µ–º–µ–Ω–∏\ndf['date'] = pd.to_datetime(df['date'])\ndf.set_index('date', inplace=True)\n\n# –†–µ—Å–µ–º–ø–ª–∏–Ω–≥ –ø–æ –º–µ—Å—è—Ü–∞–º\nmonthly = df.resample('M').agg({\n    'amount': 'sum',\n    'user_id': 'nunique'\n})\n\n# –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ\nmonthly['rolling_avg'] = monthly['amount'].rolling(window=3).mean()\n```\n\n## –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è\n\n```python\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫\nplt.figure(figsize=(12, 6))\nmonthly['amount'].plot()\nplt.title('–ú–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞')\nplt.xlabel('–î–∞—Ç–∞')\nplt.ylabel('–°—É–º–º–∞')\nplt.show()\n\n# –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞\nplt.figure(figsize=(10, 6))\ndf['amount'].hist(bins=30)\nplt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º')\nplt.show()\n\n# –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞\ncorrelation = df[['amount', 'age', 'rating']].corr()\nsns.heatmap(correlation, annot=True, cmap='coolwarm')\nplt.show()\n```\n\n## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ\n\nPandas –∏ NumPy –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –º–æ—â–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Python. –í–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ —É–º–µ—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤.",
      "isNew": true,
      "isPopular": true,
      "createdAt": "2024-01-15T00:00:00Z"
    },
    {
      "id": 3,
      "title": "A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ –∞–Ω–∞–ª–∏–∑–∞",
      "description": "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é A/B —Ç–µ—Å—Ç–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
      "category": "best-practices",
      "difficulty": "advanced",
      "readTime": 25,
      "rating": 4.9,
      "reads": 567,
      "tags": ["A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "–ì–∏–ø–æ—Ç–µ–∑—ã"],
      "content": "# A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ –∞–Ω–∞–ª–∏–∑–∞\n\n## –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞\n\n### –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑—ã\n\n```python\n# –ü—Ä–∏–º–µ—Ä –≥–∏–ø–æ—Ç–µ–∑—ã\nhypothesis = {\n    'null': '–ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏—é',\n    'alternative': '–ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏—é –Ω–∞ 10%',\n    'significance_level': 0.05,\n    'power': 0.8\n}\n```\n\n### –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏\n\n```python\nimport scipy.stats as stats\n\n# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞\nbaseline_conversion = 0.05  # 5%\nmin_detectable_effect = 0.01  # 1%\nalpha = 0.05\npower = 0.8\n\n# –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏\nsample_size = stats.norm.ppf(1 - alpha/2) + stats.norm.ppf(power)\nsample_size = sample_size ** 2 * (2 * baseline_conversion * (1 - baseline_conversion)) / (min_detectable_effect ** 2)\n\nprint(f'–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É: {int(sample_size)}')\n```\n\n## –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞\n\n```python\n# –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø\nimport numpy as np\n\nnp.random.seed(42)\nuser_ids = range(10000)\n\n# –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ\nassignments = np.random.choice(['A', 'B'], size=len(user_ids), p=[0.5, 0.5])\n\nexperiment_data = pd.DataFrame({\n    'user_id': user_ids,\n    'group': assignments\n})\n```\n\n## –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n```python\n# –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö\nresults = pd.DataFrame({\n    'user_id': [1, 2, 3, 4, 5],\n    'group': ['A', 'B', 'A', 'B', 'A'],\n    'converted': [0, 1, 0, 1, 0]\n})\n\n# –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º\ngroup_stats = results.groupby('group').agg({\n    'user_id': 'count',\n    'converted': 'sum'\n}).rename(columns={'user_id': 'users', 'converted': 'conversions'})\n\ngroup_stats['conversion_rate'] = group_stats['conversions'] / group_stats['users']\n\nprint(group_stats)\n```\n\n## –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã\n\n```python\nfrom scipy.stats import chi2_contingency, proportions_ztest\n\n# Z-—Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π\nconversions_a = group_stats.loc['A', 'conversions']\nusers_a = group_stats.loc['A', 'users']\nconversions_b = group_stats.loc['B', 'conversions']\nusers_b = group_stats.loc['B', 'users']\n\nz_stat, p_value = proportions_ztest(\n    [conversions_a, conversions_b],\n    [users_a, users_b]\n)\n\nprint(f'Z-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {z_stat:.4f}')\nprint(f'P-–∑–Ω–∞—á–µ–Ω–∏–µ: {p_value:.4f}')\nprint(f'–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ: {p_value < 0.05}')\n```\n\n## –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n```python\nimport matplotlib.pyplot as plt\n\n# –ì—Ä–∞—Ñ–∏–∫ –∫–æ–Ω–≤–µ—Ä—Å–∏–π\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\n\n# –ö–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º\nconversion_rates = group_stats['conversion_rate']\nax1.bar(conversion_rates.index, conversion_rates.values)\nax1.set_title('–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º')\nax1.set_ylabel('–ö–æ–Ω–≤–µ—Ä—Å–∏—è')\n\n# –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã\nfrom scipy.stats import norm\n\ndef confidence_interval(conversions, users, confidence=0.95):\n    p = conversions / users\n    z = norm.ppf((1 + confidence) / 2)\n    margin = z * np.sqrt(p * (1 - p) / users)\n    return p - margin, p + margin\n\nfor group in ['A', 'B']:\n    conv = group_stats.loc[group, 'conversions']\n    users = group_stats.loc[group, 'users']\n    ci_low, ci_high = confidence_interval(conv, users)\n    ax2.errorbar(group, conv/users, yerr=[[conv/users - ci_low], [ci_high - conv/users]], \n                fmt='o', capsize=5)\n\nax2.set_title('–ö–æ–Ω–≤–µ—Ä—Å–∏—è —Å –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏')\nax2.set_ylabel('–ö–æ–Ω–≤–µ—Ä—Å–∏—è')\n\nplt.tight_layout()\nplt.show()\n```\n\n## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ\n\nA/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –í–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
      "isNew": true,
      "isPopular": false,
      "createdAt": "2024-01-20T00:00:00Z"
    }
  ]
}
