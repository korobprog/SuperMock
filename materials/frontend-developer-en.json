{
  "profession": "frontend-developer",
  "language": "en",
  "categories": [
    {
      "id": "interview-questions",
      "name": "Interview Questions",
      "count": 156,
      "icon": "💬",
      "color": "bg-blue-100 text-blue-800"
    },
    {
      "id": "technical-tasks",
      "name": "Technical Tasks",
      "count": 89,
      "icon": "⚡",
      "color": "bg-green-100 text-green-800"
    },
    {
      "id": "system-design",
      "name": "System Design",
      "count": 34,
      "icon": "🏗️",
      "color": "bg-purple-100 text-purple-800"
    },
    {
      "id": "behavioral",
      "name": "Behavioral Questions",
      "count": 67,
      "icon": "🧠",
      "color": "bg-orange-100 text-orange-800"
    },
    {
      "id": "algorithms",
      "name": "Algorithms & Data Structures",
      "count": 123,
      "icon": "📊",
      "color": "bg-red-100 text-red-800"
    },
    {
      "id": "best-practices",
      "name": "Best Practices",
      "count": 78,
      "icon": "⭐",
      "color": "bg-yellow-100 text-yellow-800"
    }
  ],
  "materials": [
    {
      "id": 1,
      "title": "Top 50 JavaScript Interview Questions",
      "description": "Most common JavaScript interview questions with detailed answers and code examples",
      "category": "interview-questions",
      "difficulty": "intermediate",
      "readTime": 15,
      "rating": 4.8,
      "reads": 1247,
      "tags": ["JavaScript", "Basics", "ES6+", "Interview"],
      "content": "# Top 50 JavaScript Interview Questions\n\n## 1. What is hoisting in JavaScript?\n\nHoisting is a JavaScript mechanism where variable and function declarations are moved to the top of their scope.\n\n```javascript\nconsole.log(x); // undefined\nvar x = 5;\n\n// Interpreted as:\nvar x;\nconsole.log(x); // undefined\nx = 5;\n```\n\n## 2. Difference between var, let, and const\n\n- **var**: function scope, hoisted\n- **let**: block scope, not hoisted\n- **const**: block scope, not hoisted, cannot be reassigned\n\n```javascript\n// var - function scope\nfunction example() {\n  var x = 1;\n  if (true) {\n    var x = 2; // same variable\n  }\n  console.log(x); // 2\n}\n\n// let - block scope\nfunction example2() {\n  let x = 1;\n  if (true) {\n    let x = 2; // new variable\n  }\n  console.log(x); // 1\n}\n```\n\n## 3. What are closures?\n\nA closure is a function that has access to variables from its outer scope.\n\n```javascript\nfunction createCounter() {\n  let count = 0;\n  return function() {\n    return ++count;\n  };\n}\n\nconst counter = createCounter();\nconsole.log(counter()); // 1\nconsole.log(counter()); // 2\n```\n\n## 4. Event Loop in JavaScript\n\nThe Event Loop is a mechanism that allows JavaScript to perform asynchronous operations.\n\n```javascript\nconsole.log('1');\nsetTimeout(() => console.log('2'), 0);\nPromise.resolve().then(() => console.log('3'));\nconsole.log('4');\n\n// Output: 1, 4, 3, 2\n```\n\n## 5. Promise and async/await\n\n```javascript\n// Promise\nfunction fetchData() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('Data received');\n    }, 1000);\n  });\n}\n\n// async/await\nasync function getData() {\n  try {\n    const data = await fetchData();\n    console.log(data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\n## 6. Prototypal Inheritance\n\n```javascript\nfunction Animal(name) {\n  this.name = name;\n}\n\nAnimal.prototype.speak = function() {\n  console.log(`${this.name} makes a sound`);\n};\n\nfunction Dog(name) {\n  Animal.call(this, name);\n}\n\nDog.prototype = Object.create(Animal.prototype);\nDog.prototype.constructor = Dog;\n\nconst dog = new Dog('Rex');\ndog.speak(); // Rex makes a sound\n```\n\n## 7. Map vs Object\n\n```javascript\n// Object\nconst obj = {\n  key: 'value'\n};\n\n// Map\nconst map = new Map();\nmap.set('key', 'value');\nmap.set(1, 'number key');\nmap.set({}, 'object key');\n\nconsole.log(map.get('key')); // value\nconsole.log(map.size); // 3\n```\n\n## 8. Destructuring\n\n```javascript\n// Arrays\nconst [a, b, ...rest] = [1, 2, 3, 4, 5];\nconsole.log(a, b, rest); // 1, 2, [3, 4, 5]\n\n// Objects\nconst { name, age, ...other } = {\n  name: 'John',\n  age: 25,\n  city: 'New York',\n  job: 'Developer'\n};\nconsole.log(name, age, other); // John, 25, {city: 'New York', job: 'Developer'}\n```\n\n## 9. ES6 Modules\n\n```javascript\n// math.js\nexport const add = (a, b) => a + b;\nexport const subtract = (a, b) => a - b;\nexport default function multiply(a, b) {\n  return a * b;\n}\n\n// main.js\nimport multiply, { add, subtract } from './math.js';\nconsole.log(add(2, 3)); // 5\nconsole.log(multiply(2, 3)); // 6\n```\n\n## 10. DOM Manipulation\n\n```javascript\n// Creating elements\nconst div = document.createElement('div');\ndiv.textContent = 'Hello, World!';\ndiv.className = 'greeting';\n\ndocument.body.appendChild(div);\n\n// Finding elements\nconst element = document.querySelector('.greeting');\nconst elements = document.querySelectorAll('.item');\n\n// Event handlers\nconst button = document.querySelector('button');\nbutton.addEventListener('click', (event) => {\n  console.log('Button clicked!');\n});\n```\n\nThese are basic JavaScript questions. For complete understanding, it's recommended to practice with code and study documentation.",
      "isNew": false,
      "isPopular": true,
      "createdAt": "2024-01-01T00:00:00Z"
    },
    {
      "id": 2,
      "title": "React Hooks: Complete Guide",
      "description": "Deep dive into all React hooks with usage examples and best practices",
      "category": "best-practices",
      "difficulty": "advanced",
      "readTime": 25,
      "rating": 4.9,
      "reads": 892,
      "tags": ["React", "Hooks", "Frontend", "useState", "useEffect"],
      "content": "# React Hooks: Complete Guide\n\n## Introduction\n\nReact Hooks were introduced in React 16.8 and allow you to use state and other React features in functional components.\n\n## useState\n\nBasic hook for managing state.\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  \n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n}\n```\n\n### Functional Updates\n\n```jsx\nconst [count, setCount] = useState(0);\n\n// Instead of this:\nsetCount(count + 1);\n\n// Use this:\nsetCount(prevCount => prevCount + 1);\n```\n\n## useEffect\n\nHook for performing side effects.\n\n```jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction UserProfile({ userId }) {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchUser() {\n      try {\n        const response = await fetch(`/api/users/${userId}`);\n        const userData = await response.json();\n        setUser(userData);\n      } catch (error) {\n        console.error('Error loading user:', error);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchUser();\n  }, [userId]); // Dependencies\n\n  if (loading) return <div>Loading...</div>;\n  if (!user) return <div>User not found</div>;\n\n  return (\n    <div>\n      <h2>{user.name}</h2>\n      <p>{user.email}</p>\n    </div>\n  );\n}\n```\n\n### Cleanup Effects\n\n```jsx\nuseEffect(() => {\n  const interval = setInterval(() => {\n    console.log('Tick');\n  }, 1000);\n\n  // Cleanup function\n  return () => {\n    clearInterval(interval);\n  };\n}, []);\n```\n\n## useContext\n\nHook for working with context.\n\n```jsx\n// Creating context\nconst ThemeContext = React.createContext();\n\n// Provider\nfunction App() {\n  const [theme, setTheme] = useState('light');\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      <Header />\n      <Main />\n    </ThemeContext.Provider>\n  );\n}\n\n// Using in component\nfunction Header() {\n  const { theme, setTheme } = useContext(ThemeContext);\n\n  return (\n    <header className={`header-${theme}`}>\n      <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\n        Toggle Theme\n      </button>\n    </header>\n  );\n}\n```\n\n## useReducer\n\nHook for managing complex state.\n\n```jsx\nimport React, { useReducer } from 'react';\n\nconst initialState = { count: 0 };\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    case 'decrement':\n      return { count: state.count - 1 };\n    case 'reset':\n      return { count: 0 };\n    default:\n      throw new Error();\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <div>\n      <p>Count: {state.count}</p>\n      <button onClick={() => dispatch({ type: 'increment' })}>\n        +\n      </button>\n      <button onClick={() => dispatch({ type: 'decrement' })}>\n        -\n      </button>\n      <button onClick={() => dispatch({ type: 'reset' })}>\n        Reset\n      </button>\n    </div>\n  );\n}\n```\n\n## useCallback\n\nHook for memoizing functions.\n\n```jsx\nimport React, { useState, useCallback } from 'react';\n\nfunction Parent() {\n  const [count, setCount] = useState(0);\n\n  const handleClick = useCallback(() => {\n    console.log('Button clicked');\n  }, []); // Dependencies\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>\n        Increment Counter\n      </button>\n      <Child onClick={handleClick} />\n    </div>\n  );\n}\n\nconst Child = React.memo(function Child({ onClick }) {\n  console.log('Child re-rendered');\n  return <button onClick={onClick}>Child Button</button>;\n});\n```\n\n## useMemo\n\nHook for memoizing values.\n\n```jsx\nimport React, { useState, useMemo } from 'react';\n\nfunction ExpensiveComponent({ items }) {\n  const expensiveValue = useMemo(() => {\n    console.log('Computing expensive value');\n    return items.reduce((sum, item) => sum + item.value, 0);\n  }, [items]); // Dependencies\n\n  return <div>Result: {expensiveValue}</div>;\n}\n```\n\n## useRef\n\nHook for creating mutable references.\n\n```jsx\nimport React, { useRef, useEffect } from 'react';\n\nfunction TextInputWithFocusButton() {\n  const inputRef = useRef(null);\n\n  const focusInput = () => {\n    inputRef.current.focus();\n  };\n\n  return (\n    <div>\n      <input ref={inputRef} type=\"text\" />\n      <button onClick={focusInput}>Focus the input</button>\n    </div>\n  );\n}\n\n// Saving previous value\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n```\n\n## Custom Hooks\n\n```jsx\n// useLocalStorage.js\nimport { useState, useEffect } from 'react';\n\nfunction useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(error);\n      return initialValue;\n    }\n  });\n\n  const setValue = value => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\n// Usage\nfunction App() {\n  const [name, setName] = useLocalStorage('name', 'Guest');\n\n  return (\n    <div>\n      <input\n        value={name}\n        onChange={e => setName(e.target.value)}\n        placeholder=\"Enter name\"\n      />\n    </div>\n  );\n}\n```\n\n## Best Practices\n\n1. **Always specify dependencies in useEffect**\n2. **Use functional updates in useState**\n3. **Memoize expensive calculations with useMemo**\n4. **Memoize functions with useCallback**\n5. **Create custom hooks for reusable logic**\n6. **Avoid creating objects in render**\n\n## Conclusion\n\nReact Hooks provide a powerful and flexible way to manage state and side effects in functional components. Proper use of hooks leads to cleaner and more maintainable code.",
      "isNew": true,
      "isPopular": true,
      "createdAt": "2024-01-15T00:00:00Z"
    },
    {
      "id": 3,
      "title": "TypeScript: Advanced Types",
      "description": "Deep dive into TypeScript's type system with practical examples",
      "category": "interview-questions",
      "difficulty": "advanced",
      "readTime": 18,
      "rating": 4.7,
      "reads": 234,
      "tags": ["TypeScript", "Types", "Frontend", "Generics"],
      "content": "# TypeScript: Advanced Types\n\n## Introduction\n\nTypeScript provides a powerful type system that helps write more reliable code. Let's explore advanced typing capabilities.\n\n## Conditional Types\n\n```typescript\ntype NonNullable<T> = T extends null | undefined ? never : T;\n\ntype T0 = NonNullable<string | number | null>; // string | number\ntype T1 = NonNullable<string[] | null | undefined>; // string[]\n```\n\n## Mapped Types\n\n```typescript\n// Make all properties optional\ntype Partial<T> = {\n  [P in keyof T]?: T[P];\n};\n\n// Make all properties required\ntype Required<T> = {\n  [P in keyof T]-?: T[P];\n};\n\n// Make all properties readonly\ntype Readonly<T> = {\n  readonly [P in keyof T]: T[P];\n};\n\n// Usage example\ninterface User {\n  id: number;\n  name: string;\n  email?: string;\n}\n\ntype PartialUser = Partial<User>;\n// { id?: number; name?: string; email?: string }\n\ntype RequiredUser = Required<User>;\n// { id: number; name: string; email: string }\n```\n\n## Generics\n\n```typescript\n// Simple generic\nfunction identity<T>(arg: T): T {\n  return arg;\n}\n\nconst result = identity<string>('hello');\nconst result2 = identity('hello'); // automatic type inference\n\n// Generic with constraints\ninterface Lengthwise {\n  length: number;\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n  console.log(arg.length);\n  return arg;\n}\n\nloggingIdentity('hello'); // OK\nloggingIdentity([1, 2, 3]); // OK\n// loggingIdentity(123); // Error\n```\n\n## Utility Types\n\n```typescript\n// Pick - select specific properties\ninterface Todo {\n  title: string;\n  description: string;\n  completed: boolean;\n}\n\ntype TodoPreview = Pick<Todo, 'title' | 'completed'>;\n// { title: string; completed: boolean }\n\n// Omit - exclude specific properties\ntype TodoInfo = Omit<Todo, 'completed'>;\n// { title: string; description: string }\n\n// Record - create object with specific keys and values\ntype CatInfo = {\n  age: number;\n  breed: string;\n};\n\ntype CatName = 'miffy' | 'boris' | 'mordred';\n\nconst cats: Record<CatName, CatInfo> = {\n  miffy: { age: 10, breed: 'Persian' },\n  boris: { age: 5, breed: 'Maine Coon' },\n  mordred: { age: 16, breed: 'British Shorthair' }\n};\n```\n\n## Intersection and Union Types\n\n```typescript\n// Union types\ntype Status = 'loading' | 'success' | 'error';\n\ntype ApiResponse<T> = {\n  data: T;\n  status: Status;\n};\n\n// Intersection types\ninterface HasName {\n  name: string;\n}\n\ninterface HasAge {\n  age: number;\n}\n\ntype Person = HasName & HasAge;\n// { name: string; age: number }\n\n// Conditional types with unions\ntype ArrayElement<T> = T extends Array<infer U> ? U : never;\n\ntype T0 = ArrayElement<string[]>; // string\ntype T1 = ArrayElement<number[]>; // number\n```\n\n## Type Inference\n\n```typescript\n// Automatic type inference\nconst names = ['Alice', 'Bob', 'Charlie'];\n// TypeScript automatically infers type as string[]\n\n// Type inference in functions\nfunction map<T, U>(array: T[], fn: (item: T) => U): U[] {\n  return array.map(fn);\n}\n\nconst numbers = [1, 2, 3, 4];\nconst doubled = map(numbers, x => x * 2); // number[]\nconst strings = map(numbers, x => x.toString()); // string[]\n```\n\n## Template Literal Types\n\n```typescript\ntype EmailLocaleIDs = 'welcome_email' | 'email_heading';\ntype FooterLocaleIDs = 'footer_title' | 'footer_sendoff';\n\ntype AllLocaleIDs = `${EmailLocaleIDs | FooterLocaleIDs}_id`;\n// 'welcome_email_id' | 'email_heading_id' | 'footer_title_id' | 'footer_sendoff_id'\n\ntype Lang = 'en' | 'ru';\ntype LocaleMessageIDs = `${Lang}_${AllLocaleIDs}`;\n// 'en_welcome_email_id' | 'en_email_heading_id' | ... | 'ru_footer_sendoff_id'\n```\n\n## Types for React Components\n\n```typescript\nimport React from 'react';\n\n// Props typing\ninterface ButtonProps {\n  children: React.ReactNode;\n  onClick?: () => void;\n  variant?: 'primary' | 'secondary' | 'danger';\n  size?: 'small' | 'medium' | 'large';\n  disabled?: boolean;\n}\n\nconst Button: React.FC<ButtonProps> = ({\n  children,\n  onClick,\n  variant = 'primary',\n  size = 'medium',\n  disabled = false\n}) => {\n  return (\n    <button\n      onClick={onClick}\n      className={`btn btn-${variant} btn-${size}`}\n      disabled={disabled}\n    >\n      {children}\n    </button>\n  );\n};\n\n// Hook typing\nfunction useLocalStorage<T>(key: string, initialValue: T) {\n  const [storedValue, setStoredValue] = React.useState<T>(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return [storedValue, setValue] as const;\n}\n```\n\n## Types for API\n\n```typescript\n// API response types\ninterface ApiResponse<T> {\n  data: T;\n  status: 'success' | 'error';\n  message?: string;\n}\n\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\n// Typed API function\nasync function fetchUser(id: number): Promise<ApiResponse<User>> {\n  const response = await fetch(`/api/users/${id}`);\n  return response.json();\n}\n\n// Usage\nconst userResponse = await fetchUser(1);\nif (userResponse.status === 'success') {\n  console.log(userResponse.data.name); // TypeScript knows this is User\n}\n```\n\n## Conclusion\n\nAdvanced TypeScript types allow you to create more expressive and safer types. Proper use of these capabilities leads to better code quality and fewer runtime errors.",
      "isNew": true,
      "isPopular": false,
      "createdAt": "2024-01-20T00:00:00Z"
    }
  ]
}
