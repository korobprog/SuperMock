name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm run install:all

      - name: Build
        run: npm run build

      - name: Test
        run: npm test || echo "No tests specified"

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            dist
            */dist
            */build
            .next
          key: ${{ runner.os }}-build-${{ github.sha }}

  performance-test:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Start backend for testing
        run: |
          docker-compose -f backend/docker-compose.yml up -d
          # Ждем, пока сервис запустится
          sleep 30

      - name: Install k6
        run: |
          curl -L https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz | tar xvz
          sudo mv k6-v0.47.0-linux-amd64/k6 /usr/local/bin/

      - name: Run performance tests
        run: |
          cd performance-tests
          API_URL=http://localhost:4000 k6 run api-load-test.js --out json=results.json

      - name: Check performance thresholds
        run: |
          cd performance-tests
          if [ -f results.json ]; then
            # Проверяем, были ли превышены пороговые значения
            THRESHOLDS_EXCEEDED=$(jq '.metrics | to_entries[] | select(.value.thresholds != null) | select(.value.thresholds[0].ok == false) | .key' results.json)
            if [ -n "$THRESHOLDS_EXCEEDED" ]; then
              echo "❌ Превышены пороговые значения производительности:"
              echo "$THRESHOLDS_EXCEEDED"
              # Не прерываем сборку, но отмечаем проблему
              echo "::warning::Performance thresholds exceeded"
            else
              echo "✅ Все тесты производительности прошли успешно"
            fi
          else
            echo "❌ Файл с результатами тестов не найден"
            exit 1
          fi

      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: performance-tests/results.json

      - name: Stop backend
        run: docker-compose -f backend/docker-compose.yml down

  build-docker:
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/supermock-backend
          tags: |
            type=ref,event=branch
            type=sha,format=short
            latest

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/supermock-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/supermock-backend:buildcache,mode=max

  deploy:
    needs: [build-docker, performance-test]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to production server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}

            # Сохраняем текущую версию для возможного отката
            if [ -f docker-compose.yml ]; then
              cp docker-compose.yml docker-compose.yml.backup
            fi

            # Получаем последние изменения
            git pull

            # Обновляем переменные окружения из GitHub Secrets
            echo "${{ secrets.ENV_FILE }}" > .env

            # Останавливаем текущие контейнеры
            docker-compose down

            # Удаляем старые образы
            docker image prune -af

            # Получаем новые образы
            docker-compose pull

            # Запускаем новые контейнеры
            docker-compose up -d

            # Проверяем статус
            docker-compose ps

            # Проверяем логи на наличие ошибок
            docker-compose logs --tail=100

            # Проверяем доступность сервиса
            curl -s -o /dev/null -w "%{http_code}" http://localhost:${{ secrets.BACKEND_PORT }}/health || {
              echo "Сервис недоступен, выполняем откат"
              docker-compose down
              mv docker-compose.yml.backup docker-compose.yml
              docker-compose up -d
              exit 1
            }

            # Запускаем тесты производительности на продакшн-сервере
            cd performance-tests
            ./run-performance-tests.sh || echo "Предупреждение: тесты производительности завершились с ошибками"

            echo "Деплой успешно завершен"
