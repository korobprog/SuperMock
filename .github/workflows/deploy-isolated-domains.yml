name: Deploy Isolated Domains to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ permissions –¥–ª—è CI/CD
permissions:
  contents: write
  packages: write
  actions: write
  deployments: write

env:
  SERVER_IP: 217.198.6.238
  SERVER_PATH: /opt/mockmate
  PROJECT_NAME: supermock

jobs:
  # –°–±–æ—Ä–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          cd frontend && pnpm install --frozen-lockfile
          cd ../backend && pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: |
          cd backend
          # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª –¥–ª—è Prisma —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          echo "DATABASE_URL=postgresql://supermock:krishna1284@postgres:5432/supermock" > .env
          pnpm prisma generate
          rm .env

      - name: Build frontend
        run: cd frontend && pnpm run build

      - name: Build backend
        run: |
          cd backend
          pnpm run build

      - name: Check Prisma migrations
        run: |
          cd backend
          echo "Checking if database migrations are needed..."
          echo "Skipping Prisma operations in CI environment"

      - name: Run tests
        run: |
          echo "Skipping tests in CI environment for now"
          echo "Tests should be run locally before deployment"

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            frontend/dist
            backend/dist
          key: ${{ runner.os }}-build-${{ github.sha }}

  # –î–µ–ø–ª–æ–π –Ω–∞ production —Å–µ—Ä–≤–µ—Ä —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
  deploy-isolated-domains:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment archive
        run: |
          tar -czf deployment.tar.gz \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=dist \
            --exclude=*.tar.gz \
            --exclude=*.log \
            --exclude=.env \
            --exclude=production.env \
            docker-compose.subdomains.yml \
            frontend/ \
            backend/ \
            scripts/ \
            nginx/ \
            media/ \
            materials/ \
            deploy/

      - name: Upload deployment files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          source: "deployment.tar.gz"
          target: "${{ secrets.DEPLOY_PATH }}"

      - name: Deploy isolated domains to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          script: |
            set -e
            
            echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏..."
            echo "–í—Ä–µ–º—è: $(date)"
            echo "–ö–æ–º–º–∏—Ç: ${{ github.sha }}"
            echo "–í–µ—Ç–∫–∞: ${{ github.ref_name }}"
            
            cd ${{ secrets.DEPLOY_PATH }}
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
            echo "üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã..."
            find . -name "backup-*.tar.gz" -mtime +7 -delete 2>/dev/null || true
            find . -name "supermock-full-deploy-*.tar.gz" -mtime +3 -delete 2>/dev/null || true
            echo "‚úÖ –°—Ç–∞—Ä—ã–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã"
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
            docker-compose -f docker-compose.prod-multi.yml down --timeout 30 --remove-orphans || true
            docker-compose -f docker-compose.subdomains.yml down --timeout 30 --remove-orphans || true
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Nginx
            echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Nginx..."
            systemctl stop nginx || true
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã
            echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã..."
            docker stop app-backend-1 app-redis-1 || true
            docker rm app-backend-1 app-redis-1 || true
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã supermock
            echo "üóëÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã supermock..."
            docker ps -a --filter "name=supermock" --format "{{.Names}}" | xargs -r docker rm -f || true
            
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç—ã
            echo "üîì –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç—ã..."
            sudo fuser -k 80/tcp || true
            sudo fuser -k 443/tcp || true
            sudo fuser -k 8080/tcp || true
            sudo fuser -k 8443/tcp || true
            sleep 2
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã
            echo "üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã..."
            docker image prune -af || true
            
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∞—Ä—Ö–∏–≤
            echo "üìÇ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥..."
            tar -xzf deployment.tar.gz
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            echo "‚öôÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
            if [ -f production.env ]; then
              ln -sf production.env .env
              
              # –°–æ–∑–¥–∞–µ–º backend/.env —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
              echo "üîß –°–æ–∑–¥–∞–µ–º backend/.env —Ñ–∞–π–ª..."
              mkdir -p backend
              echo "NODE_ENV=production" > backend/.env
              echo "PORT=3000" >> backend/.env
              echo "HOST=0.0.0.0" >> backend/.env
              echo "" >> backend/.env
              echo "# Database Configuration" >> backend/.env
              echo "DATABASE_URL=\"postgresql://supermock:krishna1284@postgres:5432/supermock\"" >> backend/.env
              echo "" >> backend/.env
              echo "USE_MONGODB=false" >> backend/.env
              echo "" >> backend/.env
              echo "# Redis Configuration" >> backend/.env
              echo "USE_REDIS=false" >> backend/.env
              echo "REDIS_HOST=redis" >> backend/.env
              echo "REDIS_PORT=6379" >> backend/.env
              echo "" >> backend/.env
              echo "# Frontend Configuration" >> backend/.env
              echo "FRONTEND_URL=https://app.supermock.ru" >> backend/.env
              echo "FRONTEND_PORT=8080" >> backend/.env
              echo "" >> backend/.env
              echo "# JWT Configuration" >> backend/.env
              echo "JWT_SECRET=052aa937e3faf8542efe8c091a7ff830" >> backend/.env
              echo "" >> backend/.env
              echo "# Telegram Configuration" >> backend/.env
              echo "TELEGRAM_BOT_TOKEN=8464088869:AAFcZb7HmYQJa6vaYjfTDCjfr187p9hhk2o" >> backend/.env
              echo "TELEGRAM_BOT_NAME=SuperMock_bot" >> backend/.env
              echo "" >> backend/.env
              echo "# Telegram Auth Configuration" >> backend/.env
              echo "MAX_VERIFICATION_ATTEMPTS=3" >> backend/.env
              echo "VERIFICATION_CODE_EXPIRY=5" >> backend/.env
              echo "JWT_EXPIRY_DAYS=30" >> backend/.env
              echo "VERIFICATION_CODE_LENGTH=6" >> backend/.env
              echo "CODE_CLEANUP_INTERVAL=5" >> backend/.env
              echo "MAX_CODES_PER_PHONE=3" >> backend/.env
              echo "" >> backend/.env
              echo "# Domain Configuration" >> backend/.env
              echo "DOMAIN=supermock.ru" >> backend/.env
              
              echo "‚úÖ Backend .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"
            else
              echo "‚ùå –§–∞–π–ª production.env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
              exit 1
            fi
            
            # –û–±–Ω–æ–≤–ª—è–µ–º Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            echo "üîß –û–±–Ω–æ–≤–ª—è–µ–º Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
            if [ -f nginx/nginx-landing-only.conf ]; then
              cp nginx/nginx-landing-only.conf /etc/nginx/nginx.conf
              nginx -t
              echo "‚úÖ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
            else
              echo "‚ùå Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
              exit 1
            fi
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Docker Hub
            echo "üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Docker Hub..."
            echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤
            echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤..."
            docker-compose -f docker-compose.subdomains.yml up -d --build
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
            echo "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
            sleep 30
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Nginx –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
            echo "üåê –ó–∞–ø—É—Å–∫–∞–µ–º Nginx –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞..."
            systemctl start nginx
            systemctl enable nginx
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            echo "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
            docker ps --filter "name=supermock" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Nginx
            echo "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Nginx..."
            systemctl status nginx --no-pager -l
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
            echo "üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤..."
            
            # API (—á–µ—Ä–µ–∑ Traefik)
            if curl -s -o /dev/null -w "%{http_code}" https://api.supermock.ru/api/health | grep -q "200"; then
              echo "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ https://api.supermock.ru"
            else
              echo "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ https://api.supermock.ru"
              echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ Traefik..."
              docker logs supermock-traefik --tail 20
            fi
            
            # Frontend App (—á–µ—Ä–µ–∑ Traefik)
            if curl -s -o /dev/null -w "%{http_code}" https://app.supermock.ru/ | grep -q "200"; then
              echo "‚úÖ Frontend App –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ https://app.supermock.ru"
            else
              echo "‚ùå Frontend App –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ https://app.supermock.ru"
            fi
            
            # Landing (—á–µ—Ä–µ–∑ Nginx)
            if curl -s -o /dev/null -w "%{http_code}" https://supermock.ru/ | grep -q "200"; then
              echo "‚úÖ Landing –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ https://supermock.ru"
            else
              echo "‚ùå Landing –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ https://supermock.ru"
              echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ Nginx..."
              tail -20 /var/log/nginx/error.log
            fi
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            echo "üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞..."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            CONTAINER_STATUS=$(docker ps --filter "name=supermock" --format "{{.Status}}" 2>/dev/null || echo "ERROR")
            NGINX_STATUS=$(systemctl is-active nginx 2>/dev/null || echo "inactive")
            
            if echo "$CONTAINER_STATUS" | grep -q "Up" && [ "$NGINX_STATUS" = "active" ]; then
              echo "üéâ –î–µ–ø–ª–æ–π —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
              echo ""
              echo "üåê –°–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å–∞–º:"
              echo "- https://supermock.ru (–õ–µ–Ω–¥–∏–Ω–≥ - Nginx)"
              echo "- https://app.supermock.ru (–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - Traefik)"
              echo "- https://api.supermock.ru (API - Traefik)"
              echo ""
              echo "üîß –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:"
              echo "- supermock.ru ‚Üí Nginx (–ø–æ—Ä—Ç 80/443)"
              echo "- app.supermock.ru, api.supermock.ru ‚Üí Traefik (–ø–æ—Ä—Ç 8080/8443) ‚Üí Nginx –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç"
              echo ""
              echo "üîê Telegram Auth API –¥–æ—Å—Ç—É–ø–µ–Ω:"
              echo "- POST /api/telegram-auth/send-code - –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞"
              echo "- POST /api/telegram-auth/verify-code - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞"
              echo "- GET /api/telegram-auth/me - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
              echo "- GET /api/telegram-auth/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
              echo ""
              echo "üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ @SuperMock_bot"
              echo "üîó –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: https://app.supermock.ru/auth/telegram"
            else
              echo "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
              echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
              docker ps --filter "name=supermock" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
              echo "üìä –°—Ç–∞—Ç—É—Å Nginx: $NGINX_STATUS"
              echo "üîç –õ–æ–≥–∏ backend:"
              docker logs supermock-backend --tail 20 || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ backend"
              echo "üîç –õ–æ–≥–∏ Nginx:"
              tail -20 /var/log/nginx/error.log || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ Nginx"
              exit 1
            fi
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤
            echo "üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤..."
            rm -f deployment.tar.gz
            rm -f supermock-full-deploy-*.tar.gz
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            echo "üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞..."
            find . -name "backup-*.tar.gz" -mtime +7 -delete 2>/dev/null || true
            find . -name "supermock-full-deploy-*.tar.gz" -mtime +3 -delete 2>/dev/null || true
            find . -name "*.tar.gz" -size +100M -mtime +1 -delete 2>/dev/null || true
            echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  notify:
    needs: deploy-isolated-domains
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "‚úÖ –î–µ–ø–ª–æ–π —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
          echo "–ö–æ–º–º–∏—Ç: ${{ github.sha }}"
          echo "–í–µ—Ç–∫–∞: ${{ github.ref_name }}"
          echo "–í—Ä–µ–º—è: $(date)"
          echo ""
          echo "üåê –°–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã:"
          echo "- https://supermock.ru (–õ–µ–Ω–¥–∏–Ω–≥ - Nginx)"
          echo "- https://app.supermock.ru (–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - Traefik)"
          echo "- https://api.supermock.ru (API - Traefik)"
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå –î–µ–ø–ª–æ–π —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!"
          echo "–ö–æ–º–º–∏—Ç: ${{ github.sha }}"
          echo "–í–µ—Ç–∫–∞: ${{ github.ref_name }}"
          echo "–í—Ä–µ–º—è: $(date)"
          echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
