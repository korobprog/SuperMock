name: Deploy to Production Server

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ permissions –¥–ª—è CI/CD
permissions:
  contents: write
  packages: write
  actions: write
  deployments: write

env:
  SERVER_IP: 217.198.6.238
  SERVER_PATH: /opt/mockmate
  PROJECT_NAME: supermock

jobs:
  # –°–±–æ—Ä–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        # –£–±–∏—Ä–∞–µ–º —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ package.json

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          cd frontend && pnpm install --frozen-lockfile
          cd ../backend && pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: |
          cd backend
          # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª –¥–ª—è Prisma —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          echo "DATABASE_URL=postgresql://supermock:krishna1284@postgres:5432/supermock" > .env
          pnpm prisma generate
          rm .env

      - name: Build frontend
        run: cd frontend && pnpm run build

      - name: Build backend
        run: |
          cd backend
          pnpm run build
          
      - name: Check Prisma migrations
        run: |
          cd backend
          echo "Checking if database migrations are needed..."
          echo "Skipping Prisma operations in CI environment"



      - name: Run tests
        run: |
          echo "Skipping tests in CI environment for now"
          echo "Tests should be run locally before deployment"

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            frontend/dist
            backend/dist
          key: ${{ runner.os }}-build-${{ github.sha }}

  # –î–µ–ø–ª–æ–π –Ω–∞ production —Å–µ—Ä–≤–µ—Ä
  deploy-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment archive
        run: |
          tar -czf deployment.tar.gz \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=dist \
            --exclude=*.tar.gz \
            --exclude=*.log \
            --exclude=.env \
            --exclude=production.env \
            docker-compose.prod-multi.yml \
            frontend/ \
            backend/ \
            scripts/ \
            media/ \
            materials/ \
            deploy/

      - name: Upload deployment files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          source: "deployment.tar.gz"
          target: "${{ secrets.DEPLOY_PATH }}"

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          script: |
            set -e
            
            echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –Ω–∞ production —Å–µ—Ä–≤–µ—Ä..."
            echo "–í—Ä–µ–º—è: $(date)"
            echo "–ö–æ–º–º–∏—Ç: ${{ github.sha }}"
            echo "–í–µ—Ç–∫–∞: ${{ github.ref_name }}"
            
            cd ${{ secrets.DEPLOY_PATH }}
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
            echo "üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã..."
            find . -name "backup-*.tar.gz" -mtime +7 -delete 2>/dev/null || true
            find . -name "supermock-full-deploy-*.tar.gz" -mtime +3 -delete 2>/dev/null || true
            echo "‚úÖ –°—Ç–∞—Ä—ã–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã"
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
            docker-compose -f docker-compose.prod-multi.yml down --timeout 30 --remove-orphans || true
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã
            echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã..."
            docker stop app-backend-1 app-redis-1 || true
            docker rm app-backend-1 app-redis-1 || true
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã supermock
            echo "üóëÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã supermock..."
            docker ps -a --filter "name=supermock" --format "{{.Names}}" | xargs -r docker rm -f || true
            
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç—ã 80 –∏ 443
            echo "üîì –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç—ã 80 –∏ 443..."
            sudo fuser -k 80/tcp || true
            sudo fuser -k 443/tcp || true
            sleep 2
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã
            echo "üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã..."
            docker image prune -af || true
            
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∞—Ä—Ö–∏–≤
            echo "üìÇ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥..."
            tar -xzf deployment.tar.gz
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            echo "‚öôÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
            if [ -f production.env ]; then
              ln -sf production.env .env
              # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
              if ! grep -q "REDIS_PASSWORD" production.env; then
                echo "REDIS_PASSWORD=krishna1284" >> production.env
              fi
              
              # –°–æ–∑–¥–∞–µ–º backend/.env —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
              echo "üîß –°–æ–∑–¥–∞–µ–º backend/.env —Ñ–∞–π–ª..."
              mkdir -p backend
              echo "NODE_ENV=production" > backend/.env
              echo "PORT=3000" >> backend/.env
              echo "HOST=0.0.0.0" >> backend/.env
              echo "" >> backend/.env
              echo "# Database Configuration" >> backend/.env
              echo "DATABASE_URL=\"postgresql://supermock:krishna1284@postgres:5432/supermock\"" >> backend/.env
              echo "" >> backend/.env
              echo "USE_MONGODB=false" >> backend/.env
              echo "" >> backend/.env
              echo "# Redis Configuration" >> backend/.env
              echo "USE_REDIS=false" >> backend/.env
              echo "REDIS_HOST=redis" >> backend/.env
              echo "REDIS_PORT=6379" >> backend/.env
              echo "" >> backend/.env
              echo "# Frontend Configuration" >> backend/.env
              echo "FRONTEND_URL=https://app.supermock.ru" >> backend/.env
              echo "FRONTEND_PORT=8080" >> backend/.env
              echo "" >> backend/.env
              echo "# JWT Configuration" >> backend/.env
              echo "JWT_SECRET=052aa937e3faf8542efe8c091a7ff830" >> backend/.env
              echo "" >> backend/.env
              echo "# Telegram Configuration" >> backend/.env
              echo "TELEGRAM_BOT_TOKEN=8464088869:AAFcZb7HmYQJa6vaYjfTDCjfr187p9hhk2o" >> backend/.env
              echo "TELEGRAM_BOT_NAME=SuperMock_bot" >> backend/.env
              echo "" >> backend/.env
              echo "# Telegram Auth Configuration" >> backend/.env
              echo "MAX_VERIFICATION_ATTEMPTS=3" >> backend/.env
              echo "VERIFICATION_CODE_EXPIRY=5" >> backend/.env
              echo "JWT_EXPIRY_DAYS=30" >> backend/.env
              echo "VERIFICATION_CODE_LENGTH=6" >> backend/.env
              echo "CODE_CLEANUP_INTERVAL=5" >> backend/.env
              echo "MAX_CODES_PER_PHONE=3" >> backend/.env
              echo "" >> backend/.env
              echo "# Domain Configuration" >> backend/.env
              echo "DOMAIN=supermock.ru" >> backend/.env
              
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
              echo "‚úÖ Backend .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω:"
              cat backend/.env
              
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
              echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
              REQUIRED_VARS=("POSTGRES_PASSWORD" "DATABASE_URL" "TELEGRAM_BOT_TOKEN" "TELEGRAM_BOT_NAME")
              MISSING_VARS=()
              
              for var in "${REQUIRED_VARS[@]}"; do
                if ! grep -q "^${var}=" production.env; then
                  MISSING_VARS+=("$var")
                fi
              done
              
              if [ ${#MISSING_VARS[@]} -gt 0 ]; then
                echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${MISSING_VARS[*]}"
                echo "–≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø—Ä–æ–±–ª–µ–º–∞–º —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"
              else
                echo "‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
              fi
              
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ DATABASE_URL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
              if grep -q "DATABASE_URL" production.env; then
                DB_URL=$(grep "^DATABASE_URL=" production.env | cut -d'=' -f2-)
                if echo "$DB_URL" | grep -q "postgres:"; then
                  echo "‚úÖ DATABASE_URL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å"
                else
                  echo "‚ö†Ô∏è DATABASE_URL –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å"
                  echo "–¢–µ–∫—É—â–∏–π URL: $DB_URL"
                fi
              fi
            else
              echo "‚ùå –§–∞–π–ª production.env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
              exit 1
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Dockerfile –¥–ª—è backend
            echo "üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Docker –¥–ª—è backend..."
            if grep -q "dockerfile: backend/Dockerfile.fix" docker-compose.prod-multi.yml; then
              echo "‚úÖ docker-compose.prod-multi.yml –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Dockerfile.fix"
            else
              echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: docker-compose.prod-multi.yml –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π Dockerfile"
              echo "–≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø—Ä–æ–±–ª–µ–º–∞–º —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ backend"
            fi
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
            docker-compose -f docker-compose.prod-multi.yml up -d --build
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
            echo "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
            sleep 30
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            echo "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
            docker ps --filter "name=supermock" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
            echo "üè• –ü—Ä–æ–≤–µ—Ä—è–µ–º health check..."
            for container in supermock-postgres supermock-redis supermock-backend; do
              if docker inspect "$container" | grep -q '"Status": "healthy"'; then
                echo "‚úÖ $container: –∑–¥–æ—Ä–æ–≤"
              else
                echo "‚ö†Ô∏è $container: –Ω–µ –∑–¥–æ—Ä–æ–≤"
              fi
            done
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
            echo "üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤..."
            
            # API (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            if curl -s -o /dev/null -w "%{http_code}" -H 'Host: api.supermock.ru' http://localhost:3000/api/health | grep -q "200"; then
              echo "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞)"
            else
              echo "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞)"
            fi
            
            # API (–≤–Ω–µ—à–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Traefik)
            echo "üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º API —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π –¥–æ–º–µ–Ω..."
            if curl -s -o /dev/null -w "%{http_code}" https://api.supermock.ru/api/health | grep -q "200"; then
              echo "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ https://api.supermock.ru"
            else
              echo "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ https://api.supermock.ru"
              echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ Traefik..."
              docker logs supermock-traefik --tail 20
            fi
            
            # Frontend App
            if curl -s -o /dev/null -w "%{http_code}" -H 'Host: app.supermock.ru' http://localhost:80/ | grep -q "200"; then
              echo "‚úÖ Frontend App –¥–æ—Å—Ç—É–ø–µ–Ω"
            else
              echo "‚ùå Frontend App –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            fi
            
            # Landing (supermock.ru - —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–∞–π—Ç, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è Traefik)
            echo "‚ÑπÔ∏è supermock.ru - —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–∞–π—Ç, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è Traefik"
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Traefik –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Traefik..."
            docker restart supermock-traefik || true
            sleep 10
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            echo "üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏..."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            echo "üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL..."
            if docker exec supermock-postgres pg_isready -U supermock > /dev/null 2>&1; then
              echo "‚úÖ PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω"
            else
              echo "‚ùå PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º..."
              docker restart supermock-postgres
              sleep 10
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç
            echo "üî¥ –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis..."
            if docker exec supermock-redis redis-cli ping | grep -q "PONG"; then
              echo "‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω"
            else
              echo "‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º..."
              docker restart supermock-redis
              sleep 10
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º backend –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            echo "üîå –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ backend –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
            if docker logs supermock-backend --tail 20 | grep -q "Prisma Client" || docker logs supermock-backend --tail 20 | grep -q "Database connection"; then
              echo "‚úÖ Backend –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            else
              echo "‚ö†Ô∏è Backend –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏..."
              docker logs supermock-backend --tail 50
              
              # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
              echo "üîß –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º..."
              
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤ –æ–¥–Ω–æ–π —Å–µ—Ç–∏
              echo "üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏..."
              docker network ls
              docker network inspect mockmate_supermock-network || echo "–°–µ—Ç—å mockmate_supermock-network –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
              
              # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º backend —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
              echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º backend..."
              docker restart supermock-backend
              sleep 15
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            echo "üîë –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏..."
            
            # –î–∞–µ–º backend –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            echo "‚è≥ –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ backend..."
            sleep 30
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ backend –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –±–∞–∑–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend..."
            if curl -s --max-time 10 --connect-timeout 5 -H "Host: api.supermock.ru" "http://localhost:3000/api/health" > /dev/null 2>&1; then
              echo "‚úÖ Backend –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ health check"
            else
              echo "‚ö†Ô∏è Backend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ health check, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏..."
              docker logs supermock-backend --tail 30
              echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º backend –µ—â–µ —Ä–∞–∑..."
              docker restart supermock-backend
              sleep 20
            fi
            
            # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            echo "üîë –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏..."
            AUTH_RESPONSE=$(curl -s --max-time 15 --connect-timeout 10 -H "Host: api.supermock.ru" "http://localhost:3000/api/health" \
              -w "%{http_code}" 2>/dev/null || echo "000")
            
            if echo "$AUTH_RESPONSE" | grep -q "200"; then
              echo "‚úÖ API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            else
              echo "‚ùå API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: $AUTH_RESPONSE"
              echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ backend..."
              docker logs supermock-backend --tail 30
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram Auth API
            echo "ü§ñ –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram Auth API..."
            TELEGRAM_AUTH_RESPONSE=$(curl -s --max-time 15 --connect-timeout 10 -H "Host: api.supermock.ru" "http://localhost:3000/api/telegram-auth/stats" \
              -w "%{http_code}" 2>/dev/null || echo "000")
            
            if echo "$TELEGRAM_AUTH_RESPONSE" | grep -q "200"; then
              echo "‚úÖ Telegram Auth API —Ä–∞–±–æ—Ç–∞–µ—Ç"
            else
              echo "‚ùå Telegram Auth API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: $TELEGRAM_AUTH_RESPONSE"
              echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ backend..."
              docker logs supermock-backend --tail 30
            fi
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            echo "üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞..."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            CONTAINER_STATUS=$(docker ps --filter "name=supermock" --format "{{.Status}}" 2>/dev/null || echo "ERROR")
            
            if echo "$CONTAINER_STATUS" | grep -q "Up"; then
              echo "üéâ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
              echo "–°–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å–∞–º:"
              echo "- https://app.supermock.ru (–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)"
              echo "- https://api.supermock.ru (API)"
              echo "‚ÑπÔ∏è supermock.ru - —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–∞–π—Ç, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è Traefik"
              echo ""
              echo "üîê Telegram Auth API –¥–æ—Å—Ç—É–ø–µ–Ω:"
              echo "- POST /api/telegram-auth/send-code - –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞"
              echo "- POST /api/telegram-auth/verify-code - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞"
              echo "- GET /api/telegram-auth/me - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
              echo "- GET /api/telegram-auth/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
              echo ""
              echo "üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ @SuperMock_bot"
              echo "üîó –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: https://app.supermock.ru/auth/telegram"
            else
              echo "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"
              echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
              docker ps --filter "name=supermock" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
              echo "üîç –õ–æ–≥–∏ backend:"
              docker logs supermock-backend --tail 20 || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ backend"
              exit 1
            fi
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤
            echo "üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤..."
            rm -f deployment.tar.gz
            rm -f supermock-full-deploy-*.tar.gz
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            echo "üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞..."
            find . -name "backup-*.tar.gz" -mtime +7 -delete 2>/dev/null || true
            find . -name "supermock-full-deploy-*.tar.gz" -mtime +3 -delete 2>/dev/null || true
            find . -name "*.tar.gz" -size +100M -mtime +1 -delete 2>/dev/null || true
            echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  notify:
    needs: deploy-production
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
          echo "–ö–æ–º–º–∏—Ç: ${{ github.sha }}"
          echo "–í–µ—Ç–∫–∞: ${{ github.ref_name }}"
          echo "–í—Ä–µ–º—è: $(date)"
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!"
          echo "–ö–æ–º–º–∏—Ç: ${{ github.sha }}"
          echo "–í–µ—Ç–∫–∞: ${{ github.ref_name }}"
          echo "–í—Ä–µ–º—è: $(date)"
          echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
