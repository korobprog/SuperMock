name: Deploy to Production Server

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ permissions –¥–ª—è CI/CD
permissions:
  contents: write
  packages: write
  actions: write
  deployments: write

env:
  SERVER_IP: 217.198.6.238
  SERVER_PATH: /opt/mockmate
  PROJECT_NAME: supermock

jobs:
  # –°–±–æ—Ä–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        # –£–±–∏—Ä–∞–µ–º —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ package.json

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          cd frontend && pnpm install --frozen-lockfile
          cd ../backend && pnpm install --frozen-lockfile
          cd ../Lading/supermock-ai-interview && pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: cd backend && pnpm exec prisma generate

      - name: Build frontend
        run: cd frontend && pnpm run build

      - name: Build backend
        run: cd backend && pnpm run build

      - name: Build landing
        run: cd Lading/supermock-ai-interview && pnpm run build

      - name: Run tests
        run: |
          pnpm run test || echo "No tests configured"
          cd backend && pnpm run test || echo "No backend tests configured"
          cd ../frontend && pnpm run test || echo "No frontend tests configured"

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            frontend/dist
            backend/dist
            Lading/supermock-ai-interview/dist
          key: ${{ runner.os }}-build-${{ github.sha }}

  # –°–æ–∑–¥–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤
  build-docker-images:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug file structure
        run: |
          echo "=== –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ ==="
          ls -la
          echo "=== –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É Lading ==="
          if [ -d "Lading" ]; then
            ls -la Lading/
            echo "=== –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É supermock-ai-interview ==="
            if [ -d "Lading/supermock-ai-interview" ]; then
              ls -la Lading/supermock-ai-interview/
              echo "=== –ü—Ä–æ–≤–µ—Ä—è–µ–º Dockerfile ==="
              if [ -f "Lading/supermock-ai-interview/Dockerfile" ]; then
                ls -la Lading/supermock-ai-interview/Dockerfile
                echo "=== –°–æ–¥–µ—Ä–∂–∏–º–æ–µ Dockerfile ==="
                head -5 Lading/supermock-ai-interview/Dockerfile
              else
                echo "‚ùå Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω!"
              fi
            else
              echo "‚ùå –ü–∞–ø–∫–∞ supermock-ai-interview –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
            fi
          else
            echo "‚ùå –ü–∞–ø–∫–∞ Lading –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile
          push: false
          tags: supermock-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend app image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./frontend/Dockerfile
          push: false
          tags: supermock-frontend-app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build landing image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Lading/supermock-ai-interview/Dockerfile
          push: false
          tags: supermock-frontend-landing:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save Docker images
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: |
            supermock-backend:latest
            supermock-frontend-app:latest
            supermock-frontend-landing:latest

  # –î–µ–ø–ª–æ–π –Ω–∞ production —Å–µ—Ä–≤–µ—Ä
  deploy-production:
    needs: build-docker-images
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker images
        uses: actions/download-artifact@v4
        with:
          name: docker-images

      - name: Create deployment archive
        run: |
          tar -czf deployment.tar.gz \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=dist \
            --exclude=*.tar.gz \
            --exclude=*.log \
            --exclude=.env \
            --exclude=production.env \
            docker-compose.prod-multi.yml \
            frontend/ \
            backend/ \
            Lading/ \
            scripts/ \
            media/ \
            materials/ \
            deploy/

      - name: Upload deployment archive
        uses: actions/upload-artifact@v4
        with:
          name: deployment-archive
          path: deployment.tar.gz

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          script: |
            set -e
            
            echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –Ω–∞ production —Å–µ—Ä–≤–µ—Ä..."
            echo "–í—Ä–µ–º—è: $(date)"
            echo "–ö–æ–º–º–∏—Ç: ${{ github.sha }}"
            echo "–í–µ—Ç–∫–∞: ${{ github.ref_name }}"
            
            cd ${{ secrets.DEPLOY_PATH }}
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            echo "üì¶ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é..."
            if [ -f docker-compose.prod-multi.yml ]; then
              BACKUP_NAME="backup-$(date +%Y%m%d-%H%M%S).tar.gz"
              tar -czf "$BACKUP_NAME" \
                docker-compose.prod-multi.yml \
                frontend/ backend/ Lading/ \
                2>/dev/null || echo "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"
              echo "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $BACKUP_NAME"
            fi
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
            docker-compose -f docker-compose.prod-multi.yml down --timeout 30 || true
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã
            echo "üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã..."
            docker image prune -af || true
            
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∞—Ä—Ö–∏–≤
            echo "üìÇ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥..."
            tar -xzf deployment.tar.gz
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            echo "‚öôÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
            if [ -f production.env ]; then
              ln -sf production.env .env
              # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
              if ! grep -q "REDIS_PASSWORD" production.env; then
                echo "REDIS_PASSWORD=krishna1284" >> production.env
              fi
            else
              echo "‚ùå –§–∞–π–ª production.env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
              exit 1
            fi
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
            docker-compose -f docker-compose.prod-multi.yml up -d --build
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
            echo "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
            sleep 30
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            echo "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
            docker ps --filter "name=supermock" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
            echo "üè• –ü—Ä–æ–≤–µ—Ä—è–µ–º health check..."
            for container in supermock-postgres supermock-redis supermock-backend; do
              if docker inspect "$container" | grep -q '"Status": "healthy"'; then
                echo "‚úÖ $container: –∑–¥–æ—Ä–æ–≤"
              else
                echo "‚ö†Ô∏è $container: –Ω–µ –∑–¥–æ—Ä–æ–≤"
              fi
            done
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
            echo "üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤..."
            
            # API
            if curl -s -o /dev/null -w "%{http_code}" -H 'Host: api.supermock.ru' http://localhost/api/health | grep -q "200"; then
              echo "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω"
            else
              echo "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            fi
            
            # Frontend App
            if curl -s -o /dev/null -w "%{http_code}" -H 'Host: app.supermock.ru' http://localhost/ | grep -q "200"; then
              echo "‚úÖ Frontend App –¥–æ—Å—Ç—É–ø–µ–Ω"
            else
              echo "‚ùå Frontend App –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            fi
            
            # Landing
            if curl -s -o /dev/null -w "%{http_code}" -H 'Host: supermock.ru' http://localhost/ | grep -q "200"; then
              echo "‚úÖ Landing –¥–æ—Å—Ç—É–ø–µ–Ω"
            else
              echo "‚ùå Landing –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            fi
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Traefik –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Traefik..."
            docker restart supermock-traefik || true
            sleep 10
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            echo "üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞..."
            if docker ps --filter "name=supermock" --format "{{.Status}}" | grep -q "Up"; then
              echo "üéâ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
              echo "–°–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å–∞–º:"
              echo "  - https://supermock.ru (–õ–µ–Ω–¥–∏–Ω–≥)"
              echo "  - https://app.supermock.ru (–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)"
              echo "  - https://api.supermock.ru (API)"
            else
              echo "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"
              exit 1
            fi
            
            # –û—á–∏—Å—Ç–∫–∞
            echo "üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
            rm -f deployment.tar.gz
            rm -f supermock-full-deploy-*.tar.gz

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  notify:
    needs: deploy-production
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
          echo "–ö–æ–º–º–∏—Ç: ${{ github.sha }}"
          echo "–í–µ—Ç–∫–∞: ${{ github.ref_name }}"
          echo "–í—Ä–µ–º—è: $(date)"
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!"
          echo "–ö–æ–º–º–∏—Ç: ${{ github.sha }}"
          echo "–í–µ—Ç–∫–∞: ${{ github.ref_name }}"
          echo "–í—Ä–µ–º—è: $(date)"
          echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
