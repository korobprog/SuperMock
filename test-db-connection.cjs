// ะขะตัั ะฟะพะดะบะปััะตะฝะธั ะบ ะฑะฐะทะต ะดะฐะฝะฝัั
require('dotenv').config();
const { PrismaClient } = require('@prisma/client');

async function testDatabaseConnection() {
  console.log('๐ ะขะตััะธัะพะฒะฐะฝะธะต ะฟะพะดะบะปััะตะฝะธั ะบ ะฑะฐะทะต ะดะฐะฝะฝัั...\n');
  console.log('๐ DATABASE_URL:', process.env.DATABASE_URL);

  const prisma = new PrismaClient();

  try {
    // ะขะตัั ะฟะพะดะบะปััะตะฝะธั
    console.log('1๏ธโฃ ะัะพะฒะตััะตะผ ะฟะพะดะบะปััะตะฝะธะต...');
    await prisma.$connect();
    console.log('โ ะะพะดะบะปััะตะฝะธะต ััะฟะตัะฝะพ!');

    // ะขะตัั ะฟัะพััะพะณะพ ะทะฐะฟัะพัะฐ
    console.log('\n2๏ธโฃ ะัะฟะพะปะฝัะตะผ ะฟัะพััะพะน ะทะฐะฟัะพั...');
    const result = await prisma.$queryRaw`SELECT 1 as test`;
    console.log('โ ะะฐะฟัะพั ะฒัะฟะพะปะฝะตะฝ:', result);

    // ะัะพะฒะตััะตะผ ัะฐะฑะปะธัั
    console.log('\n3๏ธโฃ ะัะพะฒะตััะตะผ ัะฐะฑะปะธัั...');
    const tables = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
    `;
    console.log('โ ะะฐะนะดะตะฝะฝัะต ัะฐะฑะปะธัั:', tables.map(t => t.table_name));

    // ะัะพะฒะตััะตะผ ัะฐะฑะปะธัั feedback
    console.log('\n4๏ธโฃ ะัะพะฒะตััะตะผ ัะฐะฑะปะธัั feedback...');
    const feedbackTable = await prisma.$queryRaw`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'feedback'
    `;
    console.log('โ ะกัััะบัััะฐ ัะฐะฑะปะธัั feedback:', feedbackTable);

  } catch (error) {
    console.error('โ ะัะธะฑะบะฐ:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testDatabaseConnection().then(() => {
  console.log('\n๐ ะขะตัั ะทะฐะฒะตััะตะฝ!');
  process.exit(0);
}).catch(error => {
  console.error('๐ฅ ะัะธัะธัะตัะบะฐั ะพัะธะฑะบะฐ:', error);
  process.exit(1);
});
