#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
 * –ó–∞–ø—É—Å–∫: node create-slot.js
 */

const API_BASE = 'http://localhost:3000';

async function createSlot() {
  console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏...\n');

  // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞
  const interviewer = {
    userId: 1001,
    role: 'interviewer',
    profession: 'frontend',
    language: 'en',
    tools: ['react', 'typescript', 'vue'],
    slotTime: '14:00',
  };

  // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  const candidate = {
    userId: 1002,
    role: 'candidate',
    profession: 'frontend',
    language: 'en',
    tools: ['react', 'vue', 'angular'],
    slotTime: '14:00',
  };

  const users = [interviewer, candidate];

  for (const user of users) {
    try {
      console.log(`üìù –°–æ–∑–¥–∞–µ–º ${user.role}: ${user.profession} developer`);

      // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
      const toolsResponse = await fetch(`${API_BASE}/api/user-tools`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: user.userId,
          profession: user.profession,
          tools: user.tools,
        }),
      });

      if (toolsResponse.ok) {
        console.log(`  ‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${user.tools.join(', ')}`);
      } else {
        const error = await toolsResponse.text();
        console.log(
          `  ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${toolsResponse.status} - ${error}`
        );
      }

      // 2. –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏
      const slotTime = new Date();
      slotTime.setHours(14, 0, 0, 0); // 14:00

      const preferencesResponse = await fetch(`${API_BASE}/api/preferences`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: user.userId,
          role: user.role,
          profession: user.profession,
          language: user.language,
          slotsUtc: [slotTime.toISOString()],
        }),
      });

      if (preferencesResponse.ok) {
        console.log(`  ‚úÖ –°–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω: ${user.slotTime}`);
      } else {
        const error = await preferencesResponse.text();
        console.log(
          `  ‚ùå –û—à–∏–±–∫–∞ —Å–ª–æ—Ç–∞: ${preferencesResponse.status} - ${error}`
        );
      }
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${user.role}: ${error.message}`);
    }

    console.log('');
  }

  console.log('üéâ –°–ª–æ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã!');
  console.log('\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:');
  console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
  console.log('2. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å Candidate');
  console.log('3. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é Frontend');
  console.log('4. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã React, Vue');
  console.log('5. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏');
  console.log('6. –î–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è —Å–ª–æ—Ç –≤ 14:00 —Å —É—á–µ—Ç–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤!');
}

// –ó–∞–ø—É—Å–∫
if (import.meta.url === `file://${process.argv[1]}`) {
  createSlot();
}
