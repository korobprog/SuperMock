const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
const SUPPORTED_LANGUAGES = ['ru', 'en', 'es', 'de', 'fr', 'zh'];

// –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏
const PROFESSIONS = [
  'frontend-developer',
  'backend-developer',
  'fullstack-developer',
  'mobile-developer',
  'devops-engineer',
  'qa-engineer',
  'ux-ui-designer',
  'data-analyst',
  'data-scientist',
  'product-manager'
];

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–∑–∞–≥–ª—É—à–∫–∞ - –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API)
async function translateText(text, targetLanguage, sourceLanguage = 'en') {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å Google Translate API, DeepL, –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
  // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
  
  const translations = {
    'ru': {
      'JavaScript Interview Questions': '–í–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏ –ø–æ JavaScript',
      'React Hooks Guide': '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ React Hooks',
      'TypeScript Advanced Types': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–∏–ø—ã TypeScript',
      'Node.js Fundamentals': '–û—Å–Ω–æ–≤—ã Node.js',
      'Database Design': '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö',
      'API Design': '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API'
    },
    'es': {
      'JavaScript Interview Questions': 'Preguntas de entrevista de JavaScript',
      'React Hooks Guide': 'Gu√≠a de React Hooks',
      'TypeScript Advanced Types': 'Tipos avanzados de TypeScript',
      'Node.js Fundamentals': 'Fundamentos de Node.js',
      'Database Design': 'Dise√±o de bases de datos',
      'API Design': 'Dise√±o de API'
    },
    'de': {
      'JavaScript Interview Questions': 'JavaScript Interview Fragen',
      'React Hooks Guide': 'React Hooks Anleitung',
      'TypeScript Advanced Types': 'TypeScript Erweiterte Typen',
      'Node.js Fundamentals': 'Node.js Grundlagen',
      'Database Design': 'Datenbankdesign',
      'API Design': 'API Design'
    },
    'fr': {
      'JavaScript Interview Questions': 'Questions d\'entretien JavaScript',
      'React Hooks Guide': 'Guide des React Hooks',
      'TypeScript Advanced Types': 'Types avanc√©s TypeScript',
      'Node.js Fundamentals': 'Fondamentaux Node.js',
      'Database Design': 'Conception de base de donn√©es',
      'API Design': 'Conception d\'API'
    },
    'zh': {
      'JavaScript Interview Questions': 'JavaScript Èù¢ËØïÈóÆÈ¢ò',
      'React Hooks Guide': 'React Hooks ÊåáÂçó',
      'TypeScript Advanced Types': 'TypeScript È´òÁ∫ßÁ±ªÂûã',
      'Node.js Fundamentals': 'Node.js Âü∫Á°Ä',
      'Database Design': 'Êï∞ÊçÆÂ∫ìËÆæËÆ°',
      'API Design': 'API ËÆæËÆ°'
    }
  };

  // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
  if (translations[targetLanguage] && translations[targetLanguage][text]) {
    return translations[targetLanguage][text];
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª —Å –ø–æ–º–µ—Ç–∫–æ–π
  return `[${targetLanguage.toUpperCase()}] ${text}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
async function createMissingTranslations() {
  console.log('üåê Creating missing translations...');

  try {
    const materials = await prisma.material.findMany({
      include: {
        translations: true
      }
    });

    let createdCount = 0;

    for (const material of materials) {
      const existingLanguages = material.translations.map(t => t.language);
      const missingLanguages = SUPPORTED_LANGUAGES.filter(lang => !existingLanguages.includes(lang));

      if (missingLanguages.length > 0) {
        console.log(`üìù Material ${material.id} missing translations: ${missingLanguages.join(', ')}`);

        // –ë–µ—Ä–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –∫–∞–∫ –±–∞–∑–æ–≤—ã–π (–∏–ª–∏ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π)
        const baseTranslation = material.translations.find(t => t.language === 'en') || material.translations[0];

        if (baseTranslation) {
          for (const targetLang of missingLanguages) {
            try {
              // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
              const translatedTitle = await translateText(baseTranslation.title, targetLang, baseTranslation.language);
              const translatedDescription = await translateText(baseTranslation.description, targetLang, baseTranslation.language);
              
              // –î–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å placeholder –∏–ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —á–∞—Å—Ç–∏—á–Ω–æ
              const translatedContent = `[${targetLang.toUpperCase()}] ${baseTranslation.content.substring(0, 100)}...`;

              // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
              await prisma.materialTranslation.create({
                data: {
                  materialId: material.id,
                  language: targetLang,
                  title: translatedTitle,
                  description: translatedDescription,
                  content: translatedContent,
                  createdAt: new Date(),
                  updatedAt: new Date(),
                }
              });

              createdCount++;
              console.log(`    ‚úÖ Created ${targetLang} translation: ${translatedTitle}`);

            } catch (error) {
              console.error(`    ‚ùå Error creating ${targetLang} translation:`, error.message);
            }
          }
        }
      }
    }

    console.log(`\nüéâ Translation creation completed!`);
    console.log(`üìä Translations created: ${createdCount}`);

  } catch (error) {
    console.error('‚ùå Error during translation creation:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JSON —Ñ–∞–π–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function generateJsonFiles() {
  console.log('üìÑ Generating JSON files from database...');

  try {
    for (const profession of PROFESSIONS) {
      console.log(`\nüìö Processing ${profession}...`);

      const materials = await prisma.material.findMany({
        where: { profession },
        include: {
          translations: true
        }
      });

      if (materials.length === 0) {
        console.log(`  ‚ö†Ô∏è  No materials found for ${profession}`);
        continue;
      }

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —è–∑—ã–∫–∞–º
      const materialsByLanguage = {};

      for (const material of materials) {
        for (const translation of material.translations) {
          const lang = translation.language;
          
          if (!materialsByLanguage[lang]) {
            materialsByLanguage[lang] = {
              profession: material.profession,
              language: lang,
              categories: [],
              materials: []
            };
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
          const categoryExists = materialsByLanguage[lang].categories.find(c => c.id === material.category);
          if (!categoryExists) {
            materialsByLanguage[lang].categories.push({
              id: material.category,
              name: material.category, // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
              count: 1,
              icon: "üìö",
              color: "bg-blue-100 text-blue-800"
            });
          } else {
            categoryExists.count++;
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
          materialsByLanguage[lang].materials.push({
            id: material.id,
            title: translation.title,
            description: translation.description,
            category: material.category,
            difficulty: material.difficulty,
            readTime: material.readTime,
            rating: material.rating,
            reads: material.reads,
            tags: material.tags,
            content: translation.content,
            isNew: material.isNew,
            isPopular: material.isPopular,
            createdAt: material.createdAt.toISOString()
          });
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
      for (const [lang, data] of Object.entries(materialsByLanguage)) {
        const filePath = path.join(__dirname, '..', 'materials', `${profession}-${lang}.json`);
        
        fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
        console.log(`  ‚úÖ Generated: ${filePath} (${data.materials.length} materials)`);
      }
    }

    console.log(`\nüéâ JSON generation completed!`);

  } catch (error) {
    console.error('‚ùå Error during JSON generation:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
async function checkTranslationQuality() {
  console.log('üîç Checking translation quality...');

  try {
    const materials = await prisma.material.findMany({
      include: {
        translations: true
      }
    });

    let issues = 0;

    for (const material of materials) {
      const translations = material.translations;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏–º–µ—é—Ç —Ä–∞–∑—É–º–Ω—É—é –¥–ª–∏–Ω—É
      for (const translation of translations) {
        if (translation.title.length < 5) {
          console.log(`‚ö†Ô∏è  Short title in ${translation.language}: ${translation.title}`);
          issues++;
        }

        if (translation.description.length < 10) {
          console.log(`‚ö†Ô∏è  Short description in ${translation.language}: ${translation.description}`);
          issues++;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ placeholder –ø–µ—Ä–µ–≤–æ–¥—ã
        if (translation.title.includes('[EN]') || translation.title.includes('[RU]') || 
            translation.title.includes('[ES]') || translation.title.includes('[DE]') ||
            translation.title.includes('[FR]') || translation.title.includes('[ZH]')) {
          console.log(`‚ö†Ô∏è  Placeholder title in ${translation.language}: ${translation.title}`);
          issues++;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –≤—Å–µ —è–∑—ã–∫–∏
      const existingLanguages = translations.map(t => t.language);
      const missingLanguages = SUPPORTED_LANGUAGES.filter(lang => !existingLanguages.includes(lang));
      
      if (missingLanguages.length > 0) {
        console.log(`‚ö†Ô∏è  Material ${material.id} missing translations: ${missingLanguages.join(', ')}`);
        issues++;
      }
    }

    console.log(`\nüìä Quality check completed!`);
    console.log(`‚ö†Ô∏è  Issues found: ${issues}`);

  } catch (error) {
    console.error('‚ùå Error during quality check:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const command = args[0];

switch (command) {
  case 'create':
    createMissingTranslations();
    break;
  case 'generate':
    generateJsonFiles();
    break;
  case 'check':
    checkTranslationQuality();
    break;
  default:
    console.log('Usage:');
    console.log('  node translate-materials.js create  - Create missing translations');
    console.log('  node translate-materials.js generate - Generate JSON files from DB');
    console.log('  node translate-materials.js check    - Check translation quality');
    break;
}

// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
process.on('SIGINT', async () => {
  await prisma.$disconnect();
  process.exit(0);
});
