#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –±–æ—Ç–∞
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/test-telegram-bot.js
 */

import { config } from 'dotenv';
import fetch from 'node-fetch';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

async function testBot() {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;

  if (!botToken) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    process.exit(1);
  }

  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞...');
  console.log(`ü§ñ –¢–æ–∫–µ–Ω –±–æ—Ç–∞: ${botToken.substring(0, 10)}...`);

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ...');
    const meResponse = await fetch(
      `https://api.telegram.org/bot${botToken}/getMe`
    );
    const meData = await meResponse.json();

    if (meData.ok) {
      console.log('‚úÖ –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log(`   –ò–º—è: ${meData.result.first_name}`);
      console.log(`   Username: @${meData.result.username}`);
      console.log(`   ID: ${meData.result.id}`);
    } else {
      console.error(
        '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:',
        meData.description
      );
      return;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
    console.log("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook'–∞...");
    const webhookResponse = await fetch(
      `https://api.telegram.org/bot${botToken}/getWebhookInfo`
    );
    const webhookData = await webhookResponse.json();

    if (webhookData.ok) {
      if (webhookData.result.url) {
        console.log('‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        console.log(`   URL: ${webhookData.result.url}`);
        console.log(
          `   –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${webhookData.result.pending_update_count}`
        );

        if (webhookData.result.last_error_message) {
          console.log(
            `   ‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${webhookData.result.last_error_message}`
          );
        }
      } else {
        console.log('‚ö†Ô∏è Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      }
    } else {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook'–µ:",
        webhookData.description
      );
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω)
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...');
    const baseUrl = process.env.API_URL || 'http://localhost:3001';

    try {
      const statusResponse = await fetch(`${baseUrl}/api/telegram-bot-status`);
      if (statusResponse.ok) {
        const statusData = await statusResponse.json();
        console.log('‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç /api/telegram-bot-status –¥–æ—Å—Ç—É–ø–µ–Ω');
        console.log(
          `   –°—Ç–∞—Ç—É—Å: ${statusData.available ? '–î–æ—Å—Ç—É–ø–µ–Ω' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`
        );
        if (!statusData.available) {
          console.log(`   –ü—Ä–∏—á–∏–Ω–∞: ${statusData.reason}`);
        }
      } else {
        console.log('‚ö†Ô∏è API —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω?)');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è API —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω?)');
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: pnpm run dev');
    console.log('2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ webhook: pnpm run telegram:setup');
    console.log('3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –±–æ—Ç—É –≤ Telegram');
    console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –∫–Ω–æ–ø–∫–∏ START');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testBot();



