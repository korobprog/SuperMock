#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook'–∞ Telegram –±–æ—Ç–∞
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/setup-telegram-webhook.js
 */

import { config } from 'dotenv';
import fetch from 'node-fetch';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

async function setupWebhook() {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  const domain = process.env.DOMAIN || 'supermock.ru';

  if (!botToken) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    process.exit(1);
  }

  console.log("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook'–∞ –¥–ª—è Telegram –±–æ—Ç–∞...");
  console.log(`üåê –î–æ–º–µ–Ω: ${domain}`);
  console.log(`ü§ñ –¢–æ–∫–µ–Ω –±–æ—Ç–∞: ${botToken.substring(0, 10)}...`);

  const webhookUrl = `https://${domain}/api/telegram-webhook`;

  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    const response = await fetch(
      `https://api.telegram.org/bot${botToken}/setWebhook`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          url: webhookUrl,
          allowed_updates: ['callback_query', 'message'],
          drop_pending_updates: true,
        }),
      }
    );

    const data = await response.json();

    if (data.ok) {
      console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
      console.log(`üîó URL: ${webhookUrl}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook'–µ
      const infoResponse = await fetch(
        `https://api.telegram.org/bot${botToken}/getWebhookInfo`
      );
      const infoData = await infoResponse.json();

      if (infoData.ok) {
        console.log("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook'–µ:");
        console.log(`   URL: ${infoData.result.url}`);
        console.log(
          `   –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${infoData.result.pending_update_count}`
        );
        console.log(
          `   –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${infoData.result.last_error_message || '–ù–µ—Ç'}`
        );
      }
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook'–∞:", data.description);
      process.exit(1);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ webhook'–∞:", error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
setupWebhook();
