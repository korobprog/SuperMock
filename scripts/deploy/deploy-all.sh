#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
# –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∏ –±—ç–∫–µ–Ω–¥, –ù–ï –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç Traefik

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

echo "üöÄ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Super Mock..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
echo "üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É..."
if ! ssh dokploy-server "echo '–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω'" > /dev/null 2>&1; then
    echo "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    exit 1
fi

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
SCRIPT_DIR=$(pwd)

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ (–∏–∑ scripts/deploy –≤ –∫–æ—Ä–µ–Ω—å)
cd "$(dirname "$0")/../.."
PROJECT_ROOT=$(pwd)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
if [ ! -d "frontend" ]; then
    echo "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ $PROJECT_ROOT"
    exit 1
fi

if [ ! -d "backend" ]; then
    echo "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è backend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ $PROJECT_ROOT"
    exit 1
fi

echo "‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: frontend, backend"

# üîç –ö–û–ú–ü–õ–ï–ö–°–ù–´–ï –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò
echo "üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
REQUIRED_FILES=(
    "package.json"
    "frontend/vite.config.ts"
    "frontend/Dockerfile"
    "backend/prisma/schema.prisma"
    "backend/Dockerfile"
    "docker-compose.prod.yml"
    ".env"
)

for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: $file"
        exit 1
    fi
done
echo "‚úÖ –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
if [ -f ".env" ]; then
    REQUIRED_ENV_VARS=(
        "DATABASE_URL"
        "TELEGRAM_BOT_TOKEN"
        "SESSION_SECRET"
        "JWT_SECRET"
        "VITE_API_URL"
        "FRONTEND_URL"
        "BACKEND_URL"
    )
    
    MISSING_VARS=()
    for var in "${REQUIRED_ENV_VARS[@]}"; do
        if ! grep -q "^${var}=" .env; then
            MISSING_VARS+=("$var")
        fi
    done
    
    if [ ${#MISSING_VARS[@]} -gt 0 ]; then
        echo "‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${MISSING_VARS[*]}"
        echo "üìù –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–µ–ø–ª–æ–π, –Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã..."
    else
        echo "‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã"
    fi
else
    echo "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
echo "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

if ! docker info &> /dev/null; then
    echo "‚ùå Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"
    exit 1
fi
echo "‚úÖ Docker –¥–æ—Å—Ç—É–ø–µ–Ω"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É..."
if ! ssh dokploy-server "echo '–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω'" &> /dev/null; then
    echo "‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
    exit 1
fi
echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
echo "üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
FREE_SPACE=$(ssh dokploy-server "df /opt/mockmate | tail -1 | awk '{print \$4}'")
if [ "$FREE_SPACE" -lt 1000000 ]; then
    echo "‚ö†Ô∏è  –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${FREE_SPACE}KB"
    echo "üìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º"
else
    echo "‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: ${FREE_SPACE}KB"
fi

echo "üéØ –í—Å–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!"

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
echo "üì¶ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ frontend.tar.gz..."
if tar -czf frontend.tar.gz --exclude='node_modules' --exclude='.git' --exclude='dist' --exclude='.env' --exclude='*.log' frontend/; then
    echo "‚úÖ –ê—Ä—Ö–∏–≤ frontend.tar.gz —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"
else
    echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ frontend.tar.gz"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω
if [ ! -f "frontend.tar.gz" ]; then
    echo "‚ùå –§–∞–π–ª frontend.tar.gz –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    exit 1
fi

echo "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞ frontend –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
scp frontend.tar.gz dokploy-server:/opt/mockmate/
ssh dokploy-server "cd /opt/mockmate && tar -xzf frontend.tar.gz && rm frontend.tar.gz"
rm frontend.tar.gz

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞ –±—ç–∫–µ–Ω–¥–∞
echo "üì¶ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞ –±—ç–∫–µ–Ω–¥–∞..."
echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ backend.tar.gz..."
if tar -czf backend.tar.gz --exclude='node_modules' --exclude='.git' --exclude='dist' --exclude='.env' --exclude='*.log' --exclude='uploads' backend/; then
    echo "‚úÖ –ê—Ä—Ö–∏–≤ backend.tar.gz —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"
else
    echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ backend.tar.gz"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω
if [ ! -f "backend.tar.gz" ]; then
    echo "‚ùå –§–∞–π–ª backend.tar.gz –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    exit 1
fi

echo "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞ backend –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
scp backend.tar.gz dokploy-server:/opt/mockmate/
ssh dokploy-server "cd /opt/mockmate && tar -xzf backend.tar.gz && rm backend.tar.gz"
rm backend.tar.gz

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker
echo "üì¶ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker..."
echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ docker-config.tar.gz..."
if tar -czf docker-config.tar.gz docker-compose.prod.yml frontend/Dockerfile backend/Dockerfile; then
    echo "‚úÖ –ê—Ä—Ö–∏–≤ docker-config.tar.gz —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"
else
    echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ docker-config.tar.gz"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω
if [ ! -f "docker-config.tar.gz" ]; then
    echo "‚ùå –§–∞–π–ª docker-config.tar.gz –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    exit 1
fi

echo "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
scp docker-config.tar.gz dokploy-server:/opt/mockmate/
ssh dokploy-server "cd /opt/mockmate && tar -xzf docker-config.tar.gz && rm docker-config.tar.gz"
rm docker-config.tar.gz

# –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
cd "$SCRIPT_DIR"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
ssh dokploy-server << 'EOF'

echo "üîß –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."

cd /opt/mockmate

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞
echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞..."
BACKUP_NAME="full-backup-$(date +%Y%m%d_%H%M%S).tar.gz"
tar -czf "$BACKUP_NAME" frontend/ backend/ 2>/dev/null || true

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤..."
rm -rf frontend/dist backend/dist 2>/dev/null || true
echo "‚úÖ –°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
rollback() {
    echo "üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ç–∫–∞—Ç..."
    echo "üì¶ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞: $BACKUP_NAME"
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    docker-compose -f docker-compose.prod.yml down 2>/dev/null || true
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞
    if [ -f "$BACKUP_NAME" ]; then
        tar -xzf "$BACKUP_NAME" 2>/dev/null || true
        echo "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    else
        echo "‚ùå –ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–∫–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω"
    fi
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    docker-compose -f docker-compose.prod.yml up -d 2>/dev/null || true
    echo "üîÑ –û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
trap rollback ERR

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (–ù–ï Traefik)
echo "‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π..."
docker-compose -f docker-compose.prod.yml down

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤
echo "üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
docker rmi supermock-frontend supermock-backend 2>/dev/null || true

# –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
echo "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π..."
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ -f ".env" ]; then
    export $(cat .env | grep -v '^#' | xargs)
fi

# –°–æ–±–∏—Ä–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo "üî® –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
docker-compose -f docker-compose.prod.yml build --no-cache \
  --build-arg VITE_API_URL="${VITE_API_URL:-https://api.supermock.ru}" \
  --build-arg VITE_JITSI_URL="${VITE_JITSI_URL:-https://meet.jit.si}" \
  --build-arg VITE_TELEGRAM_BOT_NAME="${VITE_TELEGRAM_BOT_NAME:-SuperMock_bot}" \
  --build-arg VITE_TELEGRAM_BOT_ID="${VITE_TELEGRAM_BOT_ID:-8464088869}" \
  --build-arg VITE_STUN_URLS="${VITE_STUN_URLS:-stun:stun.l.google.com:19302}" \
  --build-arg VITE_TURN_URL="${VITE_TURN_URL:-turn:217.198.6.238:3478}" \
  --build-arg VITE_TURN_USERNAME="${VITE_TURN_USERNAME:-supermock}" \
  --build-arg VITE_TURN_PASSWORD="${VITE_TURN_PASSWORD:-supermock_turn_secret_2024_very_long_and_secure_key_for_webrtc}" \
  --build-arg VITE_ENABLE_DEMO_MODE="${VITE_ENABLE_DEMO_MODE:-0}" \
  frontend

# –°–æ–±–∏—Ä–∞–µ–º –±—ç–∫–µ–Ω–¥
echo "üî® –°–±–æ—Ä–∫–∞ –±—ç–∫–µ–Ω–¥–∞..."
docker-compose -f docker-compose.prod.yml build --no-cache backend

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
echo "‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π..."
docker-compose -f docker-compose.prod.yml up -d

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π..."
sleep 20

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞..."
FRONTEND_OK=false
BACKEND_OK=false

if docker ps | grep -q supermock-frontend; then
    echo "‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω"
    FRONTEND_OK=true
else
    echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"
fi

if docker ps | grep -q supermock-backend; then
    echo "‚úÖ –ë—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω"
    BACKEND_OK=true
else
    echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—ç–∫–µ–Ω–¥–∞"
fi

if [ "$FRONTEND_OK" = false ] || [ "$BACKEND_OK" = false ]; then
    echo "‚ùå –ù–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è..."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
check_health() {
    local service_name=$1
    local url=$2
    local max_attempts=10
    local attempt=1
    
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è $service_name..."
    
    while [ $attempt -le $max_attempts ]; do
        if curl -f -s "$url" > /dev/null 2>&1; then
            echo "‚úÖ $service_name –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã (–ø–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts)"
            return 0
        else
            echo "‚è≥ $service_name –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts)"
            sleep 5
            ((attempt++))
        fi
    done
    
    echo "‚ùå $service_name –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
    return 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
if check_health "–§—Ä–æ–Ω—Ç–µ–Ω–¥" "http://localhost:8080"; then
    FRONTEND_HEALTHY=true
else
    FRONTEND_HEALTHY=false
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–µ–Ω–¥–∞
if check_health "–ë—ç–∫–µ–Ω–¥" "http://localhost:3000/api/health"; then
    BACKEND_HEALTHY=true
else
    BACKEND_HEALTHY=false
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö URL
echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö URL..."
if curl -f -s https://supermock.ru > /dev/null 2>&1; then
    echo "‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ"
    EXTERNAL_SITE_HEALTHY=true
else
    echo "‚ùå –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ"
    EXTERNAL_SITE_HEALTHY=false
fi

if curl -f -s https://api.supermock.ru/api/health > /dev/null 2>&1; then
    echo "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ"
    EXTERNAL_API_HEALTHY=true
else
    echo "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ"
    EXTERNAL_API_HEALTHY=false
fi

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π..."
docker exec supermock-backend npx prisma migrate status || true

echo "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
docker exec supermock-backend npx prisma db push --accept-data-loss || true

echo "üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma Client..."
docker exec supermock-backend npx prisma generate --schema backend/prisma/schema.prisma || true

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
docker restart supermock-backend
sleep 15

# –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket
echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket..."
if curl -f -s "https://api.supermock.ru/socket.io/?EIO=4&transport=polling" > /dev/null 2>&1; then
    echo "‚úÖ WebSocket endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ö†Ô∏è  WebSocket endpoint –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö URL
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö URL..."
sleep 5

if curl -f -s https://supermock.ru > /dev/null 2>&1; then
    echo "‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ HTTPS"
else
    echo "‚ö†Ô∏è  –°–∞–π—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤"
fi

if curl -f -s https://api.supermock.ru/api/health > /dev/null 2>&1; then
    echo "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ HTTPS"
else
    echo "‚ö†Ô∏è  API –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤"
fi

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤
echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
docker image prune -f 2>/dev/null || true

# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ
echo ""
echo "üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –î–ï–ü–õ–û–ï"
echo "================================"

if [ "$FRONTEND_HEALTHY" = true ] && [ "$BACKEND_HEALTHY" = true ]; then
    echo "üéâ –î–ï–ü–õ–û–ô –£–°–ü–ï–®–ï–ù!"
    echo "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    
    if [ "$EXTERNAL_SITE_HEALTHY" = true ] && [ "$EXTERNAL_API_HEALTHY" = true ]; then
        echo "‚úÖ –í—Å–µ –≤–Ω–µ—à–Ω–∏–µ URL –¥–æ—Å—Ç—É–ø–Ω—ã"
    else
        echo "‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–Ω–µ—à–Ω–∏–µ URL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –≤—Ä–µ–º—è –¥–ª—è DNS)"
    fi
else
    echo "‚ö†Ô∏è  –î–ï–ü–õ–û–ô –ó–ê–í–ï–†–®–ï–ù –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò"
    if [ "$FRONTEND_HEALTHY" = false ]; then
        echo "‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
    if [ "$BACKEND_HEALTHY" = false ]; then
        echo "‚ùå –ë—ç–∫–µ–Ω–¥ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
fi

echo ""
echo "üåê –°–∞–π—Ç: https://supermock.ru"
echo "üîó API: https://api.supermock.ru"
echo "üîß WebSocket: wss://api.supermock.ru/socket.io/"
echo ""
echo "üìã –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
echo "   –§—Ä–æ–Ω—Ç–µ–Ω–¥: $([ "$FRONTEND_HEALTHY" = true ] && echo "‚úÖ" || echo "‚ùå")"
echo "   –ë—ç–∫–µ–Ω–¥: $([ "$BACKEND_HEALTHY" = true ] && echo "‚úÖ" || echo "‚ùå")"
echo "   –í–Ω–µ—à–Ω–∏–π —Å–∞–π—Ç: $([ "$EXTERNAL_SITE_HEALTHY" = true ] && echo "‚úÖ" || echo "‚ùå")"
echo "   –í–Ω–µ—à–Ω–∏–π API: $([ "$EXTERNAL_API_HEALTHY" = true ] && echo "‚úÖ" || echo "‚ùå")"
echo ""
echo "üíæ –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $BACKUP_NAME"
echo "================================"

# –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
trap - ERR

echo "üéâ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo "üåê –°–∞–π—Ç: https://supermock.ru"
echo "üîó API: https://api.supermock.ru"

EOF

echo "‚úÖ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!"
