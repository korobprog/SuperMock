#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
# –ù–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç Traefik –∏ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

echo "üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ Super Mock..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
echo "üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É..."
if ! ssh dokploy-server "echo '–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω'" > /dev/null 2>&1; then
    echo "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    exit 1
fi

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
echo "üìÅ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞..."
cd "$(dirname "$0")/../.."
echo "üìç –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
echo "üì¶ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -d "frontend" ]; then
    echo "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è 'frontend' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: $(pwd)"
    echo "üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"
    ls -la
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è frontend –Ω–µ –ø—É—Å—Ç–∞—è
if [ ! "$(ls -A frontend)" ]; then
    echo "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è 'frontend' –ø—É—Å—Ç–∞"
    exit 1
fi

# üîç –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò –ò –¢–ï–°–¢–´
echo "üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
REQUIRED_FILES=(
    "package.json"
    "frontend/vite.config.ts"
    "frontend/tsconfig.app.json"
    "frontend/Dockerfile"
    "docker-compose.prod.yml"
    ".env"
)

for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: $file"
        exit 1
    fi
done
echo "‚úÖ –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ TypeScript
echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ TypeScript..."
if command -v npx &> /dev/null; then
    cd frontend
    if npx tsc --noEmit --skipLibCheck 2>&1 | head -20; then
        echo "‚úÖ TypeScript –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞"
    else
        echo "‚ö†Ô∏è  TypeScript –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—è–≤–∏–ª–∞ –æ—à–∏–±–∫–∏, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
    fi
    cd ..
else
    echo "‚ö†Ô∏è  npx –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º TypeScript –ø—Ä–æ–≤–µ—Ä–∫—É"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ ESLint
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ESLint..."
if command -v npx &> /dev/null; then
    cd frontend
    if npx eslint src --ext .ts,.tsx --max-warnings 0 2>&1 | head -20; then
        echo "‚úÖ ESLint –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞"
    else
        echo "‚ö†Ô∏è  ESLint –≤—ã—è–≤–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
    fi
    cd ..
else
    echo "‚ö†Ô∏è  npx –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ESLint –ø—Ä–æ–≤–µ—Ä–∫—É"
fi

# –¢–µ—Å—Ç–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
echo "üèóÔ∏è  –¢–µ—Å—Ç–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
cd frontend
if command -v npm &> /dev/null; then
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å–±–æ—Ä–∫–∏..."
    npm install --silent
    
    echo "üî® –¢–µ—Å—Ç–æ–≤–∞—è —Å–±–æ—Ä–∫–∞..."
    if npm run build 2>&1 | head -30; then
        echo "‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞"
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–±–æ—Ä–∫—É
        rm -rf dist
    else
        echo "‚ùå –¢–µ—Å—Ç–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å"
        cd ..
        exit 1
    fi
else
    echo "‚ö†Ô∏è  npm –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–±–æ—Ä–∫—É"
fi
cd ..

echo "üéØ –í—Å–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!"

echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: $(pwd)/frontend"
echo "üìã –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: node_modules, .git, dist, .env, *.log"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω–æ –≤ –∞—Ä—Ö–∏–≤
echo "üì¶ –§–∞–π–ª—ã –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è:"
find frontend -type f -not -path '*/node_modules/*' -not -path '*/.git/*' -not -path '*/dist/*' -not -name '.env' -not -name '*.log' | head -20

tar -czf frontend.tar.gz --exclude='node_modules' --exclude='.git' --exclude='dist' --exclude='.env' --exclude='*.log' frontend/

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–ª—Å—è
if [ ! -f "frontend.tar.gz" ]; then
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ frontend.tar.gz"
    exit 1
fi

echo "üì¶ –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: $(du -h frontend.tar.gz | cut -f1)"
scp frontend.tar.gz dokploy-server:/opt/mockmate/
ssh dokploy-server "cd /opt/mockmate && echo 'üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤...' && rm -rf frontend/dist && echo 'üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞...' && tar -xzf frontend.tar.gz && rm frontend.tar.gz && echo '‚úÖ –ê—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' && echo 'üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:' && find frontend -type f | wc -l && echo 'üìÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:' && find frontend -type f -exec ls -la {} \\; | sort -k6,7 | tail -5"
rm frontend.tar.gz

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker
echo "üì¶ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
if [ ! -f "docker-compose.prod.yml" ]; then
    echo "‚ùå –§–∞–π–ª docker-compose.prod.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

if [ ! -f "docker-compose.override.yml" ]; then
    echo "‚ùå –§–∞–π–ª docker-compose.override.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

if [ ! -f "frontend/Dockerfile" ]; then
    echo "‚ùå –§–∞–π–ª frontend/Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker"
tar -czf docker-config.tar.gz docker-compose.prod.yml docker-compose.override.yml frontend/Dockerfile .env

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–ª—Å—è
if [ ! -f "docker-config.tar.gz" ]; then
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ docker-config.tar.gz"
    exit 1
fi

echo "üì¶ –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $(du -h docker-config.tar.gz | cut -f1)"
scp docker-config.tar.gz dokploy-server:/opt/mockmate/
ssh dokploy-server "cd /opt/mockmate && tar -xzf docker-config.tar.gz && rm docker-config.tar.gz"
rm docker-config.tar.gz

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
ssh dokploy-server << 'EOF'

echo "üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."

cd /opt/mockmate

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞..."
BACKUP_NAME="frontend-backup-$(date +%Y%m%d_%H%M%S).tar.gz"
tar -czf "$BACKUP_NAME" frontend/ 2>/dev/null || true

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
echo "‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
docker-compose -f docker-compose.prod.yml stop frontend

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –æ–±—Ä–∞–∑–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
echo "üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –æ–±—Ä–∞–∑–∞..."
docker rmi supermock-frontend 2>/dev/null || true

# –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
echo "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ -f ".env" ]; then
    export $(cat .env | grep -v '^#' | xargs)
fi

# –°–æ–±–∏—Ä–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
docker-compose -f docker-compose.prod.yml build --no-cache \
  --build-arg VITE_API_URL="${VITE_API_URL:-https://api.supermock.ru}" \
  --build-arg VITE_JITSI_URL="${VITE_JITSI_URL:-https://meet.jit.si}" \
  --build-arg VITE_TELEGRAM_BOT_NAME="${VITE_TELEGRAM_BOT_NAME:-SuperMock_bot}" \
  --build-arg VITE_TELEGRAM_BOT_ID="${VITE_TELEGRAM_BOT_ID:-8464088869}" \
  --build-arg VITE_STUN_URLS="${VITE_STUN_URLS:-stun:stun.l.google.com:19302}" \
  --build-arg VITE_TURN_URL="${VITE_TURN_URL:-turn:217.198.6.238:3478}" \
  --build-arg VITE_TURN_USERNAME="${VITE_TURN_USERNAME:-supermock}" \
  --build-arg VITE_TURN_PASSWORD="${VITE_TURN_PASSWORD:-supermock_turn_secret_2024_very_long_and_secure_key_for_webrtc}" \
  --build-arg VITE_ENABLE_DEMO_MODE="${VITE_ENABLE_DEMO_MODE:-0}" \
  frontend

# –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
echo "‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
docker-compose -f docker-compose.prod.yml up -d frontend

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
sleep 10

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞..."
if docker ps | grep -q "supermock-frontend"; then
    echo "‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω!"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è..."
sleep 5
if curl -f -s http://localhost:8080 > /dev/null 2>&1; then
    echo "‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã"
else
    echo "‚ö†Ô∏è  –§—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤"
fi

echo "üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo "üåê –°–∞–π—Ç: https://supermock.ru"

EOF

echo "‚úÖ –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω!"
