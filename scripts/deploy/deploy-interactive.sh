#!/bin/bash

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è Super Mock
# –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ –º–µ–Ω—é

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
print_color() {
    local color=$1
    local text=$2
    echo -e "${color}${text}${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é
show_menu() {
    clear
    print_color $BLUE "üöÄ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–ø–ª–æ–π Super Mock"
    echo ""
    print_color $YELLOW "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    echo ""
    echo "1) üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥"
    echo "2) üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –±—ç–∫–µ–Ω–¥"
    echo "3) üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∏ –±—ç–∫–µ–Ω–¥"
    echo "4) üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"
    echo "5) üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "6) üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã/–æ–±—Ä–∞–∑—ã"
    echo "7) üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞"
    echo "8) üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
    echo "9) üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å WebSocket"
    echo "10) üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å CORS"
    echo "11) üè• –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"
    echo "12) üìñ –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"
    echo "0) ‚ùå –í—ã—Ö–æ–¥"
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
check_server_connection() {
    print_color $YELLOW "üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É..."
    if ! ssh dokploy-server "echo '–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω'" > /dev/null 2>&1; then
        print_color $RED "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
    print_color $GREEN "‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω"
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
deploy_frontend() {
    print_color $BLUE "üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
    if ! check_server_connection; then
        return 1
    fi
    
    bash scripts/deploy/deploy-frontend.sh
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—ç–∫–µ–Ω–¥–∞
deploy_backend() {
    print_color $BLUE "üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ç–∫–µ–Ω–¥–∞..."
    if ! check_server_connection; then
        return 1
    fi
    
    bash scripts/deploy/deploy-backend.sh
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
deploy_all() {
    print_color $BLUE "üéØ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
    if ! check_server_connection; then
        return 1
    fi
    
    bash scripts/deploy/deploy-all.sh
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
check_server_status() {
    print_color $BLUE "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞..."
    if ! check_server_connection; then
        return 1
    fi
    
    ssh dokploy-server << 'EOF'
echo "=== –ö–û–ù–¢–ï–ô–ù–ï–†–´ ==="
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "(mockmate|traefik)" || echo "–ù–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ mockmate"
echo ""
echo "=== –û–ë–†–ê–ó–´ ==="
docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" | grep -E "(mockmate|traefik)" || echo "–ù–µ—Ç –æ–±—Ä–∞–∑–æ–≤ mockmate"
echo ""
echo "=== –î–ò–°–ö ==="
df -h /opt/mockmate
EOF
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤
show_logs() {
    print_color $BLUE "üìã –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    if ! check_server_connection; then
        return 1
    fi
    
    echo "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤:"
    echo "1) mockmate-frontend"
    echo "2) mockmate-backend"
    echo "3) mockmate-postgres"
    echo "4) mockmate-redis"
    echo "5) traefik"
    echo "0) –ù–∞–∑–∞–¥"
    
    read -p "–í—ã–±–æ—Ä: " log_choice
    
    case $log_choice in
        1) ssh dokploy-server "docker logs mockmate-frontend --tail 20" ;;
        2) ssh dokploy-server "docker logs mockmate-backend --tail 20" ;;
        3) ssh dokploy-server "docker logs mockmate-postgres --tail 10" ;;
        4) ssh dokploy-server "docker logs mockmate-redis --tail 10" ;;
        5) ssh dokploy-server "docker logs traefik --tail 10" ;;
        0) return ;;
        *) print_color $RED "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä" ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤/–æ–±—Ä–∞–∑–æ–≤
cleanup_old_containers() {
    print_color $BLUE "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –æ–±—Ä–∞–∑–æ–≤..."
    if ! check_server_connection; then
        return 1
    fi
    
    ssh dokploy-server << 'EOF'
echo "=== –£–î–ê–õ–ï–ù–ò–ï –û–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–• –ö–û–ù–¢–ï–ô–ù–ï–†–û–í ==="
docker container prune -f

echo ""
echo "=== –£–î–ê–õ–ï–ù–ò–ï –ù–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú–´–• –û–ë–†–ê–ó–û–í ==="
docker image prune -a -f

echo ""
echo "=== –£–î–ê–õ–ï–ù–ò–ï –ù–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú–´–• –°–ï–¢–ï–ô ==="
docker network prune -f

echo ""
echo "=== –†–ï–ó–£–õ–¨–¢–ê–¢ ==="
echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
docker ps -a --format "{{.Names}} {{.Status}}" | grep -E "(mockmate|traefik)" || echo "–ù–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ mockmate"
echo ""
echo "–û–±—Ä–∞–∑—ã:"
docker images --format "{{.Repository}}:{{.Tag}} {{.Size}}" | grep -E "(mockmate|traefik)" || echo "–ù–µ—Ç –æ–±—Ä–∞–∑–æ–≤ mockmate"
EOF
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
check_site_availability() {
    print_color $BLUE "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞..."
    
    echo "–ü—Ä–æ–≤–µ—Ä—è—é https://supermock.ru..."
    if curl -f -s https://supermock.ru > /dev/null 2>&1; then
        print_color $GREEN "‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        print_color $RED "‚ùå –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    echo "–ü—Ä–æ–≤–µ—Ä—è—é https://api.supermock.ru/api/health..."
    if curl -f -s https://api.supermock.ru/api/health > /dev/null 2>&1; then
        print_color $GREEN "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        print_color $RED "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
fix_database() {
    print_color $BLUE "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    if ! check_server_connection; then
        return 1
    fi
    
    bash scripts/deploy/fix-database.sh
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebSocket
fix_websocket() {
    print_color $BLUE "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WebSocket..."
    if ! check_server_connection; then
        return 1
    fi
    
    bash scripts/deploy/fix-websocket.sh
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è CORS
fix_cors() {
    print_color $BLUE "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ CORS..."
    if ! check_server_connection; then
        return 1
    fi
    
    bash scripts/deploy/fix-cors.sh
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
health_check() {
    print_color $BLUE "üè• –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è..."
    if ! check_server_connection; then
        return 1
    fi
    
    bash scripts/deploy/health-check.sh
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
show_documentation() {
    print_color $BLUE "üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –¥–µ–ø–ª–æ—é:"
    echo ""
    cat README.md
}

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–µ–Ω—é
while true; do
    show_menu
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-12): " choice
    
    case $choice in
        1)
            deploy_frontend
            ;;
        2)
            deploy_backend
            ;;
        3)
            deploy_all
            ;;
        4)
            check_server_status
            ;;
        5)
            show_logs
            ;;
        6)
            cleanup_old_containers
            ;;
        7)
            check_site_availability
            ;;
        8)
            fix_database
            ;;
        9)
            fix_websocket
            ;;
        10)
            fix_cors
            ;;
        11)
            health_check
            ;;
        12)
            show_documentation
            ;;
        0)
            print_color $GREEN "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
            exit 0
            ;;
        *)
            print_color $RED "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            ;;
    esac
    
    echo ""
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
done
