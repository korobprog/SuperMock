const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkCurrentSlots() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Å–ª–æ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ user_queue
    const queues = await prisma.userQueue.findMany({
      include: {
        user: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${queues.length} –∑–∞–ø–∏—Å–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏:`);
    
    queues.forEach((queue, index) => {
      console.log(`\n${index + 1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${queue.user?.firstName || 'Unknown'} (${queue.userId})`);
      console.log(`   –†–æ–ª—å: ${queue.role}`);
      console.log(`   –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${queue.profession}`);
      console.log(`   –Ø–∑—ã–∫: ${queue.language}`);
      console.log(`   –°–ª–æ—Ç UTC: ${queue.slotUtc}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${queue.status}`);
      console.log(`   –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${queue.tools || '–Ω–µ—Ç'}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${queue.createdAt}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∂–µ—Ç API –¥–ª—è —Ä–∞–∑–Ω—ã—Ö timezone
    console.log('\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API –¥–ª—è —Ä–∞–∑–Ω—ã—Ö timezone:');
    
    const testCases = [
      { timezone: 'Europe/Moscow', date: '2025-08-22' },
      { timezone: 'Asia/Vladivostok', date: '2025-08-22' },
      { timezone: 'UTC', date: '2025-08-22' }
    ];
    
    for (const testCase of testCases) {
      console.log(`\nüìÖ ${testCase.timezone}, ${testCase.date}:`);
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å
      const startZ = new Date(`${testCase.date}T00:00:00.000Z`);
      const endZ = new Date(`${testCase.date}T23:59:59.999Z`);
      
      const matchingQueues = queues.filter(q => {
        const slotDate = new Date(q.slotUtc);
        return slotDate >= startZ && slotDate <= endZ && 
               q.role === 'interviewer' && 
               q.profession === 'frontend' && 
               q.language === 'ru';
      });
      
      if (matchingQueues.length > 0) {
        const slotTimes = [...new Set(matchingQueues.map(q => {
          const d = new Date(q.slotUtc);
          return d.toISOString().slice(11, 16); // HH:mm –≤ UTC
        }))];
        
        console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${matchingQueues.length} —Å–ª–æ—Ç–æ–≤: ${slotTimes.join(', ')}`);
      } else {
        console.log(`   ‚ùå –°–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkCurrentSlots();
