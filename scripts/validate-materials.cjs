const fs = require('fs');
const path = require('path');

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
const SUPPORTED_LANGUAGES = ['ru', 'en', 'es', 'de', 'fr', 'zh'];

// –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏
const PROFESSIONS = [
  'frontend-developer',
  'backend-developer',
  'fullstack-developer',
  'mobile-developer',
  'devops-engineer',
  'qa-engineer',
  'ux-ui-designer',
  'data-analyst',
  'data-scientist',
  'product-manager'
];

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
const VALID_CATEGORIES = [
  'interview-questions',
  'technical-tasks',
  'system-design',
  'behavioral',
  'algorithms',
  'best-practices'
];

// –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
const VALID_DIFFICULTIES = ['beginner', 'intermediate', 'advanced'];

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const materialSchema = {
  profession: { type: 'string', required: true, enum: PROFESSIONS },
  language: { type: 'string', required: true, enum: SUPPORTED_LANGUAGES },
  categories: { type: 'array', required: true },
  materials: { type: 'array', required: true }
};

const categorySchema = {
  id: { type: 'string', required: true, enum: VALID_CATEGORIES },
  name: { type: 'string', required: true },
  count: { type: 'number', required: true },
  icon: { type: 'string', required: true },
  color: { type: 'string', required: true }
};

const materialItemSchema = {
  id: { type: 'number', required: true },
  title: { type: 'string', required: true, minLength: 1 },
  description: { type: 'string', required: true, minLength: 1 },
  category: { type: 'string', required: true, enum: VALID_CATEGORIES },
  difficulty: { type: 'string', required: true, enum: VALID_DIFFICULTIES },
  readTime: { type: 'number', required: true, min: 1 },
  rating: { type: 'number', required: true, min: 0, max: 5 },
  reads: { type: 'number', required: true, min: 0 },
  tags: { type: 'array', required: true },
  content: { type: 'string', required: true, minLength: 1 },
  isNew: { type: 'boolean', required: true },
  isPopular: { type: 'boolean', required: true },
  createdAt: { type: 'string', required: true }
};

function validateSchema(data, schema, path = '') {
  const errors = [];

  for (const [key, rules] of Object.entries(schema)) {
    const value = data[key];
    const currentPath = path ? `${path}.${key}` : key;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (rules.required && (value === undefined || value === null)) {
      errors.push(`${currentPath}: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ`);
      continue;
    }

    if (value === undefined || value === null) {
      continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø
    if (rules.type === 'string' && typeof value !== 'string') {
      errors.push(`${currentPath}: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π`);
    } else if (rules.type === 'number' && typeof value !== 'number') {
      errors.push(`${currentPath}: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º`);
    } else if (rules.type === 'boolean' && typeof value !== 'boolean') {
      errors.push(`${currentPath}: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º`);
    } else if (rules.type === 'array' && !Array.isArray(value)) {
      errors.push(`${currentPath}: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º enum
    if (rules.enum && !rules.enum.includes(value)) {
      errors.push(`${currentPath}: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ [${rules.enum.join(', ')}]`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º min/max –¥–ª—è —á–∏—Å–µ–ª
    if (rules.type === 'number') {
      if (rules.min !== undefined && value < rules.min) {
        errors.push(`${currentPath}: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ ${rules.min}`);
      }
      if (rules.max !== undefined && value > rules.max) {
        errors.push(`${currentPath}: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ ${rules.max}`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º minLength –¥–ª—è —Å—Ç—Ä–æ–∫
    if (rules.type === 'string' && rules.minLength && value.length < rules.minLength) {
      errors.push(`${currentPath}: –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º ${rules.minLength} —Å–∏–º–≤–æ–ª–æ–≤`);
    }

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
    if (rules.type === 'object' && rules.schema && typeof value === 'object') {
      errors.push(...validateSchema(value, rules.schema, currentPath));
    }
  }

  return errors;
}

function validateMaterial(material, index) {
  const errors = validateSchema(material, materialItemSchema, `materials[${index}]`);
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  if (material.tags && !Array.isArray(material.tags)) {
    errors.push(`materials[${index}].tags: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º`);
  }

  if (material.tags && material.tags.length > 0) {
    material.tags.forEach((tag, tagIndex) => {
      if (typeof tag !== 'string' || tag.length === 0) {
        errors.push(`materials[${index}].tags[${tagIndex}]: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π`);
      }
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
  if (material.createdAt) {
    const date = new Date(material.createdAt);
    if (isNaN(date.getTime())) {
      errors.push(`materials[${index}].createdAt: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã`);
    }
  }

  return errors;
}

function validateCategories(categories) {
  const errors = [];
  
  if (!Array.isArray(categories)) {
    errors.push('categories: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
    return errors;
  }

  categories.forEach((category, index) => {
    errors.push(...validateSchema(category, categorySchema, `categories[${index}]`));
  });

  return errors;
}

function validateMaterialsFile(filePath) {
  console.log(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞: ${path.basename(filePath)}`);
  
  try {
    const fileContent = fs.readFileSync(filePath, 'utf8');
    const data = JSON.parse(fileContent);

    const errors = [];

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    errors.push(...validateSchema(data, materialSchema));

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (data.categories) {
      errors.push(...validateCategories(data.categories));
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    if (data.materials && Array.isArray(data.materials)) {
      data.materials.forEach((material, index) => {
        errors.push(...validateMaterial(material, index));
      });
    }

    if (errors.length === 0) {
      console.log(`‚úÖ –§–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω`);
      return { valid: true, errors: [] };
    } else {
      console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: ${errors.length}`);
      errors.forEach(error => console.log(`  - ${error}`));
      return { valid: false, errors };
    }

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}`);
    return { valid: false, errors: [error.message] };
  }
}

function validateAllMaterials() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...\n');

  const materialsDir = path.join(__dirname, '..', 'materials');
  let totalFiles = 0;
  let validFiles = 0;
  let invalidFiles = 0;
  const allErrors = [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  if (!fs.existsSync(materialsDir)) {
    console.log('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è materials –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return;
  }

  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º –∏ —è–∑—ã–∫–∞–º
  for (const profession of PROFESSIONS) {
    for (const language of SUPPORTED_LANGUAGES) {
      const fileName = `${profession}-${language}.json`;
      const filePath = path.join(materialsDir, fileName);
      
      if (fs.existsSync(filePath)) {
        totalFiles++;
        const result = validateMaterialsFile(filePath);
        
        if (result.valid) {
          validFiles++;
        } else {
          invalidFiles++;
          allErrors.push({
            file: fileName,
            errors: result.errors
          });
        }
      } else {
        console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fileName}`);
      }
    }
  }

  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  console.log(`üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}`);
  console.log(`‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${validFiles}`);
  console.log(`‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${invalidFiles}`);

  if (invalidFiles > 0) {
    console.log('\n‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:');
    allErrors.forEach(({ file, errors }) => {
      console.log(`\nüìÑ ${file}:`);
      errors.forEach(error => console.log(`  - ${error}`));
    });
  }

  if (validFiles === totalFiles && totalFiles > 0) {
    console.log('\nüéâ –í—Å–µ —Ñ–∞–π–ª—ã –≤–∞–ª–∏–¥–Ω—ã!');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const command = args[0];

switch (command) {
  case 'all':
    validateAllMaterials();
    break;
  case 'file':
    const filePath = args[1];
    if (!filePath) {
      console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node validate-materials.js file <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>');
      process.exit(1);
    }
    validateMaterialsFile(filePath);
    break;
  default:
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log('  node validate-materials.js all                    - –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã');
    console.log('  node validate-materials.js file <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>    - –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª');
    break;
}
