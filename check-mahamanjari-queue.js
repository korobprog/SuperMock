import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkMahamanjariQueue() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è Mahamanjari_dd...\n');

    const userId = '74497925';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const preferences = await prisma.preference.findMany({
      where: { userId },
      include: { user: true }
    });

    console.log('üìã –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è Mahamanjari_dd:');
    preferences.forEach(pref => {
      console.log(`   –†–æ–ª—å: ${pref.role}`);
      console.log(`   –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${pref.profession}`);
      console.log(`   –Ø–∑—ã–∫: ${pref.language}`);
      console.log(`   –°–ª–æ—Ç—ã UTC: ${pref.slotsUtc}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—á–µ—Ä–µ–¥–∏
    const queueEntries = await prisma.userQueue.findMany({
      where: { userId },
      include: { user: true }
    });

    console.log(`\nüö∂ –ó–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è Mahamanjari_dd: ${queueEntries.length}`);
    queueEntries.forEach(entry => {
      console.log(`   - –°–ª–æ—Ç: ${entry.slotUtc}`);
      console.log(`   - –†–æ–ª—å: ${entry.role}`);
      console.log(`   - –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${entry.profession}`);
      console.log(`   - –Ø–∑—ã–∫: ${entry.language}`);
      console.log(`   - –°—Ç–∞—Ç—É—Å: ${entry.status}`);
    });

    if (queueEntries.length === 0) {
      console.log('\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤ –æ—á–µ—Ä–µ–¥–∏!');
      console.log('üîß –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç, –ø–æ—á–µ–º—É –æ–Ω –Ω–µ –≤–∏–¥–∏—Ç –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–æ–≤ –≤ UI');
      
      // –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥—å
      console.log('\n‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å...');
      const pref = preferences[0];
      if (pref) {
        const slotsUtc = JSON.parse(pref.slotsUtc);
        
        for (const slotUtc of slotsUtc) {
          console.log(`   –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ—Ç: ${slotUtc}`);
          
          try {
            await prisma.userQueue.create({
              data: {
                userId,
                role: pref.role,
                profession: pref.profession,
                language: pref.language,
                slotUtc,
                status: 'waiting'
              }
            });
            console.log(`   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–æ—Ç ${slotUtc}`);
          } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ª–æ—Ç ${slotUtc}:`, error.message);
          }
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    console.log('\nüîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏...');
    const finalQueueEntries = await prisma.userQueue.findMany({
      where: { userId },
      include: { user: true }
    });

    console.log(`üìä –ó–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥–∏: ${finalQueueEntries.length}`);
    finalQueueEntries.forEach(entry => {
      console.log(`   - ${entry.slotUtc} (${entry.role}) - ${entry.profession} - ${entry.language}`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkMahamanjariQueue();
