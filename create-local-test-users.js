import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function createLocalTestUsers() {
  try {
    console.log('üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ...\n');

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    await prisma.match.deleteMany({});
    await prisma.userQueue.deleteMany({});
    await prisma.preference.deleteMany({});
    await prisma.user.deleteMany({});

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üë• –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1: –ö–∞–Ω–¥–∏–¥–∞—Ç –∏–∑ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞
    const candidate1 = await prisma.user.create({
      data: {
        id: 'test-candidate-1',
        username: 'candidate_vladivostok',
        firstName: '–ö–∞–Ω–¥–∏–¥–∞—Ç',
        lastName: '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫',
        tgId: '123456789'
      }
    });

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2: –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –∏–∑ –ú–æ—Å–∫–≤—ã
    const interviewer1 = await prisma.user.create({
      data: {
        id: 'test-interviewer-1',
        username: 'interviewer_moscow',
        firstName: '–ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä',
        lastName: '–ú–æ—Å–∫–≤–∞',
        tgId: '987654321'
      }
    });

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3: –ö–∞–Ω–¥–∏–¥–∞—Ç –∏–∑ –ú–æ—Å–∫–≤—ã
    const candidate2 = await prisma.user.create({
      data: {
        id: 'test-candidate-2',
        username: 'candidate_moscow',
        firstName: '–ö–∞–Ω–¥–∏–¥–∞—Ç',
        lastName: '–ú–æ—Å–∫–≤–∞',
        tgId: '111222333'
      }
    });

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 4: –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –∏–∑ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞
    const interviewer2 = await prisma.user.create({
      data: {
        id: 'test-interviewer-2',
        username: 'interviewer_vladivostok',
        firstName: '–ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä',
        lastName: '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫',
        tgId: '444555666'
      }
    });

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    console.log('üìÖ –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è...');

    // –ö–∞–Ω–¥–∏–¥–∞—Ç 1 (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫) - –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç 14:00 –ø–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫—É (04:00 UTC)
    await prisma.preference.create({
      data: {
        userId: candidate1.id,
        role: 'candidate',
        profession: 'frontend',
        language: 'ru',
        slotsUtc: JSON.stringify(['2025-08-22T04:00:00.000Z'])
      }
    });

    // –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä 1 (–ú–æ—Å–∫–≤–∞) - –¥–æ—Å—Ç—É–ø–µ–Ω –≤ 07:00 –ø–æ –ú–æ—Å–∫–≤–µ (04:00 UTC)
    await prisma.preference.create({
      data: {
        userId: interviewer1.id,
        role: 'interviewer',
        profession: 'frontend',
        language: 'ru',
        slotsUtc: JSON.stringify(['2025-08-22T04:00:00.000Z'])
      }
    });

    // –ö–∞–Ω–¥–∏–¥–∞—Ç 2 (–ú–æ—Å–∫–≤–∞) - –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç 07:00 –ø–æ –ú–æ—Å–∫–≤–µ (04:00 UTC)
    await prisma.preference.create({
      data: {
        userId: candidate2.id,
        role: 'candidate',
        profession: 'frontend',
        language: 'ru',
        slotsUtc: JSON.stringify(['2025-08-22T04:00:00.000Z'])
      }
    });

    // –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä 2 (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫) - –¥–æ—Å—Ç—É–ø–µ–Ω –≤ 14:00 –ø–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫—É (04:00 UTC)
    await prisma.preference.create({
      data: {
        userId: interviewer2.id,
        role: 'interviewer',
        profession: 'frontend',
        language: 'ru',
        slotsUtc: JSON.stringify(['2025-08-22T04:00:00.000Z'])
      }
    });

    console.log('‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã');

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    console.log('üìã –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å...');

    // –ö–∞–Ω–¥–∏–¥–∞—Ç 1 –≤ –æ—á–µ—Ä–µ–¥–∏
    await prisma.userQueue.create({
      data: {
        userId: candidate1.id,
        role: 'candidate',
        profession: 'frontend',
        language: 'ru',
        slotUtc: '2025-08-22T04:00:00.000Z',
        status: 'waiting'
      }
    });

    // –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä 1 –≤ –æ—á–µ—Ä–µ–¥–∏
    await prisma.userQueue.create({
      data: {
        userId: interviewer1.id,
        role: 'interviewer',
        profession: 'frontend',
        language: 'ru',
        slotUtc: '2025-08-22T04:00:00.000Z',
        status: 'waiting'
      }
    });

    // –ö–∞–Ω–¥–∏–¥–∞—Ç 2 –≤ –æ—á–µ—Ä–µ–¥–∏
    await prisma.userQueue.create({
      data: {
        userId: candidate2.id,
        role: 'candidate',
        profession: 'frontend',
        language: 'ru',
        slotUtc: '2025-08-22T04:00:00.000Z',
        status: 'waiting'
      }
    });

    // –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä 2 –≤ –æ—á–µ—Ä–µ–¥–∏
    await prisma.userQueue.create({
      data: {
        userId: interviewer2.id,
        role: 'interviewer',
        profession: 'frontend',
        language: 'ru',
        slotUtc: '2025-08-22T04:00:00.000Z',
        status: 'waiting'
      }
    });

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    
    const allEntries = await prisma.userQueue.findMany({
      where: { slotUtc: '2025-08-22T04:00:00.000Z' },
      include: { user: true }
    });

    console.log('üìã –í—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–ª–æ—Ç–µ 04:00 UTC:');
    allEntries.forEach(entry => {
      const name = entry.user.firstName + ' ' + entry.user.lastName;
      console.log(`   - ${name} (${entry.role}) - ${entry.profession} - ${entry.language}`);
    });

    const candidates = allEntries.filter(e => e.role === 'candidate');
    const interviewers = allEntries.filter(e => e.role === 'interviewer');

    console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ—Ç–∞ 04:00 UTC:`);
    console.log(`   –ö–∞–Ω–¥–∏–¥–∞—Ç—ã: ${candidates.length}`);
    console.log(`   –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—ã: ${interviewers.length}`);

    if (candidates.length > 0 && interviewers.length > 0) {
      console.log('\nüéØ –°–ª–æ—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –º–∞—Ç—á–∏–Ω–≥–∞!');
      console.log('‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥');
    }

    console.log('\nüß™ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5173/time –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createLocalTestUsers();
