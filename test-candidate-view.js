import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testCandidateView() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞...\n');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    const testCandidateId = 'test-candidate-' + Date.now();
    
    console.log('üë§ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞...');
    await prisma.user.upsert({
      where: { id: testCandidateId },
      update: {},
      create: {
        id: testCandidateId,
        firstName: 'Test',
        lastName: 'Candidate',
        language: 'ru'
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    console.log('üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞...');
    await prisma.preference.create({
      data: {
        userId: testCandidateId,
        role: 'candidate',
        profession: 'frontend',
        language: 'ru',
        slotsUtc: JSON.stringify(['2025-08-22T04:00:00.000Z'])
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å
    console.log('üìã –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å...');
    await prisma.userQueue.create({
      data: {
        userId: testCandidateId,
        role: 'candidate',
        profession: 'frontend',
        language: 'ru',
        slotUtc: '2025-08-22T04:00:00.000Z',
        status: 'waiting'
      }
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å\n');

    // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤–∏–¥–∏—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–∏—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —Å–ª–æ—Ç–∞ 04:00 UTC
    const queueEntries = await prisma.userQueue.findMany({
      where: {
        slotUtc: '2025-08-22T04:00:00.000Z'
      },
      include: {
        user: true
      }
    });

    console.log(`üìä –ó–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —Å–ª–æ—Ç–∞ 04:00 UTC (${queueEntries.length}):`);
    queueEntries.forEach(entry => {
      console.log(`   - ${entry.user.firstName || 'Unknown'} (${entry.role}) - ${entry.profession} - ${entry.language}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—ã –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ
    const interviewers = queueEntries.filter(entry => entry.role === 'interviewer');
    const candidates = queueEntries.filter(entry => entry.role === 'candidate');

    console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å–ª–æ—Ç–∞ 04:00 UTC:`);
    console.log(`   –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—ã: ${interviewers.length}`);
    console.log(`   –ö–∞–Ω–¥–∏–¥–∞—Ç—ã: ${candidates.length}`);

    if (interviewers.length > 0) {
      console.log('\n‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å —ç—Ç–æ—Ç —Å–ª–æ—Ç!');
      console.log('   –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—ã:');
      interviewers.forEach(entry => {
        console.log(`   - ${entry.user.firstName || 'Unknown'} (${entry.profession})`);
      });
    } else {
      console.log('\n‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç –ù–ï –≤–∏–¥–∏—Ç —ç—Ç–æ—Ç —Å–ª–æ—Ç - –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–æ–≤');
    }

    // –û—á–∏—Å—Ç–∫–∞
    console.log('\nüßπ –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    await prisma.userQueue.deleteMany({
      where: { userId: testCandidateId }
    });
    await prisma.preference.deleteMany({
      where: { userId: testCandidateId }
    });
    await prisma.user.delete({
      where: { id: testCandidateId }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testCandidateView();
