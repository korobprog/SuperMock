import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkTimezoneIssue() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏...\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —Å–ª–æ—Ç–∞ 04:00 UTC
    const slot04Entries = await prisma.userQueue.findMany({
      where: { slotUtc: '2025-08-22T04:00:00.000Z' },
      include: { user: true }
    });

    console.log('üìä –ó–∞–ø–∏—Å–∏ –≤ —Å–ª–æ—Ç–µ 04:00 UTC:');
    slot04Entries.forEach(entry => {
      const name = entry.user.firstName || entry.user.lastName || entry.user.username || 'Unknown';
      console.log(`   - ${name} (${entry.role}) - ${entry.profession} - ${entry.language}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è frontend/ru
    const frontendRuEntries = await prisma.userQueue.findMany({
      where: {
        profession: 'frontend',
        language: 'ru'
      },
      include: { user: true },
      orderBy: { slotUtc: 'asc' }
    });

    console.log('üìã –í—Å–µ –∑–∞–ø–∏—Å–∏ frontend/ru:');
    frontendRuEntries.forEach(entry => {
      const name = entry.user.firstName || entry.user.lastName || entry.user.username || 'Unknown';
      console.log(`   - ${name}: ${entry.slotUtc} (${entry.role})`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏
    const duplicates = frontendRuEntries.filter(entry => {
      const sameSlot = frontendRuEntries.filter(e => 
        e.slotUtc === entry.slotUtc && 
        e.role === entry.role && 
        e.userId === entry.userId
      );
      return sameSlot.length > 1;
    });

    if (duplicates.length > 0) {
      console.log('\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏:');
      duplicates.forEach(entry => {
        const name = entry.user.firstName || entry.user.lastName || entry.user.username || 'Unknown';
        console.log(`   - ${name}: ${entry.slotUtc} (${entry.role})`);
      });
    } else {
      console.log('\n‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏ –≤ –æ–¥–Ω–æ–º —Å–ª–æ—Ç–µ
    const slotsWithBothRoles = {};
    frontendRuEntries.forEach(entry => {
      if (!slotsWithBothRoles[entry.slotUtc]) {
        slotsWithBothRoles[entry.slotUtc] = { candidates: 0, interviewers: 0 };
      }
      if (entry.role === 'candidate') {
        slotsWithBothRoles[entry.slotUtc].candidates++;
      } else if (entry.role === 'interviewer') {
        slotsWithBothRoles[entry.slotUtc].interviewers++;
      }
    });

    console.log('\nüìà –°–ª–æ—Ç—ã —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏ –∏ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞–º–∏:');
    Object.entries(slotsWithBothRoles).forEach(([slot, counts]) => {
      if (counts.candidates > 0 && counts.interviewers > 0) {
        console.log(`   - ${slot}: ${counts.candidates} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, ${counts.interviewers} –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–æ–≤`);
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkTimezoneIssue();
