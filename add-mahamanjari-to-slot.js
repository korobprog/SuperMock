import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function addMahamanjariToSlot() {
  try {
    console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º Mahamanjari_dd –≤ —Å–ª–æ—Ç 04:00 UTC (07:00 –ø–æ –ú–æ—Å–∫–≤–µ)...\n');

    const userId = '74497925';
    const targetSlot = '2025-08-22T04:00:00.000Z';
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—ã –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ
    const interviewers = await prisma.userQueue.findMany({
      where: {
        slotUtc: targetSlot,
        role: 'interviewer',
        profession: 'frontend',
        language: 'ru'
      },
      include: { user: true }
    });

    console.log(`üîç –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—ã –≤ —Å–ª–æ—Ç–µ ${targetSlot}:`);
    interviewers.forEach(entry => {
      const name = entry.user.firstName || entry.user.lastName || entry.user.username || 'Unknown';
      console.log(`   - ${name} (${entry.profession}, ${entry.language})`);
    });

    if (interviewers.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–æ–≤ –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ Mahamanjari_dd –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ
    const existingEntry = await prisma.userQueue.findFirst({
      where: {
        userId,
        slotUtc: targetSlot
      }
    });

    if (existingEntry) {
      console.log('‚úÖ Mahamanjari_dd —É–∂–µ –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ');
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º Mahamanjari_dd –≤ —Å–ª–æ—Ç
    await prisma.userQueue.create({
      data: {
        userId,
        role: 'candidate',
        profession: 'frontend', 
        language: 'ru',
        slotUtc: targetSlot,
        status: 'waiting'
      }
    });

    console.log('‚úÖ Mahamanjari_dd –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–æ—Ç 04:00 UTC');

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.preference.updateMany({
      where: { 
        userId,
        role: 'candidate'
      },
      data: {
        slotsUtc: JSON.stringify([targetSlot])
      }
    });

    console.log('‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª–æ—Ç–∞ 04:00 UTC –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π:');
    const allEntries = await prisma.userQueue.findMany({
      where: { slotUtc: targetSlot },
      include: { user: true }
    });

    allEntries.forEach(entry => {
      const name = entry.user.firstName || entry.user.lastName || entry.user.username || 'Unknown';
      console.log(`   - ${name} (${entry.role}) - ${entry.profession} - ${entry.language}`);
    });

    const candidatesInSlot = allEntries.filter(e => e.role === 'candidate');
    const interviewersInSlot = allEntries.filter(e => e.role === 'interviewer');

    console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ—Ç–∞:`);
    console.log(`   –ö–∞–Ω–¥–∏–¥–∞—Ç—ã: ${candidatesInSlot.length}`);
    console.log(`   –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—ã: ${interviewersInSlot.length}`);

    if (candidatesInSlot.length > 0 && interviewersInSlot.length > 0) {
      console.log('\nüéØ –¢–µ–ø–µ—Ä—å –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ –µ—Å—Ç—å –∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã, –∏ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—ã!');
      console.log('‚úÖ Mahamanjari_dd –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–æ–≤ –≤ UI');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

addMahamanjariToSlot();
