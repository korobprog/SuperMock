#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç—á–∏–Ω–≥–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
 * –ó–∞–ø—É—Å–∫: node test-timezone-matching.js
 */

import { DateTime } from 'luxon';

const API_BASE = 'http://localhost:3000';

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –º–∞—Ç—á–∏–Ω–≥–∞
const testScenarios = [
  {
    name: '–ú–æ—Å–∫–≤–∞ ‚Üî –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ (Frontend)',
    candidate: {
      id: 2002,
      name: '–ú–∏—Ö–∞–∏–ª (–ú–æ—Å–∫–≤–∞)',
      timezone: 'Europe/Moscow',
      timezoneOffset: 'UTC+3',
      profession: 'frontend',
      language: 'ru',
      tools: ['react', 'javascript', 'css'],
      localTime: '14:00',
    },
    interviewer: {
      id: 2001,
      name: '–ê–Ω–Ω–∞ (–ú–æ—Å–∫–≤–∞)',
      timezone: 'Europe/Moscow',
      timezoneOffset: 'UTC+3',
      profession: 'frontend',
      language: 'ru',
      tools: ['react', 'typescript', 'vue'],
      localTime: '10:00',
    },
    expectedMatch: false, // –†–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è
  },
  {
    name: '–ú–æ—Å–∫–≤–∞ ‚Üî –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ (Backend)',
    candidate: {
      id: 2004,
      name: '–î–º–∏—Ç—Ä–∏–π (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)',
      timezone: 'Asia/Vladivostok',
      timezoneOffset: 'UTC+10',
      profession: 'backend',
      language: 'ru',
      tools: ['java', 'spring', 'mysql'],
      localTime: '09:00',
    },
    interviewer: {
      id: 2003,
      name: '–ï–ª–µ–Ω–∞ (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)',
      timezone: 'Asia/Vladivostok',
      timezoneOffset: 'UTC+10',
      profession: 'backend',
      language: 'ru',
      tools: ['nodejs', 'python', 'postgresql'],
      localTime: '17:00',
    },
    expectedMatch: false, // –†–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è
  },
  {
    name: '–ù—å—é-–ô–æ—Ä–∫ ‚Üî –õ–æ–Ω–¥–æ–Ω (Full Stack)',
    candidate: {
      id: 2006,
      name: 'Sarah (New York)',
      timezone: 'America/New_York',
      timezoneOffset: 'UTC-5',
      profession: 'fullstack',
      language: 'en',
      tools: ['vue', 'python', 'mongodb'],
      localTime: '10:00',
    },
    interviewer: {
      id: 2005,
      name: 'John (New York)',
      timezone: 'America/New_York',
      timezoneOffset: 'UTC-5',
      profession: 'fullstack',
      language: 'en',
      tools: ['react', 'nodejs', 'typescript'],
      localTime: '15:00',
    },
    expectedMatch: false, // –†–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è
  },
  {
    name: '–õ–æ–Ω–¥–æ–Ω ‚Üî –¢–æ–∫–∏–æ (DevOps)',
    candidate: {
      id: 2008,
      name: 'James (London)',
      timezone: 'Europe/London',
      timezoneOffset: 'UTC+0',
      profession: 'devops',
      language: 'en',
      tools: ['jenkins', 'terraform', 'gcp'],
      localTime: '16:00',
    },
    interviewer: {
      id: 2007,
      name: 'Emma (London)',
      timezone: 'Europe/London',
      timezoneOffset: 'UTC+0',
      profession: 'devops',
      language: 'en',
      tools: ['docker', 'kubernetes', 'aws'],
      localTime: '13:00',
    },
    expectedMatch: false, // –†–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è
  },
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserSlots(userId, role) {
  try {
    const response = await fetch(`${API_BASE}/api/my-bookings/${userId}`);
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }
    const data = await response.json();
    return data.queues.filter(q => q.role === role);
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –¥–ª—è ${userId}: ${error.message}`);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç—á–∏–Ω–≥–∞
async function testMatching(candidate, interviewer) {
  console.log(`\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Ç—á–∏–Ω–≥: ${candidate.name} ‚Üî ${interviewer.name}`);
  console.log(`   –ö–∞–Ω–¥–∏–¥–∞—Ç: ${candidate.timezoneOffset} (${candidate.localTime})`);
  console.log(`   –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: ${interviewer.timezoneOffset} (${interviewer.localTime})`);

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    const candidateSlots = await getUserSlots(candidate.id, 'candidate');
    const interviewerSlots = await getUserSlots(interviewer.id, 'interviewer');

    console.log(`   –°–ª–æ—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: ${candidateSlots.length}`);
    console.log(`   –°–ª–æ—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞: ${interviewerSlots.length}`);

    if (candidateSlots.length === 0 || interviewerSlots.length === 0) {
      console.log(`   ‚ö†Ô∏è  –ù–µ—Ç —Å–ª–æ—Ç–æ–≤ –¥–ª—è –º–∞—Ç—á–∏–Ω–≥–∞`);
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const candidateTimes = candidateSlots.map(s => s.slotUtc);
    const interviewerTimes = interviewerSlots.map(s => s.slotUtc);

    const commonTimes = candidateTimes.filter(time => interviewerTimes.includes(time));

    if (commonTimes.length > 0) {
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${commonTimes.length} –æ–±—â–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö
      commonTimes.forEach(utcTime => {
        const utcDateTime = DateTime.fromISO(utcTime);
        const candidateLocalTime = utcDateTime.setZone(candidate.timezone).toFormat('HH:mm');
        const interviewerLocalTime = utcDateTime.setZone(interviewer.timezone).toFormat('HH:mm');
        
        console.log(`      UTC: ${utcDateTime.toFormat('HH:mm')}`);
        console.log(`      ${candidate.name}: ${candidateLocalTime}`);
        console.log(`      ${interviewer.name}: ${interviewerLocalTime}`);
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
      const commonTools = candidate.tools.filter(t => interviewer.tools.includes(t));
      const matchScore = commonTools.length;
      
      console.log(`   –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: ${candidate.tools.join(', ')}`);
      console.log(`   –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞: ${interviewer.tools.join(', ')}`);
      console.log(`   –û–±—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${commonTools.length > 0 ? commonTools.join(', ') : '–Ω–µ—Ç'}`);
      console.log(`   –û—Ü–µ–Ω–∫–∞ –º–∞—Ç—á–∞: ${matchScore}/3`);

      return true;
    } else {
      console.log(`   ‚ùå –ù–µ—Ç –æ–±—â–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤`);
      return false;
    }

  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç—á–∏–Ω–≥–∞: ${error.message}`);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö
function demonstrateTimezoneConversion() {
  console.log('\nüåç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö:\n');

  const timezones = [
    { name: '–ú–æ—Å–∫–≤–∞', zone: 'Europe/Moscow', offset: 'UTC+3' },
    { name: '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', zone: 'Asia/Vladivostok', offset: 'UTC+10' },
    { name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', zone: 'Asia/Yekaterinburg', offset: 'UTC+5' },
    { name: '–õ–æ–Ω–¥–æ–Ω', zone: 'Europe/London', offset: 'UTC+0' },
    { name: '–ù—å—é-–ô–æ—Ä–∫', zone: 'America/New_York', offset: 'UTC-5' },
    { name: '–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å', zone: 'America/Los_Angeles', offset: 'UTC-8' },
    { name: '–¢–æ–∫–∏–æ', zone: 'Asia/Tokyo', offset: 'UTC+9' },
    { name: '–î—É–±–∞–π', zone: 'Asia/Dubai', offset: 'UTC+4' },
  ];

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
  const now = DateTime.now();
  console.log('üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:');
  timezones.forEach(tz => {
    const localTime = now.setZone(tz.zone);
    console.log(`${tz.name} (${tz.offset}): ${localTime.toFormat('HH:mm')} - ${localTime.toFormat('EEEE, dd MMMM yyyy')}`);
  });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
  console.log('\nüìÖ –ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏:');
  
  const examples = [
    { name: '–£—Ç—Ä–µ–Ω–Ω–µ–µ –∏–Ω—Ç–µ—Ä–≤—å—é', moscowTime: '10:00' },
    { name: '–î–Ω–µ–≤–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é', moscowTime: '14:00' },
    { name: '–í–µ—á–µ—Ä–Ω–µ–µ –∏–Ω—Ç–µ—Ä–≤—å—é', moscowTime: '19:00' },
  ];

  examples.forEach(example => {
    console.log(`\n${example.name} (–ú–æ—Å–∫–≤–∞ ${example.moscowTime}):`);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –ú–æ—Å–∫–≤—ã –≤ UTC
    const [hours, minutes] = example.moscowTime.split(':').map(Number);
    const moscowDate = DateTime.now().setZone('Europe/Moscow');
    const slotDate = moscowDate.set({ hour: hours, minute: minutes, second: 0, millisecond: 0 });
    const utcDate = slotDate.toUTC();
    
    timezones.forEach(tz => {
      const localTime = utcDate.setZone(tz.zone);
      console.log(`${tz.name}: ${localTime.toFormat('HH:mm')}`);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
async function checkSystemStatus() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã:\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
    const statusResponse = await fetch(`${API_BASE}/api/dev/status`);
    if (statusResponse.ok) {
      const status = await statusResponse.json();
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(`   –ö–∞–Ω–¥–∏–¥–∞—Ç ID: ${status.candidateId}`);
      console.log(`   –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä ID: ${status.interviewerId}`);
      console.log(`   –û—á–µ—Ä–µ–¥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: ${status.candidateQueues?.length || 0}`);
    } else {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏
    const candidateSlots = await fetch(`${API_BASE}/api/slots?role=candidate&timezone=UTC`);
    const interviewerSlots = await fetch(`${API_BASE}/api/slots?role=interviewer&timezone=UTC`);
    
    if (candidateSlots.ok && interviewerSlots.ok) {
      const candidateData = await candidateSlots.json();
      const interviewerData = await interviewerSlots.json();
      
      const totalCandidates = candidateData.slots.reduce((sum, slot) => sum + slot.count, 0);
      const totalInterviewers = interviewerData.slots.reduce((sum, slot) => sum + slot.count, 0);
      
      console.log(`   –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: ${totalCandidates}`);
      console.log(`   –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: ${totalInterviewers}`);
      console.log(`   –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: ${candidateData.slots.length + interviewerData.slots.length}`);
    }

    return true;
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function testTimezoneMatching() {
  console.log('üåç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—á–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
  const systemOk = await checkSystemStatus();
  if (!systemOk) {
    console.log('‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
    return;
  }

  console.log('\nüìã –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:');
  testScenarios.forEach((scenario, index) => {
    console.log(`${index + 1}. ${scenario.name}`);
  });

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
  const results = [];
  for (const scenario of testScenarios) {
    const matched = await testMatching(scenario.candidate, scenario.interviewer);
    results.push({
      scenario: scenario.name,
      matched,
      expected: scenario.expectedMatch,
      success: matched === scenario.expectedMatch,
    });
  }

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  results.forEach(result => {
    const status = result.success ? '‚úÖ' : '‚ùå';
    const matchStatus = result.matched ? '–°–û–í–ü–ê–õ' : '–ù–ï –°–û–í–ü–ê–õ';
    console.log(`${status} ${result.scenario}: ${matchStatus} (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${result.expected ? '–°–û–í–ü–ê–õ' : '–ù–ï –°–û–í–ü–ê–õ'})`);
  });

  const successCount = results.filter(r => r.success).length;
  console.log(`\nüéØ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${successCount}/${results.length}`);

  // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏
  demonstrateTimezoneConversion();

  console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É –º–∞—Ç—á–∏–Ω–≥–∞ –≤ —Å–∏—Å—Ç–µ–º–µ');
  console.log('‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Ä–µ–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è');
  console.log('‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
}

// –ó–∞–ø—É—Å–∫
testTimezoneMatching().catch(console.error);
