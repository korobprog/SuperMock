import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkMahamanjari() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Mahamanjari_dd...\n');

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
    const users = await prisma.user.findMany({
      where: {
        OR: [
          { firstName: { contains: 'Mahamanjari' } },
          { lastName: { contains: 'Mahamanjari' } },
          { username: { contains: 'Mahamanjari' } },
          { username: { contains: 'dd' } }
        ]
      },
      include: {
        preferences: true,
        queues: true
      }
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n`);

    if (users.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Mahamanjari_dd –Ω–µ –Ω–∞–π–¥–µ–Ω');
      
      // –ü–æ–∫–∞–∂–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
      console.log('\nüìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:');
      const allUsers = await prisma.user.findMany({
        include: { preferences: true }
      });
      
      allUsers.forEach(user => {
        const name = user.firstName || user.lastName || user.username || 'Unknown';
        const prefs = user.preferences[0];
        console.log(`   - ${name} (ID: ${user.id}) - ${prefs?.role || 'no role'} - ${prefs?.profession || 'no profession'} - ${prefs?.language || 'no language'}`);
      });
      
      return;
    }

    users.forEach(user => {
      const name = user.firstName || user.lastName || user.username || 'Unknown';
      const prefs = user.preferences[0];
      const queues = user.queues;
      
      console.log(`üë§ ${name} (ID: ${user.id})`);
      console.log(`   Username: ${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`   –†–æ–ª—å: ${prefs?.role || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      console.log(`   –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${prefs?.profession || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      console.log(`   –Ø–∑—ã–∫: ${prefs?.language || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`   –°–ª–æ—Ç—ã UTC: ${prefs?.slotsUtc || '–Ω–µ—Ç'}`);
      console.log(`   –í –æ—á–µ—Ä–µ–¥–∏: ${queues.length} –∑–∞–ø–∏—Å–µ–π`);
      
      if (queues.length > 0) {
        queues.forEach(entry => {
          console.log(`     - ${entry.slotUtc} (${entry.role}) - ${entry.profession} - ${entry.language}`);
        });
      }
      console.log('');
    });

    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å
    if (users.length > 0) {
      const user = users[0];
      const prefs = user.preferences[0];
      
      if (prefs?.role === 'candidate') {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç...\n');
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–æ–≤ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
        const availableInterviewers = await prisma.userQueue.findMany({
          where: {
            role: 'interviewer',
            profession: prefs.profession,
            language: prefs.language
          },
          include: { user: true }
        });

        console.log(`üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—ã (${availableInterviewers.length}):`);
        availableInterviewers.forEach(entry => {
          const interviewerName = entry.user.firstName || entry.user.lastName || entry.user.username || 'Unknown';
          console.log(`   - ${interviewerName} –≤ —Å–ª–æ—Ç–µ ${entry.slotUtc} (${entry.profession}, ${entry.language})`);
        });

        if (availableInterviewers.length === 0) {
          console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–æ–≤ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏');
          
          // –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
          const allInterviewers = await prisma.userQueue.findMany({
            where: { role: 'interviewer' },
            include: { user: true }
          });
          
          console.log(`\nüîç –í—Å–µ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—ã –≤ —Å–∏—Å—Ç–µ–º–µ (${allInterviewers.length}):`);
          allInterviewers.forEach(entry => {
            const interviewerName = entry.user.firstName || entry.user.lastName || entry.user.username || 'Unknown';
            console.log(`   - ${interviewerName}: ${entry.profession}, ${entry.language} –≤ —Å–ª–æ—Ç–µ ${entry.slotUtc}`);
          });
        }
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkMahamanjari();
