import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkUserTimezone() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...\n');

    const userId = '74497925'; // Mahamanjari_dd

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { id: userId },
      include: {
        preferences: true,
        queues: true
      }
    });

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.firstName || user.lastName || user.username}`);
    console.log(`üÜî ID: ${user.id}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    const prefs = user.preferences[0];
    if (prefs) {
      console.log(`üìÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:`);
      console.log(`   –†–æ–ª—å: ${prefs.role}`);
      console.log(`   –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${prefs.profession}`);
      console.log(`   –Ø–∑—ã–∫: ${prefs.language}`);
      console.log(`   –°–ª–æ—Ç—ã UTC: ${prefs.slotsUtc || '–Ω–µ—Ç'}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
    console.log(`\nüìã –ó–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥–∏:`);
    user.queues.forEach(queue => {
      console.log(`   - ${queue.slotUtc} (${queue.role}) - ${queue.profession} - ${queue.language}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ —Å–ª–æ—Ç–µ 04:00 UTC
    const slot04Entry = user.queues.find(q => q.slotUtc === '2025-08-22T04:00:00.000Z');
    if (slot04Entry) {
      console.log(`\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ª–æ—Ç–µ 04:00 UTC`);
    } else {
      console.log(`\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤ —Å–ª–æ—Ç–µ 04:00 UTC`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –≤ —Ç–æ–º –∂–µ —Å–ª–æ—Ç–µ
    const interviewerInSlot = await prisma.userQueue.findFirst({
      where: {
        slotUtc: '2025-08-22T04:00:00.000Z',
        role: 'interviewer',
        profession: 'frontend',
        language: 'ru'
      },
      include: { user: true }
    });

    if (interviewerInSlot) {
      const interviewerName = interviewerInSlot.user.firstName || interviewerInSlot.user.lastName || interviewerInSlot.user.username;
      console.log(`\nüë®‚Äçüíº –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –≤ —Å–ª–æ—Ç–µ: ${interviewerName}`);
    } else {
      console.log(`\n‚ùå –ù–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞ –≤ —Å–ª–æ—Ç–µ 04:00 UTC`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–ª–æ—Ç–µ 04:00 UTC
    console.log(`\nüìä –í—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–ª–æ—Ç–µ 04:00 UTC:`);
    const allSlot04Entries = await prisma.userQueue.findMany({
      where: { slotUtc: '2025-08-22T04:00:00.000Z' },
      include: { user: true }
    });

    allSlot04Entries.forEach(entry => {
      const name = entry.user.firstName || entry.user.lastName || entry.user.username;
      console.log(`   - ${name} (${entry.role}) - ${entry.profession} - ${entry.language}`);
    });

    const candidates = allSlot04Entries.filter(e => e.role === 'candidate');
    const interviewers = allSlot04Entries.filter(e => e.role === 'interviewer');

    console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ—Ç–∞ 04:00 UTC:`);
    console.log(`   –ö–∞–Ω–¥–∏–¥–∞—Ç—ã: ${candidates.length}`);
    console.log(`   –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—ã: ${interviewers.length}`);

    if (candidates.length > 0 && interviewers.length > 0) {
      console.log(`\nüéØ –°–ª–æ—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –º–∞—Ç—á–∏–Ω–≥–∞!`);
      console.log(`‚úÖ Mahamanjari_dd –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞ –≤ UI`);
    } else {
      console.log(`\n‚ö†Ô∏è  –°–ª–æ—Ç –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è –º–∞—Ç—á–∏–Ω–≥–∞`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkUserTimezone();
