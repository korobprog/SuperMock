#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
 * –ó–∞–ø—É—Å–∫: node test-tools-system.js
 */

const API_BASE = process.env.API_BASE || 'http://localhost:3000';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testUsers = [
  {
    id: 1001,
    name: 'Frontend Developer',
    profession: 'frontend',
    language: 'en',
    tools: ['react', 'typescript', 'vue', 'css'],
    role: 'interviewer',
  },
  {
    id: 1002,
    name: 'Backend Developer',
    profession: 'backend',
    language: 'en',
    tools: ['nodejs', 'python', 'postgresql', 'docker'],
    role: 'candidate',
  },
  {
    id: 1003,
    name: 'Full Stack Developer',
    profession: 'fullstack',
    language: 'en',
    tools: ['react', 'nodejs', 'typescript', 'postgresql'],
    role: 'interviewer',
  },
  {
    id: 1004,
    name: 'Designer',
    profession: 'designer',
    language: 'en',
    tools: ['figma', 'photoshop', 'sketch'],
    role: 'candidate',
  },
];

async function testAPI(endpoint, method = 'GET', body = null) {
  const url = `${API_BASE}${endpoint}`;
  const options = {
    method,
    headers: { 'Content-Type': 'application/json' },
    credentials: 'include',
  };

  if (body) {
    options.body = JSON.stringify(body);
  }

  try {
    const response = await fetch(url, options);
    const data = await response.json();

    if (!response.ok) {
      throw new Error(
        `HTTP ${response.status}: ${data.error || 'Unknown error'}`
      );
    }

    return data;
  } catch (error) {
    console.error(`‚ùå API Error (${method} ${endpoint}):`, error.message);
    throw error;
  }
}

async function createTestUsers() {
  console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

  for (const user of testUsers) {
    try {
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º–∏—Ç–∏—Ä—É–µ–º)
      console.log(`  - –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.name} (ID: ${user.id})`);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await testAPI('/api/user-tools', 'POST', {
        userId: user.id,
        profession: user.profession,
        tools: user.tools,
      });

      console.log(`  ‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è ${user.name}`);

      // –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏ (–∏–º–∏—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ preferences)
      const slotTime = new Date();
      slotTime.setHours(14, 0, 0, 0); // 14:00

      await testAPI('/api/preferences', 'POST', {
        userId: user.id,
        role: user.role,
        profession: user.profession,
        language: user.language,
        slotsUtc: [slotTime.toISOString()],
      });

      console.log(`  ‚úÖ –°–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω –¥–ª—è ${user.name}`);
    } catch (error) {
      console.log(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–ª—è ${user.name}:`, error.message);
    }
  }
}

async function testUserToolsAPI() {
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userTools = await testAPI('/api/user-tools?userId=1001');
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:', userTools);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    const updatedTools = await testAPI('/api/user-tools', 'POST', {
      userId: 1001,
      profession: 'frontend',
      tools: ['react', 'vue', 'angular', 'typescript'],
    });
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:', updatedTools);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:', error.message);
  }
}

async function testSlotsWithTools() {
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏...');

  try {
    // –¢–µ—Å—Ç 1: –°—Ç—Ä–æ–≥–∏–π –ø–æ–∏—Å–∫ (exact)
    const exactSlots = await testAPI(
      '/api/slots/with-tools?role=candidate&profession=frontend&language=en&tools=react&tools=typescript&matchStrictness=exact'
    );
    console.log('‚úÖ –°—Ç—Ä–æ–≥–∏–π –ø–æ–∏—Å–∫ (exact):', exactSlots);

    // –¢–µ—Å—Ç 2: –ß–∞—Å—Ç–∏—á–Ω—ã–π –ø–æ–∏—Å–∫ (partial)
    const partialSlots = await testAPI(
      '/api/slots/with-tools?role=candidate&profession=frontend&language=en&tools=react&tools=typescript&matchStrictness=partial'
    );
    console.log('‚úÖ –ß–∞—Å—Ç–∏—á–Ω—ã–π –ø–æ–∏—Å–∫ (partial):', partialSlots);

    // –¢–µ—Å—Ç 3: –õ—é–±–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (any)
    const anySlots = await testAPI(
      '/api/slots/with-tools?role=candidate&profession=frontend&language=en&tools=react&tools=typescript&matchStrictness=any'
    );
    console.log('‚úÖ –õ—é–±–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (any):', anySlots);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤:', error.message);
  }
}

async function testMatchingLogic() {
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –º–∞—Ç—á–∏–Ω–≥–∞...');

  const testCases = [
    {
      name: 'Frontend + React/TypeScript',
      params: {
        role: 'candidate',
        profession: 'frontend',
        language: 'en',
        tools: ['react', 'typescript'],
        matchStrictness: 'any',
      },
    },
    {
      name: 'Backend + Node.js/Python',
      params: {
        role: 'interviewer',
        profession: 'backend',
        language: 'en',
        tools: ['nodejs', 'python'],
        matchStrictness: 'partial',
      },
    },
    {
      name: 'Full Stack + React/Node.js',
      params: {
        role: 'candidate',
        profession: 'fullstack',
        language: 'en',
        tools: ['react', 'nodejs', 'typescript'],
        matchStrictness: 'exact',
      },
    },
  ];

  for (const testCase of testCases) {
    try {
      console.log(`\n  –¢–µ—Å—Ç: ${testCase.name}`);
      const slots = await testAPI(
        '/api/slots/with-tools?' +
          new URLSearchParams({
            ...testCase.params,
            tools: testCase.params.tools.join(','),
          })
      );
      console.log(`  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${slots.slots?.length || 0} —Å–ª–æ—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ`);

      if (slots.slots?.length > 0) {
        slots.slots.forEach((slot) => {
          console.log(
            `    - ${slot.time}: ${slot.count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, score: ${
              slot.matchScore || 'N/A'
            }`
          );
        });
      }
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }
}

async function cleanup() {
  console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

  try {
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–º–∏—Ç–∏—Ä—É–µ–º)
    for (const user of testUsers) {
      try {
        await testAPI(`/api/dev/cleanup`, 'POST');
        console.log(`  ‚úÖ –û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${user.name}`);
      } catch (error) {
        console.log(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è ${user.name}:`, error.message);
      }
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error.message);
  }
}

async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...\n');

  try {
    await createTestUsers();
    await testUserToolsAPI();
    await testSlotsWithTools();
    await testMatchingLogic();

    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');

    // –û—á–∏—Å—Ç–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    const readline = await import('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
    });

    rl.question('\nüßπ –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ? (y/N): ', async (answer) => {
      if (answer.toLowerCase() === 'y') {
        await cleanup();
      }
      rl.close();
    });
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (import.meta.url === `file://${process.argv[1]}`) {
  runTests();
}

export {
  testAPI,
  createTestUsers,
  testUserToolsAPI,
  testSlotsWithTools,
  testMatchingLogic,
};
